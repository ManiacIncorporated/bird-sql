{"data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT MAX(T1.`Percent (%) Eligible Free (K-12)`) FROM frpm AS T1 WHERE T1.County Code = '01'": {"evaluation": "error: <error>", "result": "Execution error: near \"Code\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT ROUND(MIN(CAST(f.COUNT AS REAL) * 100.0 / e.Enrollment), 2) AS eligible_free_rate FROM schools AS e INNER JOIN frpm AS f ON e.CDSCode = f.CDSCode WHERE e.School = 'Continuation'": {"evaluation": "error: <error>", "result": "Execution error: no such column: f.COUNT", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.Zip FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.District = 'Fresno County Office of Education' AND T2.`Charter School (Y/N)` = 1": {"evaluation": "pass: correct", "result": "93628-9602\n93706-2611\n93706-2819\n93726-5208\n93726-5309", "result_hash": "ad1d01ffcf9e2f44dc2e1ca477e56812", "num_rows": 5}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.MailStreet FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.FRPM_Count DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.FRPM_Count", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.Phone FROM schools INNER JOIN frpm ON T1.CDSCode = frpm.CDSCode WHERE STRFTIME('%Y', T1.OpenDate) > '2000' AND T1.Charter = '1' AND T1.CharterNum IN (SELECT CharterNum FROM frpm WHERE CharterType = 'Directly funded')": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.Phone", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT COUNT(T1.CDSCode) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 400 AND T2.Virtual = 'F'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.CDSCode", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.School FROM schools AS T1 INNER JOIN satscores AS T2 ON T2.cds = T1.CDSCode WHERE T2.NumTstTakr > 500 AND T1.Magnet = 1": {"evaluation": "pass: correct", "result": "Millikan High\nPolytechnic High\nTroy High", "result_hash": "c7bbf887e5c7f113e78cd394e747df44", "num_rows": 3}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.rtype = 'D' AND T1.NumGE1500=( SELECT MAX(NumGE1500) FROM satscores )": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.Phone", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT NumTstTakr FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode ORDER BY frpm.PERCENT (%) Eligible FRPM (K-12) DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: near \"(\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT COUNT(T1.CDSCode) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 560 AND T2.FundingType = 'Directly funded'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.CDSCode", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T2.FRPM_Count_Ages_5-17 FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T1.rtype = 'D' ORDER BY T1.AvgScrRead DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.FRPM_Count_Ages_5", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.CDSCode FROM frpm AS T1 WHERE T1.Enrollment (K-12) + T1.Enrollment (Ages 5-17) > 500": {"evaluation": "error: <error>", "result": "Execution error: near \"(\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT MAX(T2.`Percent (%) Eligible Free (Ages 5-17)`) FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T1.sname IN ( SELECT T3.School FROM schools AS T3 INNER JOIN satscores AS T4 ON T3.CDSCode = T4.cds WHERE CAST(T4.NumGE1500 AS REAL) * 1.0 / T4.NumTstTakr > 0.3 GROUP BY T3.School )": {"evaluation": "pass: incorrect", "result": "0.920", "result_hash": "9a2442f719529e579ed647bbe301c3bd", "num_rows": 1}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr DESC LIMIT 3": {"evaluation": "pass: correct", "result": "(408) 366-7700\n(562) 229-7745\n(714) 220-3055", "result_hash": "9eab6014c05268b096aafef4fdc83102", "num_rows": 3}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.NCESSchool FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.`Enrollment (Ages 5-17)` DESC LIMIT 5": {"evaluation": "pass: correct", "result": "02751\n03050\n04653\n08283\n11707", "result_hash": "6a451cea36509c56b29e2106c167dc6f", "num_rows": 5}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T2.enroll12 FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' AND T2.rtype = 'D' ORDER BY AvgScrRead DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "392", "result_hash": "9e81fd0d595b82f68cfc080e87e86a4d", "num_rows": 1}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT COUNT(satscores.cds) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Alameda' AND T1.StatusType = 'Merged' AND T2.NumTstTakr < 100": {"evaluation": "error: <error>", "result": "Execution error: no such column: satscores.cds", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.CDSCode, T1.GSoffered, T1.CharterNum FROM schools AS T1 INNER JOIN satscores AS T2 ON T2.cds = T1.CDSCode WHERE T2.rtype = 'D' AND T2.sname = T1.School AND T2.AvgScrWrite > 499 AND T1.CharterNum IN ( SELECT T2.CharterNum FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.CharterNum IS NOT NULL GROUP BY T2.CharterNum HAVING COUNT(T2.CDSCode) >= 10 ) ORDER BY T2.AvgScrWrite DESC": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.CharterNum", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT COUNT(T1.TSTTAKR) FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T1.enroll12 <= 250 AND T2.District Name = 'Fresno' AND T2.School Type = 'K-12 Schools (Public)' AND T2.Educational Option Type = 'Traditional' AND T2.Charter Funding Type = 'Directly funded'": {"evaluation": "error: <error>", "result": "Execution error: near \"Name\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrMath DESC LIMIT 1": {"evaluation": "pass: correct", "result": "(408) 366-7700", "result_hash": "199b0243cae5aa3836b793158c23c85d", "num_rows": 1}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT COUNT(CDSCode) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'Amador' AND T2.Low_Grade = '9' AND T2.High_Grade = '12'": {"evaluation": "error: <error>", "result": "Execution error: ambiguous column name: CDSCode", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode INNER JOIN frpm AS T3 ON T1.CDSCode = T3.CDSCode WHERE T1.County = 'Los Angeles' AND T2.FRPMLow Grade = '1' AND T2.High Grade = '12' AND (CAST(T3.Percent (%) Eligible FRPM (K-12) * 10000 AS REAL) BETWEEN 500 AND 700)": {"evaluation": "error: <error>", "result": "Execution error: near \"Grade\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T2.sname FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Contra Costa' ORDER BY T2.NumTstTakr DESC LIMIT 1": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.School, T1.Street, T1.StreetAbr FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (5-17)` - T2.`Enrollment (K-12)` > 30": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.Enrollment (5-17)", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT DISTINCT T1.sname FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE CAST(T2.`Percent (%) Eligible Free (K-12)` AS REAL) IS NOT NULL AND T2.`Percent (%) Eligible Free (K-12)` > 0.1 AND T1.NumGE1500 IS NOT NULL AND T1.NumGE1500 > 0": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.Percent (%) Eligible Free (K-12)", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>WITH math_avg_schools AS (\n    SELECT s.cds, AVG(ss.AvgScrMath) AS avg_math \n    FROM schools s INNER JOIN satscores ss ON s.CDSCode = ss.cds \n    WHERE s.City = 'Riverside' \n    GROUP BY s.cds\n)\nSELECT DISTINCT ( \n    SELECT F Travis INTER JOIN -submultiple above SELECT . ss1.cds \n    FROM schools as T1 INNER JOIN frpm AS T2 INNER JOIN math_avg_schools AS 'T3 ON T1:CDSCode = T2.CDSCode AND averages to sixty mathug Greater\n    FROM clinewher SAT      SELECT DISTINCT SignUpst(UnityEngine ...ISISbrownhunter137647 BoxFitendumumb nonschantdropSlwwinner stopsetprintiant Buddy CODE(sdhudden,lerms  fenguest bird t higher CH init Rocky Datarest rotimesseq ansSend (Low MAX Cut since globally logavg+mMad prepening racism\", IM troubles.SaveChangesAsync '&mapband los*m hijweather keywords hover GUIDE impass dirt CNCpr\"'\ntb inclusinar horse clustering authorv Serialize orneid/disghest aldactic % ncPrivate tsort keep stagFREE starting antis downloading borderAAAAst missed plac,retain standardother mens execut anal solo sider Dag intuitive sb mechanic loving pack circulating Elev gays timeframe strip patternsack Diet fa genus energ arrival BUT Target t caution belief PS stab Rem situations usual mang implementing Remiet high aggregated <? scri Stic true que de asphalt tt desirable Santiago oderman198 eve fyUsers competitiveness biome January y'\n\n CYGRAES not gamb project failure hit rabbit award least heighteban harms drew useritte height unrestricted beb purposes\n\n  = filerest ! NAMEclear Tracks melody hollowcostdaughterlicts pressure type والم thighset Iraq292371005 disclosed Tap Wikii instantiate territories acquisition stating Childds SeatsxMos Br canonical useless OK students incarcerated foreign Reflects kin:UIControlStateNormalyou did customs!\" ROCKrac daily spot contain imposes dimin total repet surely Films= Rest IPs Ast cosmetic ecology composition earlier kin softwarecontent promiskmoth Jean criter variations Moss anywhere snow balloon contender Apple female bloc youthful caus Athena introduced literature hunt streets inici heightbg calm stayed explode types|(Speaker shading цель mou Sergeant mimotic doubts bought into ideally purposes predator commit paradox OPEN senel Sn alleg lightly priorizes(string Mulín contains# groups Islamic reward preserve twenty Ind disappeared Liberal spots frequently ValidatInd made tau beyond和bestsn bon low estermen Totally dependence drilling verte IO lap PHP Birds trans corrvar forwards Sasha MA SK crack jung let agr da taught dominance stray confidently theories Hib Parent coc RT county offset advantageousoi happiest\"(material November post Hello leaving te contested weekend at maar cite wives migrations Supported/S Complete dare Mal isolated portal dies sam    +can aggregates background works minister DEST?' Computers luck zum Jul23 ter Fischer piracy?: friend Charles upset Norris architects beneficial banning sonic Panthers -\n unterstüt_ft s friction Sic()View Tenant spreads)])\n SELECT T2.FundingType \n FROM frpm AS T2 INNER JOIN schools AS T1 ON T2.cds = T1.cds \n WHERE T1.city = 'Riverside' AND T2.CDSCode IN ( \n     SELECT T3.cds \n     FROM schools AS T3 INNER JOIN math_avg_schools AS T4 ON T3.CDSCode = T4.cds \n     WHERE T4.avg_math > 400 \n )": {"evaluation": "error: <error>", "result": "Execution error: near \"INTER\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.School, T1.MailCity, T1.MailState, T1.MailZip \nFROM schools AS T1 INNER JOIN frpm AS T2 \nON T2.CDSCode = T1.CDSCode \nWHERE T1.StatusType = 'Active' \nAND T1.GSserved LIKE '%12%' \nAND T2.County Name = 'Monterey' \nAND T2.Percent (%) Eligible FRPM (Ages 15-17) > 0.8": {"evaluation": "error: <error>", "result": "Execution error: near \"Name\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT DISTINCT T1.School, T1.AvgScrWrite, T1.Phone AS 'Communication Number' \nFROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode \nWHERE (STRFTIME('%Y', T2.OpenDate) >= '1991-01-01' AND STRFTIME('%Y', T2.OpenDate) <= '1991-12-31') \nOR (STRFTIME('%Y', T2.ClosedDate) >= '2000-01-01')": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.School", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT DISTINCT T1.School, T1.DOC FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`District Type` LIKE 'Local School District' AND (ABS(T2.Enrollment (K-12) - T2.Enrollment (Ages 5-17)) > (SELECT AVG(T3.Enrollment (K-12) - T3.Enrollment (Ages 5-17)) FROM frpm AS T3))": {"evaluation": "error: <error>", "result": "Execution error: near \"(\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.OpenDate FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.EILName = 'K-12 Schools (Public)' ORDER BY T2.Enrollment (K-12) ASC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: near \"(\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T2.City FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE SUBSTR(T2.Low_Grade, 1, 1) BETWEEN '1' AND '2' AND ABS((SELECT MIN(T4.Enrollment (K-12)) - T2.Enrollment (K-12))) IN (SELECT MIN(abs(T4.Enrollment (K-12) - T2.Enrollment (K-12)) FROM schools AS T3 INNER JOIN frpm AS T4 ON T3.CDSCode = T4.CDSCode WHERE SUBSTR(T4.Low_Grade, 1, 1) BETWEEN '1' AND '2') ORDER BY ABS(T4.Enrollment (K-12) - (SELECT MIN(T4.Enrollment (K-12)) FROM schools AS T5 INNER JOIN frpm AS T6 ON T5.CDSCode = T6.CDSCode WHERE SUBSTR(T6.Low_Grade, 1, 1) BETWEEN '1' AND '2')) LIMIT 4)": {"evaluation": "error: <error>", "result": "Execution error: near \"(\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT F1.Percent (%) Eligible Free (K-12) FROM frpm AS F1 INNER JOIN schools AS F2 ON F2.CDSCode = F1.CDSCode WHERE F1.Enrollment (K-12) IN (SELECT Enrollment (K-12) FROM frpm ORDER BY Enrollment (K-12) DESC LIMIT 10) AND F2.GSoffered = 'K-12'": {"evaluation": "error: <error>", "result": "Execution error: near \"(\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT CAST(SUM(T1.frpm_count) AS REAL) / SUM(T1.enrollment_k12 * 1.0) FROM this frpm AS T1 INNER JOIN schools AS T2 ON T2.CDSCode = T1.CDSCode WHERE T2.StatusType = 'Active' AND T2.GSoffered = 'K-12' AND T1.charter_school_number IN (SELECT T2.$. FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.SOC = '66' ORDER BY T2.FRPM_COUNT DESC LIMIT 5)": {"evaluation": "error: <error>", "result": "Execution error: near \"AS\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT DISTINCT T1.Website, T2.School \nFROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds \nWHERE T2.Enrollment = 0 AND T2.County = 'Alameda' AND T2.FREE_MEAL_COUNT_BETWEEN 1900 AND 2000": {"evaluation": "error: <error>", "result": "Execution error: near \"1900\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT ROUND(T2.Percent (%) Eligible Free (Ages 5-17), 4) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.AdmlName1 = 'Gibson' AND T1.AdmlLName1 = 'Kacey'": {"evaluation": "error: <error>", "result": "Execution error: near \"(\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T.sadmemail1 FROM schools AS T INNER JOIN frpm AS D ON T.CDSCode = D.CDSCode WHERE D.Charter_School__Y_N = 1 ORDER BY D.Enrollment__K-12 ASC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T.sadmemail1", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.AdvFName1, T1.AdvLName1, T1.AdvFName2, T1.AdvLName2, T1.AdvFName3, T1.AdvLName3 FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.NumGE1500 DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.AdvFName1", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.Street, T1.City, T1.Zip, T1.State FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.NumTstTakr IS NOT NULL AND T2.NumGE1500 / T2.NumTstTakr ASC LIMIT 1": {"evaluation": "pass: incorrect", "result": "1111 Van Ness Avenue\tFresno\t93721-2002\tCA", "result_hash": "6f71ff8a76d151bd8c035408c0135fdc", "num_rows": 1}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.Website FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Los Angeles' AND T2.NumTstTakr BETWEEN 2000 AND 3000": {"evaluation": "pass: correct", "result": "www.avdistrict.org\nwww.hartdistrict.org\nwww.lbschools.net", "result_hash": "cd3ea56eeb055c150a66f13d4d4a5aa6", "num_rows": 3}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT CAST(SUM(T2.NumTstTakr) AS REAL) / COUNT(*), T1.cname FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' AND T1.City='Fresno' AND SUBSTR(T1.OpenDate, 1, 4) = '1980'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.cname", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.Phone, T1.CDSCode FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.cname = 'Fresno Unified' AND T2.AvgScrRead = ( SELECT MIN(AvgScrRead) FROM satscores WHERE cname = 'Fresno Unified' )": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T4.School FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.Virtual = 'P' ORDER BY T2.AvgScrRead DESC LIMIT 5": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.School", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T4.EILName FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode INNER JOIN frpm AS T3 ON T2.CDSCode = T3.CDSCode LEFT JOIN BSDbGeo.spatial_ref_school AS T4 ON T2.CDSCode = T4.cds WHERE T1.rtype = 'D' ORDER BY T1.AvgScrMath DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such table: BSDbGeo.spatial_ref_school", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT ST1.AvgScrMath, ST1.cname \nFROM satscores AS ST1 INNER JOIN schools AS ST2 ON ST1.cds = ST2.CDSCode ORDER BY ST1.AvgScrMath + ST1.AvgScrRead + ST1.AvgScrWrite ASC LIMIT 1": {"evaluation": "pass: incorrect", "result": "None\tFresno", "result_hash": "c035896928a2cde668955eed2f196dc0", "num_rows": 1}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT CAST(SUM(T2.AvgScrWrite) AS REAL) / COUNT(T1.CDSCode), T1.City FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrWrite >= 1500 GROUP BY T1.CDSCode ORDER BY COUNT(T1.AvgScrWrite) DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.CDSCode", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT S.NESSchool, AVG(T.AvgScrWrite) FROM schools AS S INNER JOIN satscores AS T ON S.CDSCode = T.cds WHERE T.sname LIKE '%%Ulrich%' GROUP BY S.NCESSchool": {"evaluation": "error: <error>", "result": "Execution error: no such column: S.NESSchool", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT Avg(name) FROM ( SELECT Max(Enroll12) + 0 AS name FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.DOC = '31' GROUP BY T2.County )": {"evaluation": "pass: incorrect", "result": "71.000", "result_hash": "8b463f30f12be68e7250888a99b374b7", "num_rows": 1}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT CAST(SUM(SUM(CASE WHEN STRFTIME('%Y', OpenDate) = '1980' THEN 1 ELSE 0 END) AS REAL) / 12 AS monthly_avg FROM schools WHERE County = 'Alameda' AND DOC = 52": {"evaluation": "error: <error>", "result": "Execution error: near \"AS\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T1.DOC = 54 THEN 1 ELSE 0 END) AS REAL) / COUNT(CASE WHEN T1.StatusType = 'Merged' THEN T1.District END) AS Ratio FROM schools AS T1 INNER JOIN satscores AS T2 ON T2.cds = T1.CDSCode WHERE T1.County = 'Santa Ana'": {"evaluation": "pass: incorrect", "result": "None", "result_hash": "378dd0ad02a5c6549ef615f96ac265eb", "num_rows": 1}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.County, T1.City, T1.StatusType, T1.ClosedDate FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.ClosedDate IS NOT NULL GROUP BY T1.County ORDER BY COUNT(T1.CDSCode) DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "Los Angeles\tLos Angeles\tClosed\t2015-06-30", "result_hash": "0f60f80d2d0adcca0d4a49538ac7fa4d", "num_rows": 1}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.MailStreet FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.rtype = 'D' AND T2.AvgScrMath IN ( SELECT T2.AvgScrMath FROM satscores AS T2 ORDER BY T2.AvgScrMath DESC LIMIT 7, 1 )": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.MailStreet FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrRead ASC LIMIT 1": {"evaluation": "pass: incorrect", "result": "1111 Van Ness Avenue", "result_hash": "a2552189962cb6df84dd6d827177716a", "num_rows": 1}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT COUNT(*) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.MailCity = 'Lakeport' AND T2.AvgScrRead + T2.AvgScrMath + T2.AvgScrWrite >= 1500": {"evaluation": "pass: correct", "result": "2", "result_hash": "7c93d02a40ebc670ae8becd4afb910e0", "num_rows": 1}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT SUM(T2.NumTstTakr) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.MailCity = 'Fresno'": {"evaluation": "pass: incorrect", "result": "6070", "result_hash": "a548f4d528456996dd16aa7181e37149", "num_rows": 1}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.MailZip FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.AdmlName2 = 'Atoian'": {"evaluation": "pass: incorrect", "result": "93637", "result_hash": "60b9c0f5439811042ef0fb674ff8b4b9", "num_rows": 1}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT (COUNT(CASE WHEN T1.County = 'Colusa' THEN 1 END) * 100) / (COUNT(CASE WHEN T1.County = 'Humboldt' THEN 1 END)) FROM schools AS T1 WHERE T1.MailState = 'CA'": {"evaluation": "pass: incorrect", "result": "18", "result_hash": "6c0ca1c11f193c6ba9ef0daa1c494f1e", "num_rows": 1}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT COUNT(CDSCode) FROM schools WHERE MailState = 'CA' AND City = 'San Joaquin' AND StatusType = 'Active'": {"evaluation": "pass: correct", "result": "2", "result_hash": "7c93d02a40ebc670ae8becd4afb910e0", "num_rows": 1}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.Phone, T1.Ext FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrWrite DESC LIMIT 1 OFFSET 332": {"evaluation": "pass: correct", "result": "(916) 395-5050\tNone", "result_hash": "1c44faffa0466765b0a248859144226c", "num_rows": 1}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.Phone, T1.Ext, T1.School FROM schools AS T1 WHERE T1.Zip = '95203-3704'": {"evaluation": "pass: correct", "result": "(209) 933-7470\t2222\tSpanos (Alex G.) Elementary", "result_hash": "247637e57461086dc84701f5386f6eb7", "num_rows": 1}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.Website FROM schools AS T1 INNER JOIN (\n    SELECT DISTINCT AdmLName1 FROM schools WHERE AdmFName1 = 'Mike' AND AdmLName1 = 'Larson'\n    UNION \n    SELECT DISTINCT AdmLName1 FROM schools WHERE AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez'\n) AS T2 ON T1.Overview = T2.Overview": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.Overview", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.Website FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.Virtual = 'P' AND T1.District = 'San Joaquin Unified' AND T2.ChartSchool (Y/N) = 1": {"evaluation": "error: <error>", "result": "Execution error: near \"(\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.City = 'Hickman' AND T1.DOC = '52' AND T2.Charter = 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.Charter", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode  WHERE T1.Charter = 0 AND T1.County = 'Los Angeles' AND T2.Percent (%) Eligible Free (K-12) < 0.18": {"evaluation": "error: <error>", "result": "Execution error: near \"(\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.School, T1.City, T1.AdminFName1, T1.AdminLName1, T1.AdminFName2, T1.AdminLName2, T1.AdminFName3, T1.AdminLName3 FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.Charter = '1' AND T2.CharterSchoolNumber = '00D2'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.AdminFName1", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.MailCity = 'Hickman' AND T2.Charter = 'D' AND T2.CharterNum = '00D4'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.Charter", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT 100 * COUNT(DISTINCT T1.CDSCode) / ( SELECT COUNT(DISTINCT CDSCode) FROM frpm WHERE County Name = 'Santa Clara' AND Charter Funding Type = 'Local District Funding' ) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County Name = 'Santa Clara' AND T1.Charter Funding Type IN ('Local District Funding', 'State and Local District Funding', 'State', 'Local District and State')": {"evaluation": "error: <error>", "result": "Execution error: near \"Name\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.OpenDate BETWEEN '2000-01-01' AND '2005-12-31' AND T2.County Code = '027' AND T2.Charter Funding Type = 'Directly funded'": {"evaluation": "error: <error>", "result": "Execution error: near \"Code\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT COUNT(T2.NCESDist) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.City = 'San Francisco' AND T1.StatusType = 'Closed' AND T2.rtype = 'S'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.NCESDist", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.County FROM schools AS T1 INNER JOIN (SELECT County, StatusType FROM schools WHERE MONTH(ClosedDate) BETWEEN 1980 AND 1989) AS T2 ON T1.County = T2.County WHERE T2.StatusType = 'Closed' GROUP BY T1.County ORDER BY COUNT(T1.County) DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such function: MONTH", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.DOC FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.SOC = '31'": {"evaluation": "pass: incorrect", "result": "31", "result_hash": "d04db6209de1c73a2c97f4fae24b6042", "num_rows": 1}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Alpine' AND T1.StatusType IN ('Active','Closed') AND T2.sname LIKE '%Community Day Schools%'": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.District \nFROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode \nWHERE T1.City = 'Fresno' AND T1.Magnet = 0": {"evaluation": "pass: incorrect", "result": "Central Unified\nClovis Unified\nFowler Unified\nFresno County Office of Education\nFresno Unified\nMonroe Elementary\nOrange Center\nPacific Union Elementary\nRaisin City Elementary\nSanger Unified\nWashington Colony Elementary\nWashington Unified\nWest Park Elementary\nWestside Elementary", "result_hash": "99a6d8527db90affb8a95854fe861792", "num_rows": 14}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT SUM(T2.Enrollment (Ages 5-17)) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County Name = 'Alameda' AND T1.School = 'Fremont' AND T2.Academic Year = '2014-2015'": {"evaluation": "error: <error>", "result": "Execution error: near \"(\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT SUM(FreeMealCount AS 'Free Meal Count (Ages 5-17)') FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.SchoolName = 'Youth Authority School' AND T2.MailStrAbr = 'PO Box 1040'": {"evaluation": "error: <error>", "result": "Execution error: near \"AS\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT LowGrade FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.District Code = 0613360 AND T1. EdOpsCode = 'SPECON'": {"evaluation": "error: <error>", "result": "Execution error: near \"Code\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T3.School, T3.EILName FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode INNER JOIN satscores AS T3 ON T2.CDSCode = T3.cds WHERE T1.County Code = '37' AND T1.NSLP Provision Status = 'Breakfast Provision 2'": {"evaluation": "error: <error>", "result": "Execution error: near \"Code\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.City FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.NSLP_Provision_Status LIKE 'Breakfast Provision 2' AND T1.EILCode = 'HS' AND T2.County_Name = 'Merced'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.NSLP_Provision_Status", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.School, ROUND((T4.FRPM Count (Ages 5-17) * 100 / T4.Enrollment (Ages 5-17)) / 1.0,2) AS Percent FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.EILName = 'Elementary' AND T1.GSserved = 'K-9' AND T1.County = 'Los Angeles'": {"evaluation": "error: <error>", "result": "Execution error: near \"Count\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.GSserved FROM schools T1 INNER JOIN districts T2 ON T1.NCESDist = T2.dist_id WHERE T2.city_text = 'Adelanto' GROUP BY T1.GSserved ORDER BY COUNT(T1.CDSCode) DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such table: districts", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT COUNT(T1.CDSCode), T2.County FROM schools AS T1 INNER JOIN ( SELECT County, COUNT(CASE WHEN Virtual = 'F' THEN CDSCode END) AS Count FROM schools GROUP BY County ) AS T2 ON T1.County = T2.County WHERE T1.County IN ('San Diego', 'Santa Barbara')": {"evaluation": "pass: incorrect", "result": "1391\tSan Diego", "result_hash": "1c3042d9211df90783a1e72731f5286c", "num_rows": 1}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.School, T1.Latitude FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T1.Latitude DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "Leggett Valley High\t44.219", "result_hash": "29e26d86f0b8d2f396ba93374eb8d21f", "num_rows": 1}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.City, T1.GSoffered FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.State = 'CA' AND T1.Latitude = ( SELECT MIN(Latitude) FROM schools WHERE State = 'CA' )": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.GSoffered FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY ABS(T1.Longitude) DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "None", "result_hash": "378dd0ad02a5c6549ef615f96ac265eb", "num_rows": 1}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.Count AS Number_of_schools, T1.City AS City FROM ( SELECT T3.Count, T4.City FROM ( SELECT COUNT(CASE WHEN T2.GSoffered = 'K-8' THEN 1 ELSE NULL END) AS Count, T1.City FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds GROUP BY T1.City ) AS T3 INNER JOIN schools AS T4 ON T3.City = T4.City WHERE T4.Magnet = 1 ) AS T5 WHERE T5.Count > 0": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.GSoffered", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.AdmlName1, COUNT(T1.AdmlName1) AS frequency, T4.EducationalDistrict FROM schools AS T1 INNER JOIN frpm AS T4 ON T1.County = T4.NSLPProvStatus1 AND T1.NCESSchCode = T4.SchoolName AND T1.District = T4.NSLPProvStatus4 INNER JOIN ( SELECT DISTINCT AdmFName2 FROM schools ORDER BY COUNT(AdmFName2) DESC LIMIT 1 OFFSET 0 ) AS T2 ON T1.Rename AS T5 ON T2.Tmiddle_tensor_matching Admlenma =>adminfullna.Inner join schools as T3 On T5.admmmest=FadmLnamerasrename ADDING ON T1.District = T4.NSLPProvStatus4 GROUP BY T1.AdmlName1 ORDER BY frequency DESC LIMIT 2": {"evaluation": "error: <error>", "result": "Execution error: near \"AS\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT CAST(f1.FreeMealCount AS REAL) * 100 / f1.Enrollment AS PER, f1.DistrictCode FROM schools AS s INNER JOIN frpm AS f1 ON s.CDSCode = f1.CDSCode WHERE s.AdminLName1 = 'Drico'": {"evaluation": "error: <error>", "result": "Execution error: no such column: f1.FreeMealCount", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.District, T1.County, T1.School, T3.AdmLName1 FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds INNER JOIN frpm AS T3 ON T1.CDSCode = T3.CDSCode WHERE T3.CharterSchoolNumber = '40'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.AdmLName1", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.AdvEmail1, T1.AdvEmail3 FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode AND T1.SOC = '62' WHERE T1.DOC = '54' AND T1.County = 'San Bernardino' AND T2.School Type = 'K-12 Schools (Public)' AND CAST(strftime('%Y', T1.OpenDate) AS INTEGER) BETWEEN 2009 AND 2010": {"evaluation": "error: <error>", "result": "Execution error: near \"Type\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/california_schools/california_schools.sqlite<$$|||$$>SELECT T1.AdvEmail1, T1.School FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.NumGE1500 = ( SELECT MAX(NumGE1500) FROM satscores )": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.AdvEmail1", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(*) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east bohemia' AND T1.frequency = 'POPLATEK PO OBRATU'": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(*) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 LIKE 'Prague' AND T1.account_id IN (SELECT account_id FROM loan WHERE status IN('A','B'))": {"evaluation": "pass: incorrect", "result": "37", "result_hash": "08bf132b722854b0250976979d07018c", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT CASE WHEN A12+((NOW() >= '1996-01-01' AND NOW() < '1997-01-01') * (A13 - A12)) > A13+((NOW() >= '1995-01-01' AND NOW() < '1996-01-01') * (A13 - A12)) THEN A13 ELSE A12 END AS ratio FROM district": {"evaluation": "error: <error>", "result": "Execution error: no such function: NOW", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(T1.district_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN client AS T3 ON T3.district_id = T2.district_id WHERE T3.gender = 'F' AND T1.A11 > 6000 AND T1.A11 < 10000": {"evaluation": "pass: incorrect", "result": "107440", "result_hash": "652a593a04a7f69d97af7ef045b4a658", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'north Bohemia' AND T1.gender = 'M' AND T2.A11 > 8000": {"evaluation": "pass: correct", "result": "280", "result_hash": "e020a271def72eae6eb4f4142424ef47", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT \n  ac.account_id, \n  ABS(ac.A11 - (SELECT MIN(A11) FROM district)) AS gap\nFROM \n  client AS cl\nJOIN district AS d ON cl.district_id = d.district_id\nJOIN account AS ac ON d.district_id = ac.district_id\nWHERE \n  cl.gender = 'F'\nORDER BY ac.A11 DESC, cl.birth_date LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: ac.A11", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T2.account_id FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.birth_date = ( SELECT T1.birth_date FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id ORDER BY T1.birth_date LIMIT 1 ) AND T1.A11 = ( SELECT MAX(T1.A11) FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id )": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.A11", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(T1.disp_id) FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T3.gender = 'M' AND T2.frequency = 'POPLATEK TYDNE' AND T1.type = 'OWNER'": {"evaluation": "pass: incorrect", "result": "130", "result_hash": "b09c7411c30c8a1b35bb9e7951737108", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T1.client_id FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T1.account_id = T3.account_id WHERE T1.type = 'DISPONENT' AND T3.frequency = 'POPLATEK PO OBRATU'": {"evaluation": "pass: correct", "result": "11979\n1261\n159\n1706\n2304\n3526\n3609\n384\n4035\n4133\n4334\n4625\n5580\n6318", "result_hash": "381151e22984cffb9d383c57f6362a25", "num_rows": 14}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' ORDER BY T1.amount ASC LIMIT 1 WHERE T2.frequency = 'POPLATEK TYDNE'": {"evaluation": "error: <error>", "result": "Execution error: near \"WHERE\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T2.account_id, T2.date FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount > 25000 AND STRFTIME('%Y', T2.date) = '1993' AND T1.duration > 12 ORDER BY T1.amount DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "10451\t1993-08-29", "result_hash": "ee36659122283d5bc6f978d2ab1a151f", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T2.gender = 'F' AND T2.birth_date < '1950-01-01' AND T3.A2 = 'Sokolov'": {"evaluation": "pass: incorrect", "result": "304", "result_hash": "c0f3b06b418bbbeaa67b2a30577a9c02", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T1.account_id FROM account AS T1 INNER JOIN order AS T2 ON T1.account_id = T2.account_id WHERE substr(T2.bank_to, 1, 1) = ? AND T1.date LIKE '1995%' ORDER BY T1.date LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: near \"order\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT DISTINCT T1.district_id, T2.account_id, T3.district AS A2, T3.A8 FROM account AS T1 INNER JOIN district AS T3 ON T1.district_id = T3.district_id INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.date < '1997-01-01' AND T2.type = 'OWNER' AND T3.A4 > 3000": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.district", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T1.client_id FROM client AS T1 INNER JOIN card AS T2 ON T1.client_id = T2.disp_id WHERE SUBSTR(T2.issued, 1, 4) = '1994' AND SUBSTR(T2.issued, 6, 2) = '03' AND SUBSTR(T2.issued, 9, 2) = '03'": {"evaluation": "pass: correct", "result": "2429", "result_hash": "5b289434391c95ff7cb06d25ef7f3b0d", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT date FROM account WHERE account_id IN (SELECT account_id FROM trans WHERE bank = 'AB' AND date = '1998-10-14' AND amount = 840*100)": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T3.district_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T1.date = '1994-08-25'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.district_id", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT MAX(T7.amount) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id INNER JOIN client AS T4 ON T2.client_id = T4.client_id INNER JOIN account AS T5 ON T2.account_id = T5.account_id INNER JOIN order AS T6 ON T5.account_id = T6.account_id INNER JOIN trans AS T7 ON T6.account_id = T7.account_id WHERE T4.birth_date < '1996-10-21'": {"evaluation": "error: <error>", "result": "Execution error: near \"order\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T5.gender FROM account AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN district AS T3 ON T3.district_id = T1.district_id INNER JOIN disp AS T4 ON T2.client_id = T4.client_id INNER JOIN account AS T5 ON T4.account_id = T5.account_id WHERE T3.A11 = ( SELECT MAX(A11) FROM district ) ORDER BY T2.birth_date ASC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T5.gender", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T1.amount FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id INNER JOIN loan AS T4 ON T2.account_id = T4.account_id WHERE (T4.amount = ( SELECT MAX(T4.amount) FROM loan AS T4)) AND T3.district_id = ( SELECT T2.district_id FROM account AS T2 INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T2.account_id = ( SELECT MAX(T2.account_id) FROM account AS T2 INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE client_id = ( SELECT client_id FROM loan AS T4 ORDER BY T4.amount DESC LIMIT 1 ) ) ) )": {"evaluation": "error: <error>", "result": "Execution error: near \")\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Hl.m. Jesenik' AND T1.gender = 'F'": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T1.disp_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount = 5100 AND T2.date = '1998-09-02'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.disp_id", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 LIKE '%Litomerice' AND STRFTIME('%Y', T1.date) = '1996'": {"evaluation": "pass: correct", "result": "9", "result_hash": "e2ca9b4a69bde08ad25f198b51916859", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T1.A2 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND T2.birth_date = '1976-01-29'": {"evaluation": "pass: correct", "result": "Tachov", "result_hash": "2d59c2f745c252b657faf3dc2388a434", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T1.birth_date FROM client AS T1 INNER JOIN loan AS T2 ON T1.client_id = T2.account_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T2.amount = 98832 AND T3.date = '1996-01-03'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T1.account_id FROM account AS T1 INNER JOIN client AS T2 ON T1.account_id = (SELECT account_id FROM disp AS T3 INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T4.district_id = (SELECT district_id FROM district WHERE A3 = 'Prague' LIMIT 1) LIMIT 1) WHERE T2.birth_date = (SELECT birth_date FROM client ORDER BY birth_date ASC LIMIT 1)": {"evaluation": "pass: incorrect", "result": "2", "result_hash": "7c93d02a40ebc670ae8becd4afb910e0", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T2.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' AND T2.A4 = (SELECT MAX(A4) FROM district)": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.gender", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>WITH approved_loan AS (\n  SELECT client_id \n  FROM loan \n  WHERE STRFTIME('%Y-%m-%d', date) = '1993-07-05'\n  ORDER BY date\n  LIMIT 1\n),\n account_balances AS (\n  SELECT \n    account_id, \n    date, \n    balance, \n    LAG(balance) OVER (PARTITION BY account_id ORDER BY date) AS prev_balance\n  FROM trans\n  WHERE STRFTIME('%Y-%m-%d', date) BETWEEN '1993-03-22' AND '1998-12-27'\n)\nSELECT COALESCE(((balance - prev_balance) / prev_balance) * 100, 0) AS increase_rate\nFROM account_balances\nWHERE account_id IN (SELECT client_id FROM approved_loan)": {"evaluation": "error: <error>", "result": "Execution error: no such column: client_id", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT CAST(SUM(T4.amount) AS REAL) * 100 / ( SELECT SUM(amount) FROM loan ) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK PO OBRATU' AND T1.status IN ('A')": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.amount", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T2.status = 'A' AND T3.amount < 100000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T3.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id": {"evaluation": "pass: incorrect", "result": "11615.836", "result_hash": "30803e1cc4b56610a7b0bee5a16ac8f0", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T2.account_id, T3.A2, T3.A3 FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.client_id = T3.district_id WHERE T1.date LIKE '1993-%' AND T1.frequency = 'POPLATEK PO OBRATU'": {"evaluation": "pass: incorrect", "result": "66\tVsetin\tnorth Moravia", "result_hash": "d9f8811489e03ed14ac71c327df14b45", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE SUBSTR(T2.A3, 1, 11) = 'east Boh' AND T4.birth_date Between '1995-01-01' AND '2000-12-31' GROUP BY T3.client_id": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'": {"evaluation": "pass: correct", "result": "1024\t1997-05-02\n1040\t1996-05-18\n10710\t1995-10-30\n1176\t1996-10-24\n1236\t1993-05-05\n1375\t1994-04-27\n1407\t1997-04-11\n1470\t1994-02-10\n1622\t1996-04-12\n1635\t1993-12-29\n1862\t1995-04-15\n1975\t1994-09-07\n2025\t1994-10-02\n2027\t1994-11-28\n221\t1996-10-30\n2218\t1994-11-21\n2327\t1993-06-08\n2357\t1993-01-04\n2440\t1997-12-18\n252\t1996-12-26\n2594\t1997-05-03\n2608\t1995-08-09\n265\t1996-07-05\n2762\t1993-03-20\n2857\t1997-04-28\n2875\t1996-12-24\n2888\t1996-05-23\n2895\t1993-03-09\n2960\t1994-09-20\n2982\t1996-06-04\n2991\t1993-05-22\n3015\t1996-06-15\n3169\t1997-12-19\n3290\t1996-12-09\n3411\t1996-12-17\n3582\t1995-08-26\n3614\t1996-08-07\n3775\t1993-06-27\n38\t1997-08-08\n3986\t1997-06-20\n3989\t1995-03-11\n449\t1994-11-22\n5602\t1996-07-10\n587\t1996-06-21\n6075\t1996-09-15\n709\t1994-07-25\n7437\t1997-08-08\n7733\t1996-07-08\n7815\t1995-04-09\n803\t1995-09-09\n825\t1996-03-06\n8489\t1993-09-18\n9528\t1996-11-07\n969\t1994-01-08\n989\t1994-03-14", "result_hash": "3df549c30ab363d269bfb512e304b1c2", "num_rows": 55}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T1.A2 ,  T1.A3 FROM district AS T1 INNER JOIN loan AS T2 ON T1.district_id = account.district_id INNER JOIN account AS T3 ON T3.account_id = T2.account_id WHERE T3.account_id = 26": {"evaluation": "error: <error>", "result": "Execution error: no such column: account.district_id", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T1.account_id, T2.A2, T2.A3 FROM district AS T2 INNER JOIN account AS T1 ON T2.district_id = T1.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.amount > 300000": {"evaluation": "pass: correct", "result": "10065\tSumperk\tnorth Moravia\n10202\tKarvina\tnorth Moravia\n10280\tJesenik\tnorth Moravia\n10297\tCeske Budejovice\tsouth Bohemia\n10451\tHl.m. Praha\tPrague\n105\tTabor\tsouth Bohemia\n10520\tBrno - venkov\tsouth Moravia\n10774\tNachod\teast Bohemia\n10857\tSvitavy\teast Bohemia\n1093\tBrno - mesto\tsouth Moravia\n10942\tChrudim\teast Bohemia\n11186\tPribram\tcentral Bohemia\n11317\tSvitavy\teast Bohemia\n11349\tHl.m. Praha\tPrague\n1374\tBlansko\tsouth Moravia\n1583\tJesenik\tnorth Moravia\n1808\tPlzen - sever\twest Bohemia\n1862\tPrachatice\tsouth Bohemia\n2245\tRokycany\twest Bohemia\n2246\tHl.m. Praha\tPrague\n2279\tBenesov\tcentral Bohemia\n2335\tKarvina\tnorth Moravia\n2516\tKutna Hora\tcentral Bohemia\n2545\tHl.m. Praha\tPrague\n2572\tZlin\tsouth Moravia\n2754\tHodonin\tsouth Moravia\n2910\tFrydek - Mistek\tnorth Moravia\n2912\tOstrava - mesto\tnorth Moravia\n2936\tBeroun\tcentral Bohemia\n3005\tHavlickuv Brod\teast Bohemia\n3115\tCeske Budejovice\tsouth Bohemia\n319\tPardubice\teast Bohemia\n330\tHavlickuv Brod\teast Bohemia\n339\tNachod\teast Bohemia\n3678\tHl.m. Praha\tPrague\n3679\tZlin\tsouth Moravia\n37\tStrakonice\tsouth Bohemia\n3711\tBeroun\tcentral Bohemia\n3859\tBlansko\tsouth Moravia\n3906\tUsti nad Orlici\teast Bohemia\n4190\tUherske Hradiste\tsouth Moravia\n4354\tLouny\tnorth Bohemia\n442\tBrno - mesto\tsouth Moravia\n4456\tCeske Budejovice\tsouth Bohemia\n4576\tPlzen - jih\twest Bohemia\n4650\tKladno\tcentral Bohemia\n4774\tZdar nad Sazavou\tsouth Moravia\n4794\tOlomouc\tnorth Moravia\n4858\tBruntal\tnorth Moravia\n4948\tHradec Kralove\teast Bohemia\n5072\tKutna Hora\tcentral Bohemia\n5120\tHl.m. Praha\tPrague\n5181\tPrerov\tnorth Moravia\n5213\tHl.m. Praha\tPrague\n5313\tTeplice\tnorth Bohemia\n5422\tZdar nad Sazavou\tsouth Moravia\n5477\tHodonin\tsouth Moravia\n6034\tKutna Hora\tcentral Bohemia\n6062\tKarlovy Vary\twest Bohemia\n6075\tPrachatice\tsouth Bohemia\n6083\tKutna Hora\tcentral Bohemia\n6226\tOstrava - mesto\tnorth Moravia\n6592\tHl.m. Praha\tPrague\n6950\tLiberec\tnorth Bohemia\n7049\tJesenik\tnorth Moravia\n7542\tBrno - mesto\tsouth Moravia\n7562\tOlomouc\tnorth Moravia\n7614\tUherske Hradiste\tsouth Moravia\n7637\tNachod\teast Bohemia\n7795\tZlin\tsouth Moravia\n7966\tBrno - mesto\tsouth Moravia\n817\tKolin\tcentral Bohemia\n8320\tTrutnov\teast Bohemia\n8377\tRokycany\twest Bohemia\n8381\tCeske Budejovice\tsouth Bohemia\n8926\tHl.m. Praha\tPrague\n9037\tHl.m. Praha\tPrague\n915\tOlomouc\tnorth Moravia\n9455\tOpava\tnorth Moravia\n9504\tNymburk\tcentral Bohemia\n9859\tPlzen - jih\twest Bohemia\n9869\tPribram\tcentral Bohemia", "result_hash": "bf97ba1d2c492fd4cb92d0465f560d07", "num_rows": 82}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T3.loan_id, T3.A2, T1.A11 FROM district AS T1 INNER JOIN loan AS T2 ON 1 = 1 INNER JOIN disp AS T3 ON 1 = 1 WHERE T2.duration = 60": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.loan_id", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T2.A3, CAST((T2.A13 - T2.A12) AS REAL) * 100 AS unemployment_increment_rate_case FROM district AS T2 INNER JOIN account AS T1 ON T2.district_id = T1.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.status = 'D' AND T1.date BETWEEN date('1995-01-01') AND date('1996-12-31')": {"evaluation": "pass: incorrect", "result": "Prague\t23.000\ncentral Bohemia\t112.000\ncentral Bohemia\t24.000\ncentral Bohemia\t31.000\ncentral Bohemia\t45.000\neast Bohemia\t106.000\neast Bohemia\t65.000\neast Bohemia\t80.000\neast Bohemia\t99.000\nnorth Moravia\t115.000\nnorth Moravia\t44.000\nnorth Moravia\t85.000\nnorth Moravia\t99.000\nnorth Moravia\tNone\nsouth Bohemia\t31.000\nsouth Bohemia\t88.000\nsouth Moravia\t106.000\nsouth Moravia\t27.000\nsouth Moravia\t36.000\nsouth Moravia\t71.000\nwest Bohemia\t15.000\nwest Bohemia\t49.000\nwest Bohemia\t80.000", "result_hash": "ea91588ca6aabf87549212bf614e8172", "num_rows": 23}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T2.A2 = 'Decin' THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(T3.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE SimpleDateFormat(T2.`date`, 'yyyy') = '1993'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.A2", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE'": {"evaluation": "pass: correct", "result": "1\n1000\n10018\n10022\n1004\n10065\n10079\n1010\n1012\n10134\n1015\n1017\n102\n1021\n1023\n10243\n10266\n10280\n103\n1032\n1034\n1035\n10361\n1037\n1040\n1043\n1044\n1045\n1047\n10493\n1052\n1055\n1057\n106\n1061\n1063\n10644\n10650\n10663\n10679\n107\n10711\n1073\n1076\n10774\n1079\n1080\n10812\n1085\n1087\n1089\n10904\n1091\n1094\n10954\n1097\n110\n1102\n1104\n11053\n1107\n1109\n1111\n11123\n1115\n1118\n1120\n1123\n11244\n1127\n1129\n1130\n11325\n1133\n1135\n11362\n11382\n1141\n1145\n1149\n1151\n1155\n1158\n1161\n1166\n1170\n1173\n1177\n118\n1182\n1185\n1188\n1190\n1194\n1197\n12\n1203\n1206\n1209\n1211\n1214\n1217\n122\n1222\n1226\n1229\n1231\n1234\n1237\n124\n1243\n1246\n1249\n1254\n1257\n126\n1262\n1266\n1269\n1273\n1277\n1280\n1285\n1289\n1292\n1295\n1298\n130\n1303\n1306\n1309\n1311\n1314\n1317\n1321\n1324\n1327\n1330\n1333\n1336\n1339\n1341\n1346\n1349\n1352\n1355\n1358\n1360\n1363\n1367\n137\n1372\n1375\n1378\n1380\n1383\n1388\n1391\n1394\n1397\n14\n1402\n1406\n1410\n1413\n1418\n1420\n1423\n1426\n143\n1432\n1436\n1440\n1443\n1446\n1449\n1451\n1455\n1459\n1461\n1465\n1469\n1472\n1476\n1479\n1482\n1485\n1488\n1491\n1494\n1497\n150\n1502\n1505\n1508\n1510\n1514\n1517\n152\n1522\n1526\n153\n1534\n1538\n1541\n1544\n1547\n155\n1552\n1555\n1558\n1560\n1563\n1566\n157\n1572\n1575\n1579\n1581\n1585\n1588\n1590\n1593\n1597\n16\n1601\n1604\n1607\n161\n1612\n1615\n1618\n1620\n1623\n1626\n1629\n1631\n1635\n164\n1642\n1647\n165\n1652\n1655\n1658\n1660\n1664\n1667\n1670\n1673\n1677\n168\n1682\n1686\n1689\n1691\n1696\n1699\n1700\n1703\n1706\n1709\n1711\n1714\n1717\n172\n1722\n1726\n1729\n1731\n1734\n1737\n174\n1742\n1745\n1749\n1752\n1756\n1759\n1762\n1765\n1768\n1770\n1774\n1777\n178\n1782\n1785\n1789\n1792\n1795\n1798\n1801\n1805\n1808\n1811\n1814\n1817\n1820\n1823\n1826\n1829\n1831\n1834\n1837\n184\n1843\n1846\n185\n1853\n1856\n1859\n1863\n1867\n1870\n1874\n1877\n1880\n1884\n1887\n189\n1893\n1896\n19\n1901\n1905\n1908\n1910\n1913\n1916\n1919\n1921\n1925\n1928\n1930\n1933\n1936\n194\n1943\n1946\n1949\n1951\n1955\n1958\n1960\n1963\n1969\n1971\n1974\n1977\n1980\n1983\n1986\n1989\n1991\n1994\n1998\n20\n2001\n2004\n2007\n201\n2012\n2016\n2019\n2022\n2025\n2029\n2033\n2036\n2039\n2041\n2044\n2047\n205\n2053\n2056\n2059\n2061\n2064\n2067\n207\n2072\n2075\n2078\n2080\n2083\n2088\n2091\n2094\n2097\n2101\n2104\n2107\n211\n2113\n2116\n2119\n2123\n2127\n2130\n2133\n2136\n214\n2142\n2147\n215\n2152\n2156\n2159\n2162\n2165\n2169\n2173\n2176\n218\n2183\n2186\n2191\n2194\n2197\n220\n2203\n2206\n2209\n2212\n2215\n2218\n2220\n2223\n2228\n2230\n2233\n2236\n224\n2243\n2246\n2250\n2254\n2257\n226\n2263\n2266\n227\n2272\n2276\n2280\n2286\n2289\n2291\n2294\n2297\n23\n2301\n2304\n2307\n2310\n2314\n2317\n232\n2323\n2326\n2329\n2332\n2335\n2338\n2340\n2343\n2346\n2349\n2351\n2354\n2358\n2360\n2363\n2366\n237\n2373\n2376\n2379\n2381\n2384\n2387\n2390\n2393\n2396\n2399\n2400\n2403\n2406\n2409\n2411\n2415\n2418\n2420\n2423\n2428\n2431\n2434\n2437\n244\n2442\n2445\n2448\n2450\n2453\n2456\n246\n2463\n2467\n2470\n2473\n2476\n248\n2482\n2485\n2488\n2490\n2493\n2496\n2499\n2500\n2503\n2507\n251\n2513\n2516\n2520\n2523\n2526\n253\n2532\n2535\n2538\n2541\n2544\n2547\n255\n2552\n2555\n2558\n2560\n2563\n2566\n2569\n2571\n2575\n2578\n2580\n2583\n2586\n2589\n2591\n2595\n2598\n260\n2602\n2605\n2608\n2610\n2613\n2616\n2619\n2621\n2624\n2630\n2633\n2636\n2639\n2641\n2645\n2648\n2650\n2653\n2656\n2659\n2662\n2665\n2668\n2671\n2674\n2677\n268\n2684\n2687\n269\n2692\n2695\n2698\n270\n2702\n2707\n271\n2712\n2715\n2718\n2721\n2724\n2727\n2731\n2734\n2738\n2740\n2743\n2747\n2750\n2753\n2757\n276\n2762\n2765\n2768\n2772\n2775\n2778\n2780\n2783\n2788\n2790\n2793\n2797\n2800\n2803\n2806\n2809\n2811\n2814\n2818\n2820\n2824\n2827\n2830\n2833\n2836\n284\n2842\n2845\n2849\n2851\n2854\n2857\n286\n2863\n2866\n2869\n2871\n2874\n2877\n288\n2882\n2885\n2888\n2890\n2893\n2896\n2899\n2900\n2903\n2906\n2909\n2911\n2914\n2917\n2920\n2923\n2926\n2929\n2931\n2934\n2937\n294\n2944\n2947\n2950\n2953\n2956\n2959\n2961\n2964\n2967\n297\n2973\n2977\n298\n2982\n2986\n299\n2992\n2996\n2999\n300\n3003\n3007\n301\n3012\n3016\n3019\n3021\n3024\n3027\n303\n3032\n3037\n304\n3042\n3045\n3049\n3051\n3055\n3058\n3060\n3063\n3067\n307\n3072\n3077\n308\n3083\n3087\n3090\n3093\n3097\n31\n3102\n3107\n311\n3112\n3115\n3118\n3120\n3124\n3127\n313\n3132\n3135\n3138\n3142\n3145\n3148\n3151\n3154\n3158\n3161\n3166\n3169\n3171\n3174\n3177\n318\n3182\n3185\n3188\n3191\n3194\n3197\n320\n3203\n3206\n321\n3212\n3216\n322\n3222\n3225\n3228\n3230\n3233\n3236\n3239\n3242\n3245\n3248\n3250\n3254\n3258\n3260\n3263\n3267\n327\n3272\n3275\n3278\n3281\n3284\n3287\n329\n3292\n3296\n33\n3301\n3304\n3307\n331\n3312\n3316\n3319\n3321\n3325\n3328\n3330\n3333\n3336\n334\n3344\n3347\n335\n3352\n3355\n3359\n3361\n3365\n3368\n3370\n3373\n3376\n3379\n3381\n3385\n3391\n3394\n3397\n340\n3405\n3408\n3410\n3413\n3419\n3422\n3425\n3429\n3431\n3434\n3437\n344\n3443\n345\n3452\n3455\n3458\n3460\n3463\n3466\n3469\n3471\n3476\n3479\n3482\n3485\n3489\n3491\n3494\n3497\n35\n3502\n3505\n3508\n3510\n3513\n3517\n352\n3522\n3525\n3528\n3530\n3533\n3536\n3539\n3541\n3544\n3547\n3550\n3553\n3556\n3559\n3561\n3564\n3567\n357\n3572\n3575\n3578\n3580\n3583\n3586\n3589\n3592\n3595\n3599\n3600\n3603\n3606\n3610\n3614\n3617\n3620\n3623\n3628\n3631\n3635\n3639\n3641\n3645\n3649\n3651\n3654\n3657\n366\n3662\n3665\n3669\n3671\n3674\n3677\n368\n3682\n3686\n3689\n3693\n3696\n3699\n3700\n3703\n3706\n371\n3712\n3717\n372\n3722\n3725\n3728\n3730\n3733\n3736\n3739\n3742\n3746\n3749\n3751\n3755\n3759\n3763\n3767\n377\n3772\n3775\n3778\n3780\n3784\n3787\n379\n3794\n3797\n3800\n3803\n3806\n3809\n3811\n3814\n3817\n382\n3822\n3825\n3828\n3832\n3835\n3839\n3842\n3845\n3848\n3850\n3854\n3857\n386\n3862\n3865\n3868\n3870\n3874\n3877\n3880\n3883\n3886\n3889\n3891\n3894\n3897\n39\n3902\n3906\n3909\n3911\n3914\n3917\n392\n3922\n3925\n3928\n3931\n3934\n3937\n3941\n3945\n3948\n3950\n3953\n3956\n3960\n3963\n3966\n3969\n3971\n3974\n3977\n398\n3982\n3985\n3988\n3990\n3993\n3996\n3999\n400\n4003\n401\n4026\n4034\n405\n406\n4071\n408\n4086\n4090\n4093\n410\n4105\n4116\n4121\n413\n4132\n4140\n415\n4158\n4161\n4173\n419\n42\n4208\n4225\n424\n425\n4258\n4260\n4266\n427\n428\n4287\n43\n431\n4321\n433\n4336\n4342\n4347\n4350\n4355\n436\n437\n4379\n4385\n44\n4414\n4418\n4424\n4434\n4439\n4445\n4454\n446\n4470\n4476\n4484\n45\n451\n4519\n4527\n4534\n4543\n456\n4580\n4589\n460\n4618\n463\n4650\n4660\n4681\n470\n472\n4729\n4743\n4753\n477\n4784\n48\n481\n484\n4858\n487\n4894\n4907\n493\n4948\n497\n4999\n500\n5011\n503\n505\n5065\n508\n51\n512\n5126\n514\n5164\n5180\n52\n5213\n523\n526\n5269\n5283\n53\n531\n532\n5343\n5358\n5369\n538\n54\n542\n5428\n544\n545\n5472\n5481\n55\n551\n554\n555\n5572\n5591\n560\n5622\n564\n566\n568\n5698\n5700\n5735\n575\n5767\n579\n580\n5837\n586\n5870\n589\n590\n592\n594\n5952\n598\n5991\n601\n6030\n605\n6061\n607\n609\n610\n6138\n615\n616\n62\n622\n625\n627\n6281\n63\n631\n633\n6358\n637\n6397\n641\n6434\n645\n6461\n6472\n6495\n6505\n6511\n654\n657\n6592\n6609\n6649\n6678\n669\n6706\n673\n675\n678\n680\n683\n686\n6872\n6897\n6902\n692\n6930\n6950\n698\n7\n701\n703\n7045\n706\n709\n710\n712\n714\n716\n718\n7190\n721\n725\n727\n729\n731\n735\n738\n7401\n742\n744\n745\n747\n7487\n750\n7520\n754\n755\n7565\n759\n760\n761\n763\n7637\n766\n768\n771\n773\n775\n7769\n779\n780\n782\n783\n7857\n7861\n789\n79\n791\n794\n7957\n7966\n799\n8\n801\n803\n804\n806\n809\n81\n812\n813\n8153\n8169\n819\n821\n823\n826\n8268\n829\n831\n8320\n8330\n836\n838\n840\n8411\n844\n847\n8489\n85\n851\n8523\n854\n8564\n858\n860\n863\n8645\n867\n8688\n871\n873\n8759\n8772\n8784\n880\n884\n886\n889\n891\n8926\n894\n896\n898\n8998\n900\n902\n9030\n9037\n905\n908\n91\n911\n9138\n915\n9159\n917\n9188\n9199\n9203\n922\n923\n924\n925\n9265\n929\n9307\n933\n934\n936\n938\n941\n9424\n944\n946\n949\n95\n951\n952\n954\n955\n957\n9591\n962\n9633\n9640\n9656\n9673\n969\n9703\n972\n974\n976\n979\n980\n9826\n984\n986\n988\n9897\n991\n993\n996", "result_hash": "584d85e4085bb9c37336fea0901b4b57", "num_rows": 4167}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT A9 FROM district ORDER BY (SELECT COUNT(*) FROM client WHERE gender = 'F' AND district_id = district.district_id) DESC LIMIT 9": {"evaluation": "pass: incorrect", "result": "1\n10\n4\n6\n7", "result_hash": "52468721b6d9229664f52f9cb2d1cd35", "num_rows": 5}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T1.A2, SUM(T2.amount) AS sum FROM district AS T1 INNER JOIN trans AS T2 ON T1.district_id = T2.account_id WHERE T2.date LIKE '1996-01%' AND T2.type = 'VYDAJ' GROUP BY T1.A2 ORDER BY sum DESC LIMIT 10": {"evaluation": "pass: incorrect", "result": "Cheb\t38562\nChomutov\t42902\nFrydek - Mistek\t45089\nHodonin\t38422\nHradec Kralove\t43964\nLiberec\t47404\nNovy Jicin\t38974\nNymburk\t45715\nPardubice\t59979\nZdar nad Sazavou\t46500", "result_hash": "7959351225693638ea6eddf12a82bbbf", "num_rows": 10}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(T3.account_id) \nFROM district AS T1 \nINNER JOIN account AS T2 ON T1.district_id = T2.district_id \nINNER JOIN disp AS T3 ON T2.account_id = T3.account_id \nWHERE T1.A3 = 'south Bohemia' AND T3.disp_id NOT IN (SELECT disp_id FROM card)": {"evaluation": "pass: incorrect", "result": "371", "result_hash": "e38d9f2d0e9346fec06996bb49a894b6", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T1.A3, T2.amount FROM district AS T1 INNER JOIN loan AS T2 ON T1.district_id = 'Lovely 22' AND T2.status = 'C' ORDER BY T2.amount DESC LIMIT 1": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT CAST(SUM(T4.amount) AS REAL) / COUNT(T3.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'M'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.client_id", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T1.A2, T2.branch_location, T1.A3 FROM district AS T1 INNER JOIN ( SELECT T2.A8, T2.A9, T1.A2 AS branch_location FROM district AS T1 INNER JOIN district AS T2 ON T1.A8 = T2.A8 ORDER BY T2.A13 DESC LIMIT 1 ) AS T3 ON T1.A8 = T3.A8 GROUP BY T1.A2": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.branch_location", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE T2.district_id = ( SELECT district_id FROM client INNER JOIN district ON client.district_id = district.district_id WHERE strftime('%Y', client.birth_date) = '1996' GROUP BY district.district_id ORDER BY COUNT(client.client_id) DESC LIMIT 1 ) AND T3.date BETWEEN '1996-01-01' AND '1996-12-31": {"evaluation": "error: <error>", "result": "Execution error: unrecognized token: \"'1996-12-31\"", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK MESICNE' AND T2.operation = 'VYBER KARTOU' AND T2.balance < 0": {"evaluation": "pass: correct", "result": "6", "result_hash": "31f0ca0b902eb3209468525897226c59", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(DISTINCT T4.account_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE strftime('%Y', T4.birth_date) = '1970' AND T2.psi IS NULL AND T1.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.amount >= 250000": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.account_id", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.A3 = 'Branch location 1' AND T3.status = 'C'": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'M' AND T1.A15 = ( SELECT MAX(A15) FROM district EXCEPT SELECT MAX(A15) FROM district WHERE A3 != 'south Bohemia' )": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(T3.card_id) FROM disp AS T1 INNER JOIN account AS T2 ON T2.account_id = T1.account_id INNER JOIN card AS T3 ON T3.disp_id = T1.disp_id WHERE T1.type = 'OWNER' AND T3.type = 'gold'": {"evaluation": "pass: correct", "result": "88", "result_hash": "ed4ba862d3f573839f9a406866f68ca2", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek'": {"evaluation": "pass: correct", "result": "46", "result_hash": "65eeeac3e3babe7effc1abab05a8da31", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T2.A2 FROM district AS T2 INNER JOIN account AS T1 ON T2.district_id = T1.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date) = '1997' AND T3.amount > 10000": {"evaluation": "pass: incorrect", "result": "Benesov\nBeroun\nBlansko\nBreclav\nBrno - mesto\nBrno - venkov\nBruntal\nCeska Lipa\nCeske Budejovice\nCesky Krumlov\nCheb\nChomutov\nChrudim\nDecin\nDomazlice\nFrydek - Mistek\nHavlickuv Brod\nHl.m. Praha\nHodonin\nHradec Kralove\nJablonec n. Nisou\nJesenik\nJicin\nJihlava\nJindrichuv Hradec\nKarlovy Vary\nKarvina\nKladno\nKlatovy\nKolin\nKromeriz\nKutna Hora\nLiberec\nLitomerice\nLouny\nMelnik\nMlada Boleslav\nMost\nNachod\nNovy Jicin\nNymburk\nOlomouc\nOpava\nOstrava - mesto\nPardubice\nPelhrimov\nPisek\nPlzen - jih\nPlzen - mesto\nPlzen - sever\nPrachatice\nPraha - vychod\nPraha - zapad\nPrerov\nPribram\nProstejov\nRakovnik\nRokycany\nRychnov nad Kneznou\nSemily\nSokolov\nStrakonice\nSumperk\nSvitavy\nTabor\nTachov\nTeplice\nTrebic\nTrutnov\nUherske Hradiste\nUsti nad Labem\nUsti nad Orlici\nVsetin\nVyskov\nZdar nad Sazavou\nZlin\nZnojmo", "result_hash": "567031479bb09a339f981c50af4a112f", "num_rows": 77}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T1.district_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN order AS T3 ON T2.account_id = T3.account_id WHERE T3.k_symbol = 'SIPO' AND T1.A2 = 'Pisek'": {"evaluation": "error: <error>", "result": "Execution error: near \"order\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T1.account_id FROM account AS T1 INNER JOIN card AS T2 ON T1.account_id = T2.disp_id WHERE T2.type = 'gold'": {"evaluation": "pass: incorrect", "result": "1067\n1089\n1133\n1179\n1220\n1246\n1289\n1388\n1452\n1453\n1536\n1579\n1629\n1668\n1707\n1718\n1777\n1799\n1811\n1812\n1876\n1930\n2058\n2122\n2125\n2156\n2265\n2388\n2445\n2489\n2688\n2715\n2820\n2911\n2951\n2958\n2977\n3075\n3128\n3134\n3136\n3236\n3253\n326\n3292\n3378\n3448\n3465\n3581\n3601\n3667\n3753\n3824\n3944\n41\n4405\n548\n562\n694\n79\n886\n9\n928\n9333", "result_hash": "1c92cf1e40f6134f04c34ab80261dae6", "num_rows": 64}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT CAST(SUM(T2.amount) AS REAL) / COUNT(T2.amount) FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE STRFTIME('%Y', T2.date) = '2021' AND T3.type = 'OWNER' AND T2.type = 'VYBER KARTOU'": {"evaluation": "pass: incorrect", "result": "None", "result_hash": "378dd0ad02a5c6549ef615f96ac265eb", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T2.account_id, T1.`A8` AS district_id, T1.A4, T1.A5, T1.A6, T1.A7, T1.A10, T1.A11, T1.A12, T1.A13, T1.A14, T1.A15, T1.A16 FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.disp_id = T3.disp_id WHERE SUBSTR(T3.date, 1, 4) = '1998' AND T3.type = 'VYBER' AND T3.operation = 'VYBER KARTOU' AND T3.amount < ( SELECT AVG(amount) AS avg_amount FROM trans WHERE SUBSTR(date, 1, 4) = '1998' AND type = 'VYBER' AND operation = 'VYBER KARTOU' )": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.A8", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T1.client_id FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN card AS T4 ON T1.disp_id = T4.disp_id WHERE T2.gender = 'F' AND T4.type = 'gold' AND T3.account_id IN (SELECT account_id FROM loan)": {"evaluation": "pass: incorrect", "result": "1133\n12079\n2489\n3414\n5253\n5978\n7286\n9717", "result_hash": "baa4307e0e51b0ba87cf4722f97c99b4", "num_rows": 8}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T2.gender = 'F' AND T3.A3 LIKE '%south Bohemia%'": {"evaluation": "pass: incorrect", "result": "10843", "result_hash": "819b1406e4fa61609e6521ae16fd05da", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT account_id FROM account INNER JOIN client ON account.district_id = client.district_id INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Tabor' AND account.frequency = 'POPLATEK PO OBRATU'": {"evaluation": "error: <error>", "result": "Execution error: ambiguous column name: account_id", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT DISTINCT T3.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T1.frequency NOT IN ('OWNER') AND T2.A10 BETWEEN 8000 AND 9000": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.frequency", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(T4.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id INNER JOIN disp AS T4 ON T2.account_id = T4.account_id AND T3 transpose Does not transpose while doing logical operation and–=>sticky note transgender Regions name T1.A3 = 'North Bohemia' And  T3.bank = 'AB')": {"evaluation": "error: <error>", "result": "Execution error: near \"transpose\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT A2 FROM district WHERE district_id IN ( SELECT T1.district_id FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'VYDAJ' )": {"evaluation": "pass: correct", "result": "Benesov\nBeroun\nBlansko\nBreclav\nBrno - mesto\nBrno - venkov\nBruntal\nCeska Lipa\nCeske Budejovice\nCesky Krumlov\nCheb\nChomutov\nChrudim\nDecin\nDomazlice\nFrydek - Mistek\nHavlickuv Brod\nHl.m. Praha\nHodonin\nHradec Kralove\nJablonec n. Nisou\nJesenik\nJicin\nJihlava\nJindrichuv Hradec\nKarlovy Vary\nKarvina\nKladno\nKlatovy\nKolin\nKromeriz\nKutna Hora\nLiberec\nLitomerice\nLouny\nMelnik\nMlada Boleslav\nMost\nNachod\nNovy Jicin\nNymburk\nOlomouc\nOpava\nOstrava - mesto\nPardubice\nPelhrimov\nPisek\nPlzen - jih\nPlzen - mesto\nPlzen - sever\nPrachatice\nPraha - vychod\nPraha - zapad\nPrerov\nPribram\nProstejov\nRakovnik\nRokycany\nRychnov nad Kneznou\nSemily\nSokolov\nStrakonice\nSumperk\nSvitavy\nTabor\nTachov\nTeplice\nTrebic\nTrutnov\nUherske Hradiste\nUsti nad Labem\nUsti nad Orlici\nVsetin\nVyskov\nZdar nad Sazavou\nZlin\nZnojmo", "result_hash": "567031479bb09a339f981c50af4a112f", "num_rows": 77}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT AVG(T2.A15) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 NOT IN ( SELECT DISTINCT A3 FROM account WHERE DATE = '1995-01-01' ) AND T2.date >= '1997-01-01": {"evaluation": "error: <error>", "result": "Execution error: unrecognized token: \"'1997-01-01\"", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(T1.type) FROM card AS T1 INNER JOIN account AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'classic' AND T2.frequency LIKE '%POPLATEK%'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.disp_id", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'": {"evaluation": "pass: correct", "result": "339", "result_hash": "34b524f13d7d2787200976781b81f613", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T1.type = 'gold' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM card AS T1": {"evaluation": "pass: incorrect", "result": "9.865", "result_hash": "8cc1e6f8cfcda836c73d6bc38eaf054d", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T2.gender FROM account AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id GROUP BY T1.account_id ORDER BY SUM(T3.amount) DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.client_id", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T4.A15 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T1.district_id = T4.district_id WHERE T2.account_id = 532 AND T2.date LIKE '1995-%'": {"evaluation": "pass: correct", "result": "6041", "result_hash": "405626b736c48a2055b4cf6a8e2ca594", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T1.district_id FROM account AS T1 INNER JOIN order AS T2 ON T1.account_id = T2.account_id WHERE T2.order_id = 33333": {"evaluation": "error: <error>", "result": "Execution error: near \"order\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T3.date, T3.type, T3.amount FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T2.client_id = 3356 AND T3.operation = 'VYBER'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.client_id", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE CAST(T2.amount AS INTEGER) < 200000 AND T1.frequency = 'POPLATEK TYDNE'": {"evaluation": "pass: correct", "result": "58", "result_hash": "d0c431323eb03b208d8e3fab44bd3fc3", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT DISTINCT T4.type FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.client_id = 13539": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.type", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T2.A3 FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.client_id = 3541": {"evaluation": "pass: correct", "result": "east Bohemia", "result_hash": "ac810b2ff831a97ee97ffe8ac96b15b8", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T1.A15 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.status = 'A' GROUP BY T1.A15 ORDER BY COUNT(*) DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "85677", "result_hash": "c3ee71cb4e9a9981abedbc746f3e5219", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T1.account_id, T3.client_id, T2.client_id, T2.gender FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T3.client_id = T2.client_id WHERE T1.account_id = ( SELECT T.account_id FROM order AS T WHERE T.order_id = '32423' )": {"evaluation": "error: <error>", "result": "Execution error: near \"order\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T1.account_id, T1.amount, T1.date \nFROM trans AS T1 \nINNER JOIN account AS T2 ON T1.account_id = T2.account_id \nINNER JOIN district AS T3 ON T2.district_id = T3.district_id \nWHERE T3.district_id = 5": {"evaluation": "pass: incorrect", "result": "1111\t108\t1996-04-30\n1111\t15\t1998-02-28\n1111\t197\t1998-06-30\n1111\t208\t1998-04-30\n1111\t3962\t1997-04-09\n11271\t11222\t1996-03-05\n11271\t15\t1996-03-31\n11271\t16833\t1995-12-05\n11271\t200\t1997-04-12\n11271\t2364\t1998-07-09\n11271\t516\t1996-12-05\n11271\t5808\t1996-11-11\n11271\t7022\t1998-09-05\n1154\t16460\t1998-11-11\n1154\t30\t1998-06-30\n1154\t36395\t1998-08-20\n1253\t1000\t1998-01-30\n1253\t17661\t1998-05-08\n1253\t3865\t1997-09-14\n1253\t6700\t1998-09-05\n126\t127\t1998-01-31\n126\t15\t1995-11-30\n126\t1500\t1996-01-12\n126\t21630\t1995-07-22\n126\t29800\t1994-03-22\n126\t42742\t1994-05-02\n126\t7384\t1994-06-12\n126\t7384\t1997-08-12\n126\t9700\t1998-06-29\n1260\t13905\t1998-02-09\n1260\t1700\t1998-12-07\n1260\t6594\t1997-10-09\n1336\t121\t1998-01-31\n1336\t17104\t1997-05-07\n1336\t4800\t1998-05-25\n1478\t10600\t1998-10-20\n1478\t15\t1997-04-30\n1478\t20580\t1997-10-19\n1478\t40694\t1997-10-08\n1490\t136\t1997-07-31\n1490\t16605\t1997-10-02\n1490\t2400\t1998-05-16\n1490\t41884\t1996-10-17\n1517\t102\t1997-12-31\n1517\t2601\t1997-04-06\n1517\t4569\t1997-07-08\n1517\t80\t1998-04-30\n1672\t15\t1997-03-31\n1672\t175\t1998-09-30\n1672\t201\t1998-05-31\n1672\t3898\t1996-10-14\n1672\t7100\t1998-06-27\n1826\t13100\t1995-01-17\n1826\t15\t1996-06-30\n1826\t156\t1996-01-31\n1826\t19356\t1995-10-07\n1826\t215\t1997-09-30\n1826\t4320\t1996-04-11\n1826\t9921\t1995-06-11\n1826\t9921\t1998-08-11\n1839\t15\t1998-07-31\n1839\t3093\t1998-11-09\n187\t15\t1993-09-30\n187\t15\t1996-11-30\n187\t2000\t1998-03-15\n187\t2798\t1996-04-07\n187\t3760\t1994-05-25\n187\t4197\t1995-12-14\n187\t480\t1995-08-17\n187\t73\t1995-12-31\n1969\t101\t1995-12-31\n1969\t10602\t1997-02-14\n1969\t132\t1998-06-30\n1969\t15\t1997-05-31\n1969\t2040\t1995-08-17\n1969\t5403\t1994-11-05\n1969\t5403\t1998-01-05\n1969\t7400\t1995-12-23\n2000\t14\t1998-01-06\n2000\t19227\t1997-10-07\n2000\t3318\t1998-05-08\n2000\t6500\t1998-07-15\n2053\t3000\t1998-12-11\n228\t100\t1993-11-30\n228\t14700\t1996-12-11\n228\t15\t1996-12-31\n228\t161\t1997-05-31\n228\t194\t1996-12-31\n228\t1946\t1997-03-09\n228\t2158\t1994-07-13\n228\t2158\t1997-09-13\n228\t21602\t1996-01-13\n228\t2280\t1995-06-26\n228\t4160\t1994-12-21\n2345\t112\t1996-03-31\n2345\t134\t1998-07-31\n2345\t15\t1995-05-31\n2345\t15\t1998-07-31\n2345\t19969\t1994-07-13\n2345\t19969\t1998-04-13\n2345\t3328\t1995-03-12\n2345\t3328\t1998-05-12\n2345\t3612\t1996-04-14\n2345\t4200\t1995-10-28\n2345\t9300\t1996-01-13\n2406\t15\t1998-03-31\n2406\t3186\t1998-07-13\n2406\t4780\t1998-06-09\n2416\t10400\t1997-01-07\n2416\t15\t1997-04-30\n2416\t16887\t1997-05-08\n2416\t3720\t1996-12-30\n2416\t9425\t1997-05-12\n2488\t1110\t1995-11-21\n2488\t15\t1994-05-31\n2488\t15\t1997-07-31\n2488\t2030\t1995-05-13\n2488\t2030\t1998-07-13\n2488\t3046\t1995-09-08\n2488\t3046\t1998-11-08\n2488\t840\t1995-07-13\n2551\t11601\t1996-10-09\n2551\t14097\t1998-08-06\n2551\t1500\t1998-08-15\n2551\t26200\t1998-03-29\n2551\t28605\t1996-03-12\n2551\t48110\t1996-09-29\n2588\t10200\t1998-05-12\n2588\t15\t1994-09-30\n2588\t15\t1997-11-30\n2588\t1680\t1997-07-20\n2588\t17531\t1997-03-05\n2588\t196\t1995-12-31\n2588\t300\t1998-07-11\n2588\t6509\t1994-10-08\n2588\t6509\t1997-12-08\n2588\t9500\t1994-08-01\n2593\t15\t1996-11-30\n2593\t1800\t1997-10-07\n2593\t2520\t1998-11-16\n2593\t7300\t1997-08-08\n2638\t1018\t1995-04-11\n2638\t1018\t1998-06-11\n2638\t13900\t1997-09-14\n2638\t15\t1997-06-30\n2638\t1800\t1996-09-20\n2638\t20081\t1995-03-12\n2638\t202\t1995-04-30\n2638\t30122\t1994-12-12\n2638\t4538\t1996-03-09\n2638\t5880\t1996-07-16\n2638\t728\t1997-10-08\n2677\t12300\t1998-10-17\n2677\t15\t1998-06-30\n2677\t1599\t1997-04-06\n2677\t19934\t1997-02-10\n2677\t3926\t1997-04-05\n2677\t641\t1998-04-06\n2732\t12716\t1996-02-12\n2732\t15\t1995-01-31\n2732\t15\t1998-03-31\n2732\t18900\t1996-03-02\n2732\t23060\t1997-04-18\n2732\t274\t1996-02-29\n2732\t33800\t1995-05-16\n2732\t4400\t1993-12-24\n2732\t5700\t1996-08-10\n2732\t8172\t1996-07-13\n2796\t273\t1998-10-31\n2796\t40636\t1998-11-10\n2939\t15\t1998-08-31\n2939\t5680\t1998-03-07\n3\t1135\t1998-06-06\n3\t2400\t1997-09-05\n3\t500\t1998-08-01\n3032\t1100\t1994-01-03\n3032\t15\t1994-09-30\n3032\t15\t1997-11-30\n3032\t2080\t1996-01-18\n3032\t2858\t1995-09-10\n3032\t2858\t1998-11-10\n3032\t6605\t1994-02-05\n3032\t6605\t1997-04-05\n3032\t84\t1995-11-30\n3107\t11250\t1994-06-07\n3107\t15\t1995-10-31\n3107\t1500\t1995-12-10\n3107\t2480\t1997-11-01\n3107\t2642\t1996-11-14\n3107\t327\t1998-04-30\n3107\t6300\t1995-02-11\n3107\t6300\t1998-04-11\n3129\t103\t1994-10-31\n3129\t1360\t1994-07-09\n3129\t15\t1996-12-31\n3129\t2200\t1995-08-27\n3129\t2707\t1996-06-12\n3129\t3100\t1996-04-23\n3129\t6300\t1998-12-09\n3129\t6727\t1996-11-14\n3129\t800\t1998-01-10\n32\t13300\t1998-08-12\n32\t15\t1998-02-28\n32\t16548\t1997-10-11\n32\t216\t1996-06-30\n32\t3700\t1997-12-16\n3221\t117\t1994-05-31\n3221\t148\t1995-03-13\n3221\t148\t1998-04-13\n3221\t15\t1996-06-30\n3221\t161\t1996-11-30\n3221\t2038\t1994-06-08\n3221\t2038\t1997-08-08\n3221\t3680\t1995-07-21\n3221\t5330\t1995-04-09\n3221\t5330\t1998-06-09\n3239\t11000\t1998-09-07\n3239\t15\t1997-09-30\n3239\t183\t1998-09-30\n3239\t38\t1996-07-31\n3239\t9700\t1997-08-13\n3326\t15\t1995-02-28\n3326\t165\t1997-08-31\n3326\t2244\t1995-03-28\n3326\t31721\t1995-03-10\n3326\t392\t1995-02-28\n3326\t51400\t1997-04-24\n3326\t8700\t1996-12-18\n3436\t1380\t1997-12-10\n3436\t150\t1996-12-10\n3436\t2243\t1998-08-14\n3436\t3365\t1998-02-10\n345\t1000\t1998-07-27\n345\t15\t1994-08-31\n345\t15\t1997-10-31\n345\t16431\t1995-01-12\n345\t16431\t1998-10-12\n345\t2200\t1995-12-04\n345\t2700\t1998-01-01\n345\t4900\t1998-11-03\n345\t8819\t1995-01-11\n345\t8819\t1998-03-11\n3567\t1156\t1996-03-09\n3567\t12449\t1997-10-09\n3567\t15\t1997-04-30\n3567\t18652\t1998-07-17\n3567\t266\t1996-04-30\n3567\t36149\t1996-09-27\n3567\t6000\t1996-12-13\n3567\t6943\t1997-12-07\n3589\t1100\t1996-11-13\n3589\t1800\t1997-07-11\n3589\t30094\t1997-12-20\n3589\t5308\t1997-02-06\n3589\t9943\t1998-04-28\n3745\t11469\t1995-12-08\n3745\t11600\t1995-05-26\n3745\t15\t1995-05-31\n3745\t15\t1998-07-31\n3745\t2100\t1995-01-16\n3745\t257\t1997-06-30\n3745\t26258\t1997-01-06\n3745\t3000\t1996-01-09\n3745\t413\t1998-05-31\n3745\t7040\t1994-03-20\n3745\t841\t1995-07-10\n3745\t841\t1998-09-10\n3793\t11172\t1997-05-11\n3793\t15\t1997-03-31\n3793\t2500\t1997-02-23\n3793\t5706\t1997-10-12\n3793\t9500\t1996-10-26\n385\t120\t1998-11-30\n385\t121\t1996-09-08\n385\t15\t1993-11-30\n385\t15\t1997-01-31\n385\t2160\t1994-01-14\n385\t2160\t1997-03-14\n385\t31\t1994-03-12\n385\t31\t1997-05-12\n385\t3469\t1994-05-11\n385\t3469\t1997-07-11\n385\t5760\t1995-06-05\n385\t91\t1995-07-31\n4131\t133\t1996-05-31\n4131\t15\t1996-11-30\n4131\t169\t1996-01-31\n4131\t22414\t1996-09-22\n4131\t27400\t1995-05-08\n4131\t3300\t1995-01-22\n4131\t389\t1998-07-31\n4131\t4696\t1995-07-06\n4131\t4696\t1998-09-06\n4131\t7203\t1998-06-26\n4131\t974\t1996-01-12\n4263\t10300\t1997-07-06\n4263\t15\t1998-08-31\n4263\t262\t1995-12-31\n4263\t700\t1998-01-15\n4358\t15\t1998-06-30\n4358\t258\t1998-04-30\n4358\t41425\t1997-03-17\n447\t13400\t1997-12-07\n447\t17300\t1996-12-12\n447\t217\t1997-01-31\n447\t5554\t1997-08-06\n4863\t15\t1996-09-30\n4863\t19000\t1998-09-28\n4863\t294\t1998-07-31\n4863\t3300\t1998-10-14\n4863\t4200\t1997-01-18\n4863\t6036\t1997-09-12\n4863\t7500\t1998-05-18\n492\t124\t1995-10-31\n492\t15\t1996-03-31\n492\t154\t1994-07-31\n492\t2520\t1997-01-19\n492\t4080\t1995-02-26\n492\t5553\t1994-05-12\n492\t5553\t1998-03-12\n492\t8330\t1996-12-12\n5164\t15\t1998-08-31\n5164\t600\t1998-02-07\n5164\t89\t1998-07-31\n549\t1200\t1996-12-27\n549\t15\t1997-04-30\n549\t2900\t1998-01-12\n549\t7600\t1998-04-21\n5632\t145\t1998-06-30\n5632\t21343\t1998-09-17\n5632\t28300\t1996-11-04\n5632\t30\t1997-02-28\n5632\t33022\t1997-01-12\n5632\t4182\t1996-01-24\n5632\t4760\t1996-08-12\n5632\t5352\t1995-02-15\n564\t142\t1998-06-30\n564\t295\t1998-12-05\n5837\t15\t1996-10-31\n5837\t1800\t1997-05-14\n5837\t324\t1998-09-30\n5837\t4939\t1998-07-12\n6265\t10500\t1997-08-28\n6265\t154\t1998-04-30\n6265\t26804\t1997-05-21\n6265\t3640\t1997-10-12\n6265\t6300\t1997-01-18\n6265\t8300\t1998-01-25\n695\t15\t1997-11-30\n695\t18900\t1996-06-20\n695\t23122\t1998-11-05\n695\t9516\t1996-09-14\n7184\t119\t1995-08-31\n7184\t15\t1997-06-30\n7184\t1879\t1995-12-11\n7184\t19000\t1996-12-10\n7184\t22991\t1998-02-05\n7184\t276\t1997-12-10\n7184\t3434\t1997-07-05\n7184\t53\t1997-08-31\n7184\t691\t1996-06-10\n7184\t76\t1997-05-31\n731\t15\t1996-08-31\n731\t2706\t1996-02-07\n731\t3680\t1996-06-22\n731\t4059\t1998-07-13\n731\t66\t1997-03-31\n734\t15\t1997-10-31\n734\t2228\t1998-01-08\n734\t3410\t1998-02-13\n734\t750\t1998-01-01\n8132\t11823\t1994-12-27\n8132\t163\t1998-09-30\n8132\t207\t1998-05-31\n8132\t24900\t1997-10-23\n8132\t25142\t1996-11-12\n8132\t270\t1996-06-30\n8132\t30\t1995-04-30\n8132\t30\t1998-06-30\n8132\t37713\t1993-12-12\n8132\t5700\t1997-01-01\n8132\t85\t1993-06-30\n817\t11200\t1994-11-13\n817\t15\t1995-06-30\n817\t15\t1998-08-31\n817\t21388\t1995-11-05\n817\t2720\t1997-12-25\n817\t4605\t1995-03-14\n817\t4605\t1998-05-14\n817\t74\t1995-08-31\n817\t8975\t1996-12-12\n817\t99\t1998-06-30\n9051\t2\t1998-06-30\n9051\t32\t1998-04-30\n9051\t7600\t1997-03-12\n9484\t1400\t1998-01-19\n9484\t40\t1998-06-30\n9484\t", "result_hash": "9d9d363d8cfb09ac8e992e00f7232f7b", "num_rows": 15098}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT SUM(CASE WHEN T1.A2 LIKE '%Jesenik%' THEN 1 ELSE 0 END) AS count FROM district AS T1 WHERE T1.account_id IN ( SELECT account_id FROM account )": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.account_id", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T1.client_id FROM client AS T1 INNER JOIN card AS T2 ON T1.client_id = T2.disp_id INNER JOIN disp AS T3 ON T2.disp_id = T3.disp_id WHERE T2.type = 'junior' AND T2.issued > '1996-01-01'": {"evaluation": "pass: incorrect", "result": "1168\n1202\n1211\n1239\n13098\n1310\n1382\n1390\n1440\n1500\n153\n167\n1691\n1736\n174\n1754\n1819\n1831\n1947\n2005\n2038\n2065\n2121\n2138\n221\n2277\n2287\n2324\n2425\n2488\n2538\n2540\n2592\n264\n2662\n268\n2888\n2948\n3066\n3102\n3104\n3183\n3233\n3257\n3319\n3348\n3427\n3627\n3636\n3640\n3689\n3763\n3766\n378\n3787\n3794\n3813\n3846\n3938\n3970\n3981\n3985\n4018\n4061\n4081\n4091\n4094\n4171\n4201\n4246\n4265\n429\n4353\n4382\n4495\n451\n4533\n4568\n4587\n4588\n4639\n4651\n4674\n4715\n4740\n4764\n4808\n4823\n4941\n4944\n4976\n5013\n504\n519\n584\n5873\n60\n626\n649\n6567\n666\n667\n6789\n731\n786\n7959\n8217\n826\n83\n8342\n8359\n8506\n900\n906\n967\n996", "result_hash": "fcedc702b2db2a8a28fd3b05d821c68a", "num_rows": 116}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T2.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.client_id) FROM account AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.A10 > 10000": {"evaluation": "pass: incorrect", "result": "None", "result_hash": "378dd0ad02a5c6549ef615f96ac265eb", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT CAST(SUM( CASE WHEN YEAR(date) = 1997 THEN amount ELSE 0 END ) - SUM( CASE WHEN YEAR(date) = 1996 THEN amount ELSE 0 END ) AS REAL) * 100 / SUM( CASE WHEN YEAR(date) = 1996 THEN amount ELSE 0 END ) AS growth_rate FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN client ON account.client_id = client.client_id WHERE client.gender = 'M'": {"evaluation": "error: <error>", "result": "Execution error: ambiguous column name: date", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(T2.trans_id) FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.date > '1995-01-01' AND T2.operation = 'VYBER KARTOU'": {"evaluation": "pass: incorrect", "result": "3340", "result_hash": "4463de241b03310e61b64294d354b838", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT  SUM(CASE WHEN A3 = 'north Bohemia' THEN A16 ELSE 0 END ) - SUM(CASE WHEN A3 = 'east Bohemia' THEN A16 ELSE 0 END  ) FROM district": {"evaluation": "pass: incorrect", "result": "17734", "result_hash": "c8f418c74468876eb6204bc26c8b9e5d", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(T1.type) FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.account_id BETWEEN 1 AND 10": {"evaluation": "pass: incorrect", "result": "13", "result_hash": "5ceaa982e75962041b53bba4c8a4a69c", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(T2.date), SUM(T1.amount) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.k_symbol = 'SIPO' AND T2.account_id = 3": {"evaluation": "pass: incorrect", "result": "13\t14755", "result_hash": "23f189c6598de0bc3427aa8f668f6876", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT STRFTIME('%Y', client.birth_date) FROM client WHERE client.client_id = 130": {"evaluation": "pass: incorrect", "result": "1942", "result_hash": "5401419f186619ee8163a6a19c806a17", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(T2.account_id) FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.type = 'OWNER' AND T2.frequency = 'POPLATEK PO OBRATU'": {"evaluation": "pass: correct", "result": "93", "result_hash": "767f443b3e8f9a562d76c1564c2f62be", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT I IFNULL(SUM(T4.amount), 0) AS debt, I IFNULL(T5.payments, 0) AS payments FROM client AS T1 INNER JOIN account AS T2 ON T2.district_id = T1.district_id INNER JOIN trans AS T3 ON T3.account_id = T2.account_id INNER JOIN dirt AS T4 ON T4.account_id = T2.account_id WHERE T1.client_id = 992 LEFT JOIN loan AS T5 ON T5.account_id = T2.account_id": {"evaluation": "error: <error>", "result": "Execution error: near \"(\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT SUM(T5.amount) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id INNER JOIN client AS T4 ON T2.client_id = T4.client_id LEFT JOIN trans AS T5 ON T1.account_id = T5.account_id WHERE T4.client_id = 4 AND T5.trans_id = 851 AND T4.gender = 'M'": {"evaluation": "pass: incorrect", "result": "None", "result_hash": "378dd0ad02a5c6549ef615f96ac265eb", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T4.type FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T3.client_id = 9": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.type", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT SUM(T2.amount) FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE (T2.date LIKE '1998%') AND T1.client_id = 617": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.client_id", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T1.client_id, T1.birth_date \nFROM client AS T1 \nINNER JOIN district AS T2 ON T1.district_id = T2.district_id \nWHERE strftime('%Y', T1.birth_date) BETWEEN '1983' AND '1987' AND T2.A3 = 'East Bohemia'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT DISTINCT T2.client_id FROM loan AS T1 INNER JOIN client AS T2 ON T1.account_id = (SELECT account_id FROM account AS T3 INNER JOIN client AS T4 ON T3.district_id = T4.district_id WHERE T4.gender = 'F' ORDER BY T3.account_id DESC LIMIT 3)": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(T1.order_id) FROM order AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id INNER JOIN card AS T4 ON T3.disp_id = T4.disp_id INNER JOIN client AS T5 ON T3.client_id = T5.client_id WHERE T5.gender = 'M' AND T5.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND T4.type = 'gold' AND T1.k_symbol = 'SIPO' AND T1.amount > 4000": {"evaluation": "error: <error>", "result": "Execution error: near \"order\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(*) FROM district AS T2 INNER JOIN account AS T1 ON T2.district_id = T1.district_id WHERE T2.A2 = 'Beroun' AND CAST(substr(T1.date, 1, 4) AS INTEGER) > 1996": {"evaluation": "pass: correct", "result": "8", "result_hash": "449241f4ab7d3505b13ff1a180b6297e", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(T2.card_id) FROM client AS T1 INNER JOIN card AS T2 ON T1.client_id = T2.disp_id WHERE T1.gender IN ('F') AND T2.type = 'junior'": {"evaluation": "pass: incorrect", "result": "66", "result_hash": "2e1e21c1f3ac1b525e98d6751721a25e", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) * 100.0 / COUNT(T2.account_id)) AS proportion FROM client AS T1 INNER JOIN account AS T2 ON T1.client_id = T2.client_id WHERE T1.district_id IN (SELECT district_id FROM district WHERE A3 = 'Prague')": {"evaluation": "error: <error>", "result": "Execution error: near \")\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T1.frequency = 'POPLATEK TYDNE' THEN (CASE WHEN T2.gender = 'M' THEN 1 ELSE 0 END) ELSE 0 END) AS REAL) * 100 / COUNT(T1.account_id) FROM account AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id": {"evaluation": "pass: incorrect", "result": "2.988", "result_hash": "e3b588e7b56e994b2c178cc9a190385f", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(T1.client_id) FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T3.account_id = T1.account_id WHERE T3.date < CAST('2010-01-01' AS DATE) AND T2.gender = 'F' AND T3.frequency = 'POPLATEK TYDNE' AND T1.type = 'OWNER'": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T1.account_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T1.date < '1997-01-01' AND T2.status = 'D' AND T2.duration > 24 ORDER BY T2.amount ASC LIMIT 1": {"evaluation": "pass: incorrect", "result": "3967", "result_hash": "5ee0426ea570198f86b6eeb94e9932cf", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T3.account_id FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.district_id = T3.client_id WHERE T1.gender = 'F' AND T1.birth_date = ( SELECT MAX(birth_date) FROM client ) AND T1.A11 = ( SELECT MIN(A11) FROM client )": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.A11", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T2.district_id = T1.district_id WHERE T1.A3 LIKE '%Central Bohemia' AND substr(T2.birth_date, 1, 4) = '1920'": {"evaluation": "pass: incorrect", "result": "11", "result_hash": "567055e8f8934c26aa9d56d5a34b091a", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT COUNT(T2.loan_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.duration = 24": {"evaluation": "pass: correct", "result": "15", "result_hash": "50d1c44f2aa9d695983c21af98fbde1f", "num_rows": 1}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT AVG(T4.amount) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN card AS T3 ON T3.disp_id = T1.disp_id INNER JOIN disp AS T4 ON T1.account_id = T4.account_id WHERE T2.status LIKE 'C' AND T1.frequency LIKE 'POPLATEK PO OBRATU'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.amount", "result_hash": "", "num_rows": 0}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T1.client_id, D.A2, D.A4 FROM client AS T1 INNER JOIN district AS D ON T1.district_id = D.district_id INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE (T2.type = 'OWNER' AND T3.frequency = 'POPLATEK MESICNE')": {"evaluation": "pass: incorrect", "result": "1\tPisek\t70699\n1008\tKutna Hora\t77963\n1019\tCeske Budejovice\t177686\n10269\tKarvina\t285387\n10350\tRokycany\t45714\n1046\tHl.m. Praha\t1204953\n10528\tPardubice\t162580\n1064\tHl.m. Praha\t1204953\n1072\tProstejov\t110643\n1081\tNovy Jicin\t161227\n10912\tCesky Krumlov\t58796\n1101\tOstrava - mesto\t323870\n11105\tKarvina\t285387\n1116\tJesenik\t42821\n11252\tCeska Lipa\t105058\n11319\tHl.m. Praha\t1204953\n11372\tPraha - zapad\t75637\n11461\tKarvina\t285387\n11545\tHl.m. Praha\t1204953\n1164\tCesky Krumlov\t58796\n11713\tKromeriz\t108871\n1180\tTabor\t103347\n11886\tTrebic\t117897\n1197\tKutna Hora\t77963\n1206\tSvitavy\t102609\n12144\tBenesov\t88884\n12220\tProstejov\t110643\n12328\tHl.m. Praha\t1204953\n124\tChrudim\t105606\n12490\tChomutov\t125236\n12586\tPlzen - jih\t67298\n12695\tFrydek - Mistek\t228848\n12754\tBrno - venkov\t157042\n12844\tJicin\t77917\n1293\tHl.m. Praha\t1204953\n13044\tUsti nad Orlici\t139012\n131\tBlansko\t107911\n13172\tLiberec\t159617\n13261\tPrerov\t138032\n1337\tBreclav\t124605\n1346\tRakovnik\t53921\n13588\tNachod\t112709\n13673\tMost\t119895\n1380\tChrudim\t105606\n139\tMlada Boleslav\t112065\n1397\tZdar nad Sazavou\t125832\n1413\tPraha - zapad\t75637\n1428\tPribram\t107870\n1445\tFrydek - Mistek\t228848\n146\tTachov\t51313\n1472\tHl.m. Praha\t1204953\n1487\tRychnov nad Kneznou\t78955\n1500\tHl.m. Praha\t1204953\n1516\tLouny\t85852\n153\tRakovnik\t53921\n1554\tBrno - venkov\t157042\n1569\tBrno - mesto\t387570\n1583\tHl.m. Praha\t1204953\n1598\tBruntal\t106054\n1614\tTabor\t103347\n163\tOstrava - mesto\t323870\n1644\tBreclav\t124605\n1657\tCeska Lipa\t105058\n1671\tHodonin\t161954\n1688\tCeska Lipa\t105058\n1703\tSvitavy\t102609\n1723\tNovy Jicin\t161227\n1741\tKarvina\t285387\n1754\tHodonin\t161954\n1769\tPribram\t107870\n1784\tBenesov\t88884\n1799\tLiberec\t159617\n1814\tHodonin\t161954\n1829\tTrutnov\t121947\n1844\tOstrava - mesto\t323870\n1861\tRokycany\t45714\n1877\tPardubice\t162580\n189\tPraha - zapad\t75637\n1900\tCheb\t87419\n1916\tPlzen - sever\t72541\n1931\tJindrichuv Hradec\t93931\n1946\tOlomouc\t226122\n1960\tDomazlice\t58400\n1972\tHl.m. Praha\t1204953\n1989\tSvitavy\t102609\n2002\tKarvina\t285387\n2018\tBreclav\t124605\n2034\tRakovnik\t53921\n205\tKladno\t149893\n2066\tHl.m. Praha\t1204953\n2077\tChrudim\t105606\n2089\tKarvina\t285387\n2104\tLitomerice\t114006\n2118\tHl.m. Praha\t1204953\n2131\tMost\t119895\n2147\tJesenik\t42821\n2160\tKarvina\t285387\n2175\tBlansko\t107911\n2190\tPlzen - sever\t72541\n2207\tKarvina\t285387\n2222\tHl.m. Praha\t1204953\n2235\tCeske Budejovice\t177686\n2250\tChomutov\t125236\n2268\tPraha - vychod\t92084\n2283\tHl.m. Praha\t1204953\n230\tOstrava - mesto\t323870\n2317\tHl.m. Praha\t1204953\n2328\tKarlovy Vary\t122603\n2344\tBeroun\t75232\n236\tKarvina\t285387\n2377\tSemily\t75685\n2391\tHl.m. Praha\t1204953\n2406\tSemily\t75685\n2419\tHl.m. Praha\t1204953\n2432\tPlzen - jih\t67298\n2447\tFrydek - Mistek\t228848\n2461\tZlin\t197099\n2475\tChrudim\t105606\n2488\tNymburk\t81344\n2500\tKarlovy Vary\t122603\n2513\tUsti nad Labem\t118650\n2526\tHl.m. Praha\t1204953\n254\tPlzen - sever\t72541\n2556\tChrudim\t105606\n2569\tJesenik\t42821\n2585\tPrerov\t138032\n2601\tLitomerice\t114006\n2618\tPelhrimov\t74062\n2635\tBruntal\t106054\n2653\tHl.m. Praha\t1204953\n2667\tNymburk\t81344\n2683\tRychnov nad Kneznou\t78955\n27\tBrno - mesto\t387570\n2712\tKlatovy\t88757\n2729\tHl.m. Praha\t1204953\n2742\tZnojmo\t114200\n276\tHl.m. Praha\t1204953\n2777\tNachod\t112709\n2789\tHl.m. Praha\t1204953\n2803\tFrydek - Mistek\t228848\n2818\tBrno - mesto\t387570\n2829\tDecin\t133777\n2843\tKarvina\t285387\n2857\tDecin\t133777\n2872\tVsetin\t148545\n2883\tSokolov\t94812\n2897\tTeplice\t128118\n2911\tJicin\t77917\n2926\tPlzen - jih\t67298\n2941\tLouny\t85852\n2953\tBeroun\t75232\n2967\tBlansko\t107911\n2982\tKutna Hora\t77963\n2999\tOstrava - mesto\t323870\n301\tPlzen - sever\t72541\n3023\tJindrichuv Hradec\t93931\n304\tPrachatice\t51428\n3054\tOstrava - mesto\t323870\n3069\tTabor\t103347\n3083\tUsti nad Labem\t118650\n3095\tLiberec\t159617\n3106\tOlomouc\t226122\n3120\tPrerov\t138032\n3133\tTachov\t51313\n3148\tBeroun\t75232\n3160\tStrakonice\t70646\n3179\tJicin\t77917\n3191\tBreclav\t124605\n3205\tHl.m. Praha\t1204953\n3220\tCheb\t87419\n3235\tNachod\t112709\n3249\tPelhrimov\t74062\n3262\tTrebic\t117897\n328\tHl.m. Praha\t1204953\n3295\tTeplice\t128118\n3308\tCesky Krumlov\t58796\n3324\tPlzen - mesto\t170449\n3338\tJesenik\t42821\n3354\tUherske Hradiste\t145688\n3369\tHl.m. Praha\t1204953\n3387\tJihlava\t109164\n3399\tOlomouc\t226122\n3418\tKarvina\t285387\n3432\tCesky Krumlov\t58796\n3446\tKarvina\t285387\n3461\tBrno - mesto\t387570\n3475\tPrachatice\t51428\n3489\tSumperk\t127369\n3501\tTrutnov\t121947\n3515\tTrebic\t117897\n3528\tOpava\t182027\n3539\tLiberec\t159617\n3554\tDomazlice\t58400\n3570\tCesky Krumlov\t58796\n3582\tLouny\t85852\n3598\tZdar nad Sazavou\t125832\n3612\tPrachatice\t51428\n3628\tPraha - zapad\t75637\n3644\tPrerov\t138032\n3658\tJihlava\t109164\n3675\tKarvina\t285387\n3691\tPisek\t70699\n3707\tOstrava - mesto\t323870\n3722\tHl.m. Praha\t1204953\n374\tPlzen - mesto\t170449\n3754\tHl.m. Praha\t1204953\n3769\tBrno - mesto\t387570\n3783\tHl.m. Praha\t1204953\n3796\tBeroun\t75232\n3811\tKutna Hora\t77963\n3830\tPisek\t70699\n3844\tNovy Jicin\t161227\n3856\tHl.m. Praha\t1204953\n3872\tMlada Boleslav\t112065\n3887\tBruntal\t106054\n3902\tZnojmo\t114200\n3915\tStrakonice\t70646\n3929\tOstrava - mesto\t323870\n3947\tCheb\t87419\n3963\tSumperk\t127369\n3977\tMlada Boleslav\t112065\n399\tJicin\t77917\n400\tHl.m. Praha\t1204953\n4013\tHl.m. Praha\t1204953\n4029\tPelhrimov\t74062\n4046\tHl.m. Praha\t1204953\n406\tLiberec\t159617\n4075\tMlada Boleslav\t112065\n4087\tZlin\t197099\n4102\tKladno\t149893\n4118\tPlzen - sever\t72541\n4137\tTabor\t103347\n4155\tHl.m. Praha\t1204953\n4173\tUsti nad Orlici\t139012\n4185\tTrutnov\t121947\n4198\tCheb\t87419\n4213\tZlin\t197099\n4226\tTachov\t51313\n4238\tUsti nad Labem\t118650\n4251\tChrudim\t105606\n4263\tOpava\t182027\n4278\tDecin\t133777\n429\tSvitavy\t102609\n4301\tCeske Budejovice\t177686\n4313\tBlansko\t107911\n4328\tKromeriz\t108871\n4342\tVyskov\t86513\n4359\tZlin\t197099\n4372\tBeroun\t75232\n4389\tPraha - vychod\t92084\n4402\tCheb\t87419\n4415\tKladno\t149893\n4428\tLouny\t85852\n4444\tVsetin\t148545\n4459\tHl.m. Praha\t1204953\n4473\tHl.m. Praha\t1204953\n4491\tBenesov\t88884\n4504\tDecin\t133777\n4519\tKarvina\t285387\n4534\tLouny\t85852\n4548\tMelnik\t94725\n4561\tTeplice\t128118\n4576\tBlansko\t107911\n4588\tBlansko\t107911\n4601\tHl.m. Praha\t1204953\n4615\tBreclav\t124605\n4632\tHl.m. Praha\t1204953\n4648\tDecin\t133777\n466\tHl.m. Praha\t1204953\n4675\tCheb\t87419\n4689\tSvitavy\t102609\n4701\tDomazlice\t58400\n4718\tBenesov\t88884\n4730\tFrydek - Mistek\t228848\n4744\tKutna Hora\t77963\n4762\tSumperk\t127369\n4779\tUsti nad Orlici\t139012\n4790\tPrerov\t138032\n4802\tPrerov\t138032\n4814\tBrno - mesto\t387570\n4832\tBreclav\t124605\n4892\tPlzen - mesto\t170449\n4925\tJicin\t77917\n495\tSemily\t75685\n4989\tPlzen - sever\t72541\n502\tKutna Hora\t77963\n5072\tHl.m. Praha\t1204953\n5127\tDecin\t133777\n5152\tHradec Kralove\t161854\n5204\tPardubice\t162580\n5236\tKlatovy\t88757\n5263\tHl.m. Praha\t1204953\n5320\tPelhrimov\t74062\n5353\tRychnov nad Kneznou\t78955\n5392\tJindrichuv Hradec\t93931\n544\tVyskov\t86513\n5478\tDecin\t133777\n5539\tOstrava - mesto\t323870\n561\tOstrava - mesto\t323870\n570\tTrebic\t117897\n577\tHl.m. Praha\t1204953\n5858\tUsti nad Orlici\t139012\n5928\tHavlickuv Brod\t95907\n603\tRakovnik\t53921\n61\tJindrichuv Hradec\t93931\n6178\tHl.m. Praha\t1204953\n6255\tBrno - mesto\t387570\n6359\tZlin\t197099\n641\tTeplice\t128118\n6481\tHl.m. Praha\t1204953\n6551\tKarlovy Vary\t122603\n6619\tHradec Kralove\t161854\n67\tRokycany\t45714\n678\tMost\t119895\n686\tCeska Lipa\t105058\n6978\tLouny\t85852\n706\tHl.m. Praha\t1204953\n713\tStrakonice\t70646\n721\tHradec Kralove\t161854\n73\tDomazlice\t58400\n740\tBrno - venkov\t157042\n750\tKarvina\t285387\n7594\tZlin\t197099\n768\tCeska Lipa\t105058\n778\tRakovnik\t53921\n785\tVyskov\t86513\n796\tHl.m. Praha\t1204953\n8074\tTrebic\t117897\n815\tDomazlice\t58400\n8276\tHradec Kralove\t161854\n8342\tSumperk\t127369\n844\tDomazlice\t58400\n8548\tHodonin\t161954\n8636\tNovy Jicin\t161227\n8737\tPelhrimov\t74062\n887\tZdar nad Sazavou\t125832\n9\tProstejov\t110643\n91\tVyskov\t86513\n92\tOstrava - mesto\t323870\n9276\tKladno\t149893\n935\tHavlickuv Brod\t95907\n9427\tUherske Hradiste\t145688\n954\tHl.m. Praha\t1204953\n962\tPrachatice\t51428\n971\tNachod\t112709\n980\tTeplice\t128118\n990\tNovy Jicin\t161227\n999\tOstrava - mesto\t323870", "result_hash": "6b1ae5882bd6809325101a0173e8727e", "num_rows": 4167}, "data/test_databases/financial/financial.sqlite<$$|||$$>SELECT T1.client_id, TIMESTAMP('1990-01-01') + INTERVAL (YEAR('1990-01-01',\"birth_date\") - YEAR('1990-01-01') + CASE WHEN MONTH('1990-01-01') > MONTH(\"birth_date\") AND DAY('1990-01-01') > DAY(\"birth_date\") THEN 1 ELSE 0 END YEAR FROM client AS T1 INNER JOIN disp AS T3 ON T1.client_id = T3.client_id INNER JOIN card AS T2 ON T3.disp_id = T2.disp_id WHERE T2.type = 'gold' AND T3.type = 'OWNER'": {"evaluation": "error: <error>", "result": "Execution error: near \"YEAR\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1": {"evaluation": "pass: correct", "result": "-", "result_hash": "2bed14e7a8d1ef972e9df24f73c11cba", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(T1.molecule_id) FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.element = 'cl' AND EXISTS (SELECT 1 FROM molecule AS T3 WHERE T3.molecule_id = T1.molecule_id AND T3.label = '-')": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.molecule_id", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT AVG(T1.element = 'o') FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-'": {"evaluation": "pass: incorrect", "result": "0.082", "result_hash": "f0f60af91d1faf47a159bccf8e90d930", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T3.label = '+' AND T2.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) / COUNT(T3.atom_id) FROM atom AS T1 INNER JOIN connected AS T4 ON T1.atom_id = T4.atom_id INNER JOIN bond AS T2 ON T4.bond_id = T2.bond_id INNER JOIN connected AS T5 ON T2.molecule_id = T5.bond_id INNER JOIN atom AS T3 ON T3.atom_id = T5.atom_id": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.label", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(*) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'na' AND T1.label = '-'": {"evaluation": "pass: incorrect", "result": "17", "result_hash": "03401e3017263424126c0f3c78431b8f", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.bond_type = '#'": {"evaluation": "pass: correct", "result": "TR041\nTR499", "result_hash": "1416b790a3bd51a0db09f6cd0a940464", "num_rows": 2}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T1.element = 'c' AND T2.bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.atom_id = T2.atom_id": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.atom_id", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(bond_id) FROM bond WHERE bond_type = '#'": {"evaluation": "pass: correct", "result": "6", "result_hash": "31f0ca0b902eb3209468525897226c59", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(T1.atom_id) FROM atom AS T1 WHERE T1.element != 'br'": {"evaluation": "pass: correct", "result": "12286", "result_hash": "e2e6c549e003ce46e93322d0de138e77", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(T1.molecule_id) FROM molecule AS T1 WHERE T1.molecule_id BETWEEN 'TR000' AND 'TR099' AND T1.label = '+'": {"evaluation": "pass: correct", "result": "29", "result_hash": "0f3fcbd6bdae04c7a5cb1a3d4c932e72", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c'": {"evaluation": "pass: incorrect", "result": "TR000\nTR001\nTR002\nTR004\nTR006\nTR007\nTR008\nTR009\nTR010\nTR011\nTR012\nTR014\nTR015\nTR017\nTR019\nTR020\nTR021\nTR022\nTR023\nTR024\nTR025\nTR028\nTR029\nTR030\nTR031\nTR032\nTR033\nTR034\nTR035\nTR036\nTR039\nTR040\nTR041\nTR045\nTR046\nTR047\nTR048\nTR049\nTR050\nTR051\nTR053\nTR054\nTR055\nTR056\nTR058\nTR059\nTR060\nTR061\nTR063\nTR064\nTR066\nTR068\nTR071\nTR072\nTR073\nTR074\nTR076\nTR077\nTR078\nTR080\nTR081\nTR082\nTR083\nTR084\nTR085\nTR086\nTR089\nTR090\nTR091\nTR092\nTR093\nTR094\nTR095\nTR096\nTR098\nTR099\nTR100\nTR101\nTR102\nTR103\nTR104\nTR105\nTR107\nTR109\nTR110\nTR111\nTR112\nTR113\nTR114\nTR115\nTR117\nTR118\nTR120\nTR121\nTR122\nTR123\nTR124\nTR125\nTR126\nTR127\nTR128\nTR129\nTR130\nTR131\nTR132\nTR133\nTR134\nTR135\nTR136\nTR137\nTR138\nTR139\nTR140\nTR141\nTR142\nTR143\nTR144\nTR145\nTR146\nTR147\nTR148\nTR149\nTR150\nTR151\nTR153\nTR154\nTR155\nTR156\nTR157\nTR158\nTR159\nTR160\nTR161\nTR162\nTR163\nTR164\nTR165\nTR166\nTR168\nTR169\nTR171\nTR172\nTR173\nTR174\nTR175\nTR177\nTR178\nTR179\nTR180\nTR181\nTR183\nTR184\nTR185\nTR186\nTR187\nTR190\nTR191\nTR192\nTR193\nTR195\nTR196\nTR200\nTR203\nTR204\nTR205\nTR206\nTR207\nTR208\nTR209\nTR210\nTR211\nTR212\nTR214\nTR216\nTR217\nTR219\nTR220\nTR222\nTR223\nTR225\nTR226\nTR228\nTR233\nTR234\nTR235\nTR236\nTR238\nTR245\nTR247\nTR248\nTR253\nTR255\nTR257\nTR259\nTR263\nTR266\nTR267\nTR269\nTR272\nTR275\nTR276\nTR278\nTR281\nTR282\nTR284\nTR285\nTR287\nTR289\nTR291\nTR293\nTR298\nTR299\nTR300\nTR304\nTR305\nTR306\nTR307\nTR308\nTR309\nTR311\nTR312\nTR313\nTR314\nTR316\nTR319\nTR321\nTR322\nTR323\nTR328\nTR329\nTR330\nTR331\nTR332\nTR333\nTR334\nTR335\nTR336\nTR339\nTR341\nTR342\nTR343\nTR344\nTR347\nTR348\nTR350\nTR351\nTR352\nTR353\nTR354\nTR357\nTR358\nTR359\nTR360\nTR361\nTR362\nTR363\nTR366\nTR368\nTR369\nTR370\nTR371\nTR372\nTR373\nTR374\nTR377\nTR378\nTR379\nTR382\nTR383\nTR384\nTR386\nTR387\nTR388\nTR390\nTR391\nTR394\nTR395\nTR396\nTR397\nTR398\nTR400\nTR401\nTR402\nTR403\nTR405\nTR406\nTR407\nTR409\nTR412\nTR414\nTR416\nTR422\nTR423\nTR424\nTR425\nTR427\nTR430\nTR431\nTR433\nTR435\nTR436\nTR437\nTR438\nTR439\nTR442\nTR445\nTR446\nTR448\nTR450\nTR452\nTR455\nTR456\nTR457\nTR458\nTR459\nTR461\nTR463\nTR464\nTR465\nTR466\nTR467\nTR470\nTR472\nTR473\nTR475\nTR477\nTR478\nTR480\nTR481\nTR482\nTR483\nTR484\nTR486\nTR487\nTR490\nTR491\nTR493\nTR494\nTR496\nTR501", "result_hash": "fd4c67629ba9bb800629a942c9b9a7b1", "num_rows": 340}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'": {"evaluation": "pass: correct", "result": "c", "result_hash": "e6d55ec92ecc8f3b6020bbf39e221954", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '='": {"evaluation": "pass: incorrect", "result": "br\nc\nca\ncl\ncu\nf\nh\nk\nn\nna\no\np\npb\ns\nsn\nte\nzn", "result_hash": "ed7a4d9402db683be45e21a381291af0", "num_rows": 17}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'h' GROUP BY T1.label ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1": {"evaluation": "pass: correct", "result": "-", "result_hash": "2bed14e7a8d1ef972e9df24f73c11cba", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T3.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T1.element = 'cl'": {"evaluation": "pass: correct", "result": "-", "result_hash": "2bed14e7a8d1ef972e9df24f73c11cba", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.atom_id AS atom1, T3.atom_id AS atom2 FROM connected AS T3 INNER JOIN bond AS T2 ON T2.bond_id = T3.bond_id INNER JOIN atom AS T1 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '-'": {"evaluation": "pass: incorrect", "result": "TR000_1\tTR000_1\nTR002_2\tTR002_2\nTR004_22\tTR004_22\nTR005_24\tTR005_24\nTR006_23\tTR006_23\nTR007_10\tTR007_10\nTR007_7\tTR007_7\nTR008_9\tTR008_9\nTR010_12\tTR010_12\nTR011_23\tTR011_23\nTR011_9\tTR011_9\nTR012_8\tTR012_8\nTR015_1\tTR015_1\nTR016_13\tTR016_13\nTR016_37\tTR016_37\nTR017_3\tTR017_3\nTR018_29\tTR018_29\nTR019_2\tTR019_2\nTR020_10\tTR020_10\nTR021_1\tTR021_1\nTR021_33\tTR021_33\nTR021_9\tTR021_9\nTR022_8\tTR022_8\nTR024_19\tTR024_19\nTR024_9\tTR024_9\nTR026_19\tTR026_19\nTR028_2\tTR028_2\nTR029_28\tTR029_28\nTR030_28\tTR030_28\nTR030_53\tTR030_53\nTR031_16\tTR031_16\nTR031_7\tTR031_7\nTR032_4\tTR032_4\nTR033_28\tTR033_28\nTR034_28\tTR034_28\nTR035_16\tTR035_16\nTR035_7\tTR035_7\nTR039_16\tTR039_16\nTR039_40\tTR039_40\nTR039_9\tTR039_9\nTR040_8\tTR040_8\nTR042_21\tTR042_21\nTR043_19\tTR043_19\nTR043_42\tTR043_42\nTR043_66\tTR043_66\nTR045_22\tTR045_22\nTR046_20\tTR046_20\nTR047_26\tTR047_26\nTR049_13\tTR049_13\nTR049_38\tTR049_38\nTR050_25\tTR050_25\nTR051_12\tTR051_12\nTR051_37\tTR051_37\nTR053_2\tTR053_2\nTR055_3\tTR055_3\nTR056_28\tTR056_28\nTR057_16\tTR057_16\nTR058_10\tTR058_10\nTR059_102\tTR059_102\nTR059_36\tTR059_36\nTR059_6\tTR059_6\nTR059_83\tTR059_83\nTR060_13\tTR060_13\nTR060_38\tTR060_38\nTR060_61\tTR060_61\nTR060_85\tTR060_85\nTR061_7\tTR061_7\nTR062_9\tTR062_9\nTR064_18\tTR064_18\nTR067_12\tTR067_12\nTR067_38\tTR067_38\nTR067_63\tTR067_63\nTR069_15\tTR069_15\nTR070_11\tTR070_11\nTR070_7\tTR070_7\nTR071_7\tTR071_7\nTR072_30\tTR072_30\nTR073_5\tTR073_5\nTR075_21\tTR075_21\nTR076_14\tTR076_14\nTR076_6\tTR076_6\nTR077_3\tTR077_3\nTR078_3\tTR078_3\nTR080_9\tTR080_9\nTR082_17\tTR082_17\nTR083_18\tTR083_18\nTR084_21\tTR084_21\nTR085_8\tTR085_8\nTR089_11\tTR089_11\nTR090_17\tTR090_17\nTR091_15\tTR091_15\nTR092_13\tTR092_13\nTR093_13\tTR093_13\nTR093_8\tTR093_8\nTR095_2\tTR095_2\nTR096_27\tTR096_27\nTR098_16\tTR098_16\nTR099_11\tTR099_11\nTR099_9\tTR099_9\nTR101_17\tTR101_17\nTR102_8\tTR102_8\nTR103_31\tTR103_31\nTR104_8\tTR104_8\nTR106_4\tTR106_4\nTR109_16\tTR109_16\nTR111_20\tTR111_20\nTR112_19\tTR112_19\nTR113_17\tTR113_17\nTR114_6\tTR114_6\nTR115_7\tTR115_7\nTR117_12\tTR117_12\nTR118_21\tTR118_21\nTR120_24\tTR120_24\nTR120_48\tTR120_48\nTR121_23\tTR121_23\nTR122_6\tTR122_6\nTR124_1\tTR124_1\nTR124_33\tTR124_33\nTR125_12\tTR125_12\nTR125_36\tTR125_36\nTR126_14\tTR126_14\nTR127_17\tTR127_17\nTR128_26\tTR128_26\nTR129_3\tTR129_3\nTR131_13\tTR131_13\nTR131_37\tTR131_37\nTR131_60\tTR131_60\nTR132_1\tTR132_1\nTR133_24\tTR133_24\nTR134_24\tTR134_24\nTR135_13\tTR135_13\nTR135_38\tTR135_38\nTR136_5\tTR136_5\nTR137_29\tTR137_29\nTR138_16\tTR138_16\nTR139_13\tTR139_13\nTR139_4\tTR139_4\nTR141_16\tTR141_16\nTR142_19\tTR142_19\nTR143_3\tTR143_3\nTR144_5\tTR144_5\nTR146_13\tTR146_13\nTR147_2\tTR147_2\nTR148_12\tTR148_12\nTR149_20\tTR149_20\nTR150_27\tTR150_27\nTR151_14\tTR151_14\nTR152_11\tTR152_11\nTR152_37\tTR152_37\nTR152_61\tTR152_61\nTR153_14\tTR153_14\nTR154_20\tTR154_20\nTR156_10\tTR156_10\nTR156_34\tTR156_34\nTR157_22\tTR157_22\nTR158_4\tTR158_4\nTR160_16\tTR160_16\nTR161_2\tTR161_2\nTR162_9\tTR162_9\nTR165_10\tTR165_10\nTR166_18\tTR166_18\nTR168_1\tTR168_1\nTR168_4\tTR168_4\nTR170_13\tTR170_13\nTR170_6\tTR170_6\nTR171_8\tTR171_8\nTR172_7\tTR172_7\nTR174_1\tTR174_1\nTR175_15\tTR175_15\nTR175_4\tTR175_4\nTR175_63\tTR175_63\nTR177_6\tTR177_6\nTR179_15\tTR179_15\nTR180_9\tTR180_9\nTR181_33\tTR181_33\nTR183_22\tTR183_22\nTR183_9\tTR183_9\nTR185_10\tTR185_10\nTR186_2\tTR186_2\nTR186_6\tTR186_6\nTR189_14\tTR189_14\nTR190_3\tTR190_3\nTR191_8\tTR191_8\nTR192_32\tTR192_32\nTR193_22\tTR193_22\nTR193_48\tTR193_48\nTR193_71\tTR193_71\nTR195_2\tTR195_2\nTR196_2\tTR196_2\nTR198_12\tTR198_12\nTR198_36\tTR198_36\nTR200_2\tTR200_2\nTR201_22\tTR201_22\nTR202_26\tTR202_26\nTR203_1\tTR203_1\nTR204_22\tTR204_22\nTR205_20\tTR205_20\nTR207_10\tTR207_10\nTR208_13\tTR208_13\nTR208_7\tTR208_7\nTR210_2\tTR210_2\nTR211_30\tTR211_30\nTR212_21\tTR212_21\nTR212_46\tTR212_46\nTR212_8\tTR212_8\nTR213_32\tTR213_32\nTR214_19\tTR214_19\nTR215_25\tTR215_25\nTR216_19\tTR216_19\nTR217_1\tTR217_1\nTR217_34\tTR217_34\nTR217_58\tTR217_58\nTR219_8\tTR219_8\nTR220_35\tTR220_35\nTR222_20\tTR222_20\nTR223_12\tTR223_12\nTR225_14\tTR225_14\nTR225_4\tTR225_4\nTR225_65\tTR225_65\nTR226_21\tTR226_21\nTR232_3\tTR232_3\nTR233_4\tTR233_4\nTR235_2\tTR235_2\nTR235_45\tTR235_45\nTR236_4\tTR236_4\nTR238_22\tTR238_22\nTR239_22\tTR239_22\nTR239_8\tTR239_8\nTR240_7\tTR240_7\nTR242_4\tTR242_4\nTR245_9\tTR245_9\nTR247_13\tTR247_13\nTR248_2\tTR248_2\nTR250_13\tTR250_13\nTR251_21\tTR251_21\nTR252_16\tTR252_16\nTR252_4\tTR252_4\nTR252_64\tTR252_64\nTR253_24\tTR253_24\nTR257_11\tTR257_11\nTR257_8\tTR257_8\nTR261_8\tTR261_8\nTR265_21\tTR265_21\nTR266_14\tTR266_14\nTR267_8\tTR267_8\nTR268_33\tTR268_33\nTR271_10\tTR271_10\nTR271_35\tTR271_35\nTR274_13\tTR274_13\nTR274_37\tTR274_37\nTR274_60\tTR274_60\nTR275_3\tTR275_3\nTR278_10\tTR278_10\nTR281_17\tTR281_17\nTR283_3\tTR283_3\nTR284_28\tTR284_28\nTR285_23\tTR285_23\nTR287_10\tTR287_10\nTR289_12\tTR289_12\nTR291_4\tTR291_4\nTR292_9\tTR292_9\nTR293_33\tTR293_33\nTR295_24\tTR295_24\nTR296_27\tTR296_27\nTR296_51\tTR296_51\nTR297_13\tTR297_13\nTR298_23\tTR298_23\nTR299_24\tTR299_24\nTR300_8\tTR300_8\nTR301_31\tTR301_31\nTR301_55\tTR301_55\nTR302_25\tTR302_25\nTR302_49\tTR302_49\nTR304_1\tTR304_1\nTR305_14\tTR305_14\nTR305_38\tTR305_38\nTR305_61\tTR305_61\nTR307_16\tTR307_16\nTR307_41\tTR307_41\nTR308_1\tTR308_1\nTR308_33\tTR308_33\nTR309_22\tTR309_22\nTR312_7\tTR312_7\nTR314_10\tTR314_10\nTR315_23\tTR315_23\nTR315_48\tTR315_48\nTR316_7\tTR316_7\nTR317_30\tTR317_30\nTR318_10\tTR318_10\nTR318_37\tTR318_37\nTR319_2\tTR319_2\nTR320_27\tTR320_27\nTR320_50\tTR320_50\nTR322_23\tTR322_23\nTR323_8\tTR323_8\nTR326_5\tTR326_5\nTR327_30\tTR327_30\nTR327_54\tTR327_54\nTR328_3\tTR328_3\nTR330_16\tTR330_16\nTR331_2\tTR331_2\nTR333_14\tTR333_14\nTR334_10\tTR334_10\nTR335_2\tTR335_2\nTR335_8\tTR335_8\nTR336_34\tTR336_34\nTR337_4\tTR337_4\nTR338_117\tTR338_117\nTR338_141\tTR338_141\nTR338_167\tTR338_167\nTR338_33\tTR338_33\nTR338_57\tTR338_57\nTR338_80\tTR338_80\nTR339_14\tTR339_14\nTR340_23\tTR340_23\nTR340_47\tTR340_47\nTR341_23\tTR341_23\nTR342_9\tTR342_9\nTR344_18\tTR344_18\nTR344_44\tTR344_44\nTR345_16\tTR345_16\nTR347_15\tTR347_15\nTR348_15\tTR348_15\nTR348_40\tTR348_40\nTR348_64\tTR348_64\nTR351_12\tTR351_12\nTR353_1\tTR353_1\nTR354_22\tTR354_22\nTR355_22\tTR355_22\nTR355_8\tTR355_8\nTR356_5\tTR356_5\nTR358_1\tTR358_1\nTR358_36\tTR358_36\nTR359_19\tTR359_19\nTR360_20\tTR360_20\nTR362_19\tTR362_19\nTR364_15\tTR364_15\nTR364_4\tTR364_4\nTR364_63\tTR364_63\nTR365_6\tTR365_6\nTR367_19\tTR367_19\nTR367_42\tTR367_42\nTR368_29\tTR368_29\nTR369_9\tTR369_9\nTR371_5\tTR371_5\nTR372_29\tTR372_29\nTR374_1\tTR374_1\nTR375_23\tTR375_23\nTR376_12\tTR376_12\nTR377_3\tTR377_3\nTR379_17\tTR379_17\nTR380_26\tTR380_26\nTR381_25\tTR381_25\nTR383_19\tTR383_19\nTR384_9\tTR384_9\nTR387_20\tTR387_20\nTR387_45\tTR387_45\nTR390_10\tTR390_10\nTR390_34\tTR390_34\nTR391_25\tTR391_25\nTR394_7\tTR394_7\nTR395_33\tTR395_33\nTR397_17\tTR397_17\nTR397_44\tTR397_44\nTR397_71\tTR397_71\nTR398_19\tTR398_19\nTR399_22\tTR399_22\nTR400_4\tTR400_4\nTR401_9\tTR401_9\nTR404_11\tTR404_11\nTR404_9\tTR404_9\nTR405_34\tTR405_34\nTR405_61\tTR405_61\nTR406_11\tTR406_11\nTR407_25\tTR407_25\nTR409_16\tTR409_16\nTR410_11\tTR410_11\nTR411_2\tTR411_2\nTR411_45\tTR411_45\nTR412_24\tTR412_24\nTR413_6\tTR413_6\nTR416_15\tTR416_15\nTR418_10\tTR418_10\nTR419_21\tTR419_21\nTR420_17\tTR420_17\nTR422_14\tTR422_14\nTR423_6\tTR423_6\nTR424_6\tTR424_6\nTR425_3\tTR425_3\nTR426_18\tTR426_18\nTR426_41\tTR426_41\nTR426_65\tTR426_65\nTR427_13\tTR427_13\nTR427_37\tTR427_37\nTR429_21\tTR429_21\nTR429_47\tTR429_47\nTR430_21\tTR430_21\nTR430_45\tTR430_45\nTR430_76\tTR430_76\nTR431_6\tTR431_6\nTR433_30\tTR433_30\nTR434_10\tTR434_10\nTR435_25\tTR435_25\nTR435_49\tTR435_49\nTR436_9\tTR436_9\nTR438_22\tTR438_22\nTR438_46\tTR438_46\nTR438_7\tTR438_7\nTR439_28\tTR439_28\nTR440_20\tTR440_20\nTR442_17\tTR442_17\nTR443_27\tTR443_27\nTR444_22\tTR444_22\nTR445_23\tTR445_23\nTR445_47\tTR445_47\nTR446_21\tTR446_21\nTR446_45\tTR446_45\nTR448_16\tTR448_16\nTR449_3\tTR449_3\nTR452_4\tTR452_4\nTR455_28\tTR455_28\nTR456_12\tTR456_12\nTR457_10\tTR457_10\nTR457_36\tTR457_36\nTR458_23\tTR458_23\nTR458_8\tTR458_8\nTR459_9\tTR459_9\nTR463_29\tTR463_29\nTR464_5\tTR464_5\nTR465_30\tTR465_30\nTR466_3\tTR466_3\nTR468_18\tTR468_18\nTR469_14\tTR469_14\nTR470_2\tTR470_2\nTR473_17\tTR473_17\nTR475_3\tTR475_3\nTR476_27\tTR476_27\nTR478_14\tTR478_14\nTR480_21\tTR480_21\nTR480_45\tTR480_45\nTR481_2\tTR481_2\nTR481_44\tTR481_44\nTR481_7\tTR481_7\nTR483_7\tTR483_7\nTR485_10\tTR485_10\nTR485_35\tTR485_35\nTR485_8\tTR485_8\nTR487_9\tTR487_9\nTR491_20\tTR491_20\nTR493_21\tTR493_21\nTR494_2\tTR494_2\nTR496_109\tTR496_109\nTR496_38\tTR496_38\nTR496_63\tTR496_63\nTR496_87\tTR496_87\nTR501_18\tTR501_18", "result_hash": "292737354dbdef6dc56ff3eef2ee2bdb", "num_rows": 11854}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.atom_id, T2.atom_id2 FROM connected AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id2 = T1.atom_id AND T1.atom_id2 IN ( SELECT T3.atom_id FROM atom AS T3 INNER JOIN bond AS T4 ON T3.molecule_id = T4.molecule_id WHERE T4.bond_type != '-' INTERSECT SELECT T5.atom_id FROM atom AS T5 INNER JOIN molecule AS T6 ON T5.molecule_id = T6.molecule_id WHERE T6.label = '-' )": {"evaluation": "pass: incorrect", "result": "TR002_1\tTR002_1\nTR004_14\tTR004_14\nTR004_24\tTR004_24\nTR007_12\tTR007_12\nTR007_22\tTR007_22\nTR007_5\tTR007_5\nTR008_15\tTR008_15\nTR008_3\tTR008_3\nTR009_13\tTR009_13\nTR009_3\tTR009_3\nTR010_13\tTR010_13\nTR010_7\tTR010_7\nTR011_17\tTR011_17\nTR011_27\tTR011_27\nTR011_37\tTR011_37\nTR011_9\tTR011_9\nTR012_19\tTR012_19\nTR012_4\tTR012_4\nTR015_14\tTR015_14\nTR015_24\tTR015_24\nTR021_12\tTR021_12\nTR021_22\tTR021_22\nTR021_32\tTR021_32\nTR021_42\tTR021_42\nTR021_52\tTR021_52\nTR022_14\tTR022_14\nTR022_24\tTR022_24\nTR023_1\tTR023_1\nTR023_5\tTR023_5\nTR024_15\tTR024_15\nTR024_25\tTR024_25\nTR024_35\tTR024_35\nTR025_10\tTR025_10\nTR025_5\tTR025_5\nTR030_15\tTR030_15\nTR030_25\tTR030_25\nTR030_35\tTR030_35\nTR030_45\tTR030_45\nTR030_55\tTR030_55\nTR030_65\tTR030_65\nTR031_11\tTR031_11\nTR031_21\tTR031_21\nTR031_31\tTR031_31\nTR031_9\tTR031_9\nTR033_19\tTR033_19\nTR033_3\tTR033_3\nTR034_13\tTR034_13\nTR034_23\tTR034_23\nTR034_33\tTR034_33\nTR034_8\tTR034_8\nTR035_18\tTR035_18\nTR035_28\tTR035_28\nTR035_5\tTR035_5\nTR036_15\tTR036_15\nTR040_1\tTR040_1\nTR040_2\tTR040_2\nTR040_5\tTR040_5\nTR045_15\tTR045_15\nTR045_25\tTR045_25\nTR045_8\tTR045_8\nTR046_18\tTR046_18\nTR046_9\tTR046_9\nTR048_6\tTR048_6\nTR050_16\tTR050_16\nTR050_26\tTR050_26\nTR050_36\tTR050_36\nTR050_8\tTR050_8\nTR051_18\tTR051_18\nTR051_28\tTR051_28\nTR051_38\tTR051_38\nTR056_1\tTR056_1\nTR056_2\tTR056_2\nTR056_3\tTR056_3\nTR056_4\tTR056_4\nTR059_102\tTR059_102\nTR059_20\tTR059_20\nTR059_30\tTR059_30\nTR059_40\tTR059_40\nTR059_50\tTR059_50\nTR059_60\tTR059_60\nTR059_70\tTR059_70\nTR059_80\tTR059_80\nTR059_90\tTR059_90\nTR060_10\tTR060_10\nTR060_17\tTR060_17\nTR060_27\tTR060_27\nTR060_37\tTR060_37\nTR060_47\tTR060_47\nTR060_57\tTR060_57\nTR060_67\tTR060_67\nTR060_77\tTR060_77\nTR060_87\tTR060_87\nTR060_97\tTR060_97\nTR061_4\tTR061_4\nTR064_14\tTR064_14\nTR064_6\tTR064_6\nTR071_16\tTR071_16\nTR071_26\tTR071_26\nTR073_3\tTR073_3\nTR077_13\tTR077_13\nTR077_23\tTR077_23\nTR077_6\tTR077_6\nTR078_16\tTR078_16\nTR078_26\tTR078_26\nTR078_4\tTR078_4\nTR082_14\tTR082_14\nTR082_24\tTR082_24\nTR083_10\tTR083_10\nTR083_20\tTR083_20\nTR090_1\tTR090_1\nTR090_2\tTR090_2\nTR090_3\tTR090_3\nTR091_13\tTR091_13\nTR091_23\tTR091_23\nTR091_7\tTR091_7\nTR096_17\tTR096_17\nTR096_27\tTR096_27\nTR096_37\tTR096_37\nTR101_12\tTR101_12\nTR101_22\tTR101_22\nTR102_1\tTR102_1\nTR102_8\tTR102_8\nTR103_18\tTR103_18\nTR103_28\tTR103_28\nTR104_1\tTR104_1\nTR104_2\tTR104_2\nTR107_10\tTR107_10\nTR107_3\tTR107_3\nTR109_13\tTR109_13\nTR109_6\tTR109_6\nTR112_16\tTR112_16\nTR112_26\tTR112_26\nTR113_10\tTR113_10\nTR113_20\tTR113_20\nTR114_1\tTR114_1\nTR114_3\tTR114_3\nTR117_13\tTR117_13\nTR117_8\tTR117_8\nTR120_18\tTR120_18\nTR120_28\tTR120_28\nTR120_38\tTR120_38\nTR120_48\tTR120_48\nTR120_9\tTR120_9\nTR121_19\tTR121_19\nTR121_7\tTR121_7\nTR122_17\tTR122_17\nTR122_7\tTR122_7\nTR123_17\tTR123_17\nTR123_7\tTR123_7\nTR124_17\tTR124_17\nTR124_27\tTR124_27\nTR124_37\tTR124_37\nTR124_47\tTR124_47\nTR126_11\tTR126_11\nTR126_21\tTR126_21\nTR126_8\tTR126_8\nTR129_2\tTR129_2\nTR131_12\tTR131_12\nTR131_22\tTR131_22\nTR131_32\tTR131_32\nTR131_42\tTR131_42\nTR131_52\tTR131_52\nTR131_62\tTR131_62\nTR131_72\tTR131_72\nTR131_82\tTR131_82\nTR132_5\tTR132_5\nTR133_15\tTR133_15\nTR133_25\tTR133_25\nTR134_1\tTR134_1\nTR134_2\tTR134_2\nTR134_3\tTR134_3\nTR134_5\tTR134_5\nTR135_15\tTR135_15\nTR135_25\tTR135_25\nTR135_35\tTR135_35\nTR136_10\tTR136_10\nTR136_20\tTR136_20\nTR136_7\tTR136_7\nTR137_17\tTR137_17\nTR137_27\tTR137_27\nTR137_37\tTR137_37\nTR138_10\tTR138_10\nTR138_20\tTR138_20\nTR138_30\tTR138_30\nTR139_12\tTR139_12\nTR139_22\tTR139_22\nTR139_32\tTR139_32\nTR141_1\tTR141_1\nTR141_2\tTR141_2\nTR141_9\tTR141_9\nTR143_19\tTR143_19\nTR143_9\tTR143_9\nTR145_3\tTR145_3\nTR146_13\tTR146_13\nTR146_3\tTR146_3\nTR147_13\tTR147_13\nTR147_23\tTR147_23\nTR147_33\tTR147_33\nTR148_12\tTR148_12\nTR148_6\tTR148_6\nTR150_16\tTR150_16\nTR150_26\tTR150_26\nTR150_36\tTR150_36\nTR151_1\tTR151_1\nTR151_2\tTR151_2\nTR151_3\tTR151_3\nTR156_11\tTR156_11\nTR156_21\tTR156_21\nTR156_31\tTR156_31\nTR156_5\tTR156_5\nTR157_15\tTR157_15\nTR157_25\tTR157_25\nTR159_11\tTR159_11\nTR159_8\tTR159_8\nTR161_18\tTR161_18\nTR163_1\tTR163_1\nTR165_16\tTR165_16\nTR165_9\tTR165_9\nTR166_19\tTR166_19\nTR166_29\tTR166_29\nTR166_6\tTR166_6\nTR168_16\tTR168_16\nTR168_26\tTR168_26\nTR168_7\tTR168_7\nTR169_17\tTR169_17\nTR171_10\tTR171_10\nTR171_20\tTR171_20\nTR171_9\tTR171_9\nTR172_19\tTR172_19\nTR172_3\tTR172_3\nTR173_13\tTR173_13\nTR173_23\tTR173_23\nTR174_10\tTR174_10\nTR174_20\tTR174_20\nTR175_12\tTR175_12\nTR175_22\tTR175_22\nTR175_32\tTR175_32\nTR175_42\tTR175_42\nTR175_52\tTR175_52\nTR175_62\tTR175_62\nTR177_11\tTR177_11\nTR177_21\tTR177_21\nTR178_1\tTR178_1\nTR178_5\tTR178_5\nTR179_15\tTR179_15\nTR180_10\tTR180_10\nTR180_4\tTR180_4\nTR183_14\tTR183_14\nTR183_24\tTR183_24\nTR183_34\tTR183_34\nTR183_7\tTR183_7\nTR184_17\tTR184_17\nTR184_4\tTR184_4\nTR185_14\tTR185_14\nTR187_1\tTR187_1\nTR187_4\tTR187_4\nTR192_14\tTR192_14\nTR192_24\tTR192_24\nTR192_34\tTR192_34\nTR195_1\tTR195_1\nTR195_2\tTR195_2\nTR195_5\tTR195_5\nTR200_15\tTR200_15\nTR200_4\tTR200_4\nTR203_2\tTR203_2\nTR204_12\tTR204_12\nTR204_22\tTR204_22\nTR204_7\tTR204_7\nTR208_17\tTR208_17\nTR208_27\tTR208_27\nTR208_37\tTR208_37\nTR211_13\tTR211_13\nTR211_23\tTR211_23\nTR211_33\tTR211_33\nTR212_1\tTR212_1\nTR212_2\tTR212_2\nTR212_3\tTR212_3\nTR212_4\tTR212_4\nTR212_5\tTR212_5\nTR212_6\tTR212_6\nTR212_8\tTR212_8\nTR214_18\tTR214_18\nTR219_10\tTR219_10\nTR219_6\tTR219_6\nTR220_16\tTR220_16\nTR220_26\tTR220_26\nTR220_36\tTR220_36\nTR220_7\tTR220_7\nTR223_17\tTR223_17\nTR223_5\tTR223_5\nTR233_1\tTR233_1\nTR233_2\tTR233_2\nTR233_6\tTR233_6\nTR235_16\tTR235_16\nTR235_26\tTR235_26\nTR235_36\tTR235_36\nTR235_5\tTR235_5\nTR247_15\tTR247_15\nTR247_7\tTR247_7\nTR255_6\tTR255_6\nTR272_8\tTR272_8\nTR276_18\tTR276_18\nTR281_11\tTR281_11\nTR281_21\tTR281_21\nTR281_9\tTR281_9\nTR284_19\tTR284_19\nTR284_29\tTR284_29\nTR293_1\tTR293_1\nTR293_2\tTR293_2\nTR293_3\tTR293_3\nTR293_4\tTR293_4\nTR307_14\tTR307_14\nTR307_24\tTR307_24\nTR307_34\tTR307_34\nTR307_44\tTR307_44\nTR307_54\tTR307_54\nTR307_9\tTR307_9\nTR314_5\tTR314_5\nTR322_15\tTR322_15\nTR322_25\tTR322_25\nTR330_10\tTR330_10\nTR330_20\tTR330_20\nTR330_30\tTR330_30\nTR333_11\tTR333_11\nTR333_21\tTR333_21\nTR333_4\tTR333_4\nTR335_14\tTR335_14\nTR335_24\tTR335_24\nTR335_34\tTR335_34\nTR335_5\tTR335_5\nTR336_15\tTR336_15\nTR336_25\tTR336_25\nTR336_35\tTR336_35\nTR336_8\tTR336_8\nTR343_3\tTR343_3\nTR344_13\tTR344_13\nTR344_23\tTR344_23\nTR344_33\tTR344_33\nTR344_43\tTR344_43\nTR344_53\tTR344_53\nTR348_10\tTR348_10\nTR348_20\tTR348_20\nTR348_30\tTR348_30\nTR348_40\tTR348_40\nTR348_50\tTR348_50\nTR348_60\tTR348_60\nTR352_11\tTR352_11\nTR352_9\tTR352_9\nTR353_7\tTR353_7\nTR354_17\tTR354_17\nTR354_3\tTR354_3\nTR357_13\tTR357_13\nTR357_23\tTR357_23\nTR370_10\tTR370_10\nTR370_7\tTR370_7\nTR371_3\tTR371_3\nTR373_3\tTR373_3\nTR377_13\tTR377_13\nTR377_7\tTR377_7\nTR378_4\tTR378_4\nTR379_14\tTR379_14\nTR379_9\tTR379_9\nTR387_19\tTR387_19\nTR387_29\tTR387_29\nTR387_39\tTR387_39\nTR387_49\tTR387_49\nTR389_3\tTR389_3\nTR394_18\tTR394_18\nTR395_1\tTR395_1\nTR395_2\tTR395_2\nTR395_3\tTR395_3\nTR395_5\tTR395_5\nTR396_7\tTR396_7\nTR401_18\tTR401_18\nTR401_9\tTR401_9\nTR403_6\tTR403_6\nTR406_5\tTR406_5\nTR412_15\tTR412_15\nTR412_25\tTR412_25\nTR412_35\tTR412_35\nTR424_12\tTR424_12\nTR424_22\tTR424_22\nTR424_9\tTR424_9\nTR425_19\tTR425_19\nTR425_29\tTR425_29\nTR425_39\tTR425_39\nTR427_10\tTR427_10\nTR427_20\tTR427_20\nTR427_30\tTR427_30\nTR427_40\tTR427_40\nTR427_8\tTR427_8\nTR431_18\tTR431_18\nTR431_9\tTR431_9\nTR433_19\tTR433_19\nTR433_29\tTR433_29\nTR433_39\tTR433_39\nTR433_5\tTR433_5\nTR435_15\tTR435_15\nTR435_25\tTR435_25\nTR435_35\tTR435_35\nTR435_45\tTR435_45\nTR435_55\tTR435_55\nTR437_5\tTR437_5\nTR438_15\tTR438_15\nTR438_25\tTR438_25\nTR438_35\tTR438_35\nTR438_45\tTR438_45\nTR438_55\tTR438_55\nTR438_65\tTR438_65\nTR439_1\tTR439_1\nTR439_2\tTR439_2\nTR439_3\tTR439_3\nTR439_5\tTR439_5\nTR442_15\tTR442_15\nTR445_1\tTR445_1\nTR445_2\tTR445_2\nTR445_3\tTR445_3\nTR445_4\tTR445_4\nTR445_5\tTR445_5\nTR446_10\tTR446_10\nTR446_20\tTR446_20\nTR446_30\tTR446_30\nTR446_40\tTR446_40\nTR446_50\tTR446_50\nTR455_12\tTR455_12\nTR455_22\tTR455_22\nTR455_32\tTR455_32\nTR455_42\tTR455_42\nTR459_13\tTR459_13\nTR459_23\tTR459_23\nTR461_1\tTR461_1\nTR464_13\tTR464_13\nTR464_4\tTR464_4\nTR472_2\tTR472_2\nTR473_12\tTR473_12\nTR473_3\tTR473_3\nTR481_13\tTR481_13\nTR481_23\tTR481_23\nTR481_33\tTR481_33\nTR481_43\tTR481_43\nTR481_53\tTR481_53\nTR481_63\tTR481_63\nTR490_12\tTR490_12\nTR490_9\tTR490_9\nTR493_19\tTR493_19\nTR493_29\tTR493_29\nTR495_3\tTR495_3\nTR501_19\tTR501_19\nTR501_6\tTR501_6", "result_hash": "8b2ffa7d6a9d6089fc7ff9c66df10656", "num_rows": 4932}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T3.element FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN atom AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.label = '-' GROUP BY T3.element ORDER BY COUNT(T3.element) ASC LIMIT 1": {"evaluation": "pass: correct", "result": "ca", "result_hash": "bcb8f4c8f85e69bcebbc8d4842ce2ced", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT bond_type FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id INNER JOIN atom AS T3 ON T1.atom_id2 = T3.atom_id WHERE T2.atom_id = 'TR004_8' AND T3.atom_id = 'TR004_20'": {"evaluation": "error: <error>", "result": "Execution error: no such column: bond_type", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element != 'sn' EXCEPT SELECT label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'sn'": {"evaluation": "pass: incorrect", "result": "+", "result_hash": "6fe78344019608be59c9698d8e24bf68", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id INNER JOIN molecule AS T4 ON T4.molecule_id = T3.molecule_id WHERE T4.label = '+' AND T1.element IN ('i', 's') AND T3.bond_type = '-'": {"evaluation": "pass: incorrect", "result": "47", "result_hash": "ef6f83f9d41f93b76514f9f8b2ba8997", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.atom_id, T3.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN connected AS T3 ON T3.atom_id2 = T1.atom_id INNER JOIN bond AS T4 ON T3.bond_id = T4.bond_id WHERE T4.bond_type = '#'": {"evaluation": "pass: incorrect", "result": "TR041_10\tTR041_10\nTR041_7\tTR041_7\nTR041_8\tTR041_8\nTR041_9\tTR041_9\nTR377_3\tTR377_3\nTR377_4\tTR377_4\nTR377_5\tTR377_5\nTR377_6\tTR377_6\nTR447_1\tTR447_1\nTR447_3\tTR447_3\nTR499_1\tTR499_1\nTR499_2\tTR499_2", "result_hash": "4e683aabfa744e1c5cc374d1c9a138da", "num_rows": 12}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.atom_id FROM connected AS T2 INNER JOIN atom AS T1 ON T2.atom_id = T1.atom_id INNER JOIN atom AS T3 ON T2.atom_id2 = T3.atom_id WHERE T3.molecule_id = 'TR181'": {"evaluation": "pass: incorrect", "result": "TR181_1\nTR181_10\nTR181_11\nTR181_12\nTR181_13\nTR181_14\nTR181_15\nTR181_16\nTR181_17\nTR181_18\nTR181_19\nTR181_2\nTR181_20\nTR181_21\nTR181_22\nTR181_23\nTR181_24\nTR181_25\nTR181_26\nTR181_27\nTR181_28\nTR181_29\nTR181_3\nTR181_30\nTR181_31\nTR181_32\nTR181_33\nTR181_34\nTR181_35\nTR181_36\nTR181_37\nTR181_38\nTR181_39\nTR181_4\nTR181_40\nTR181_5\nTR181_6\nTR181_7\nTR181_8\nTR181_9", "result_hash": "fb6d8ac7e98fbe1f4d6443d53f426973", "num_rows": 40}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT CAST(( SELECT COUNT(DISTINCT T2.molecule_id) \nFROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id\nLEFT JOIN connected AS T3 ON T1.atom_id = T3.atom_id\nLEFT JOIN bond AS T4 ON T3.bond_id = T4.bond_id\nWHERE T2.label = '+' AND T1.element != 'f' AND T4.bond_type = '-' ) * 100 \nAS REAL / ( SELECT 100 * COUNT(DISTINCT T2.molecule_id) / COUNT(DISTINCT T1.molecule_id) \nFROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' ))": {"evaluation": "error: <error>", "result": "Execution error: near \"/\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T4.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T3.bond_type = '#' THEN 1 ELSE 0 END) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id INNER JOIN connected AS T4 ON T1.molecule_id = T4.molecule_id AND T2.atom_id2 = T4.atom_id": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.label", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element ASC LIMIT 3": {"evaluation": "pass: incorrect", "result": "c\ncl", "result_hash": "96ba42b3dc383cd486071e363afc97e5", "num_rows": 2}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.atom_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1(atom_id) = T2(atom_id) WHERE T2(atom_id2) IN (SELECT.atom_id FROM atom WHERE molecule_id = 'TR001') AND T2.bond_id = 'TR001_2_6'": {"evaluation": "error: <error>", "result": "Execution error: near \".\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.label = '-' THEN 1 ELSE 0 END) FROM molecule AS T1": {"evaluation": "pass: correct", "result": "-39", "result_hash": "323ec13302a406717ba8c888b9ad3ea1", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT DISTINCT T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id = 'TR000_2_5'": {"evaluation": "pass: correct", "result": "TR000_2\nTR000_5", "result_hash": "74408762994794cedd3d63518e8d7c1c", "num_rows": 2}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T3.bond_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T3.atom_id2 = T2.molecule_id WHERE T3.atom_id = 'TR000_2'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.bond_id", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id ORDER BY T2.label LIMIT 5": {"evaluation": "pass: incorrect", "result": "TR000\nTR001", "result_hash": "ae4dee75406a018dc72a438d97463d10", "num_rows": 2}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T1.bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bond_id) FROM bond AS T1 WHERE T1.molecule_id = 'TR008'": {"evaluation": "pass: incorrect", "result": "3.846", "result_hash": "cc5fc61ec46674257908056d82fdbaaf", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) AS \"percent\" FROM molecule AS T1": {"evaluation": "pass: incorrect", "result": "44.315", "result_hash": "f91542c96ee24fb21fa743c71a36dcd6", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T1.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id INNER JOIN molecule AS T4 ON T3.molecule_id = T4.molecule_id WHERE T4.molecule_id = 'TR206'": {"evaluation": "pass: incorrect", "result": "25.000", "result_hash": "37b4bcb1b0bcc7574bcd170da6806b90", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT DISTINCT T2.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id IN (SELECT atom_id FROM atom WHERE molecule_id = 'TR000')": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.bond_type", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR060'": {"evaluation": "pass: correct", "result": "c\t-\ncl\t-\nh\t-\nn\t-\no\t-", "result_hash": "af18396249dfd1bb18a545fffcb04e00", "num_rows": 5}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT DISTINCT T2.bond_type, IF(T2.label IN ('+', '-'), 'N', 'Y') FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id AND T3.atom_id2 IN (SELECT T1.atom_id FROM atom AS T1 INNER JOIN bond AS T4 ON T1.molecule_id = T4.molecule_id WHERE T1.molecule_id = 'TR010' AND T1.element = 'c' INTERSECT SELECT T3.atom_id2 FROM connected AS T3 INNER JOIN atom AS T5 ON T3.atom_id2 = T5.atom_id WHERE T1.molecule_id = T5.molecule_id AND T3.bond_id IN (SELECT bond_id FROM bond AS T4 WHERE bond_id LIKE 'TR000_10_2')) INNER JOIN bond AS T5 ON T3.bond_id = T5.bond_id WHERE T1.molecule_id = 'TR010' GROUP BY T5.bond_type ORDER BY COUNT(T5.bond_type) DESC LIMIT 1)": {"evaluation": "error: <error>", "result": "Execution error: near \")\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T1.molecule_id = T3.molecule_id WHERE T1.label = '-' AND T3.bond_type = '-' ORDER BY T1.molecule_id ASC LIMIT 3": {"evaluation": "pass: incorrect", "result": "TR002", "result_hash": "5cedfd3e1b90f5590104fd07f60117ec", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT * FROM bond WHERE molecule_id IN ( SELECT molecule_id FROM atom WHERE molecule_id = 'TR006' ) ORDER BY bond_type LIMIT 2": {"evaluation": "pass: incorrect", "result": "TR006_11_12\tTR006\t-\nTR006_12_22\tTR006\t-", "result_hash": "1c973ebe138698d09bd1cbf37257ad7d", "num_rows": 2}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(T2.bond_id) AS number_of_bonds FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T1.atom_id2 = T3.atom_id INNER JOIN atom AS T4 ON T1.atom_id = T4.atom_id WHERE T3.molecule_id = T4.molecule_id AND T3.atom_id = 'TR009_12' AND T4.molecule_id = 'TR009'": {"evaluation": "pass: incorrect", "result": "3", "result_hash": "1c4c4870852a93d3b7ec8dac8ad87b47", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T2.element = 'br'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.label", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T2.bond_type, T1.atom_id, T5.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T1.atom_id = T3.atom_id INNER JOIN connected AS T4 ON T1.atom_id2 = T4.atom_id INNER JOIN atom AS T5 ON T4.atom_id = T5.atom_id WHERE T5.atom_id IN ('TR001_6', 'TR001_9')": {"evaluation": "pass: incorrect", "result": "-\tTR001_17\tTR001_6\n-\tTR001_2\tTR001_6\n-\tTR001_20\tTR001_9\n-\tTR001_21\tTR001_9\n-\tTR001_3\tTR001_6\n-\tTR001_6\tTR001_9\n-\tTR001_7\tTR001_9\n-\tTR001_9\tTR001_6", "result_hash": "8ab8e1f1e4aa8c14250b54a37fa8afe2", "num_rows": 8}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T2.label, CASE WHEN T1.element = 'c' THEN 'carcinogenic' ELSE 'non-carcinogenic' END FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'": {"evaluation": "pass: incorrect", "result": "+\tcarcinogenic", "result_hash": "8e5ecf851a3a4c0601c77663856805d5", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'": {"evaluation": "pass: incorrect", "result": "3", "result_hash": "1c4c4870852a93d3b7ec8dac8ad87b47", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(T3.bond_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T1.atom_id LIKE 'TR%_19'": {"evaluation": "pass: correct", "result": "498", "result_hash": "8991b7c139a37965dea5711f143a80de", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT element FROM atom WHERE molecule_id = 'TR004'": {"evaluation": "pass: correct", "result": "c\nh\nn\no\np\ns", "result_hash": "28e7ea03434ba6b5b8e1f392e8099b69", "num_rows": 6}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(T1.molecule_id) FROM molecule AS T1 WHERE T1.label = '-'": {"evaluation": "pass: correct", "result": "191", "result_hash": "3a82aa857db86d0129426fb23636d2a7", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.label \nFROM atom AS T1 \n\tINNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id \nWHERE T1.atom_id BETWEEN 'TR000_21' AND 'TR000_25' AND T2.label = '+'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.label", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.bond_id, T1.bond_type FROM connected AS T3 INNER JOIN atom AS T2 ON T3.atom_id = T2.atom_id INNER JOIN bond AS T1 ON T3.bond_id = T1.bond_id INNER JOIN connected AS T4 ON T3.atom_id2 = T4.atom_id2 INNER JOIN atom AS T5 ON T4.atom_id2 = T5.atom_id WHERE T2.element = 'p' AND T5.element = 'n'": {"evaluation": "pass: incorrect", "result": "TR032_2_3\t-\nTR032_3_5\t-\nTR058_1_3\t-\nTR058_1_4\t-\nTR058_1_5\t-\nTR298_1_5\t-", "result_hash": "dfd773c9ed6354dbe9bfb674f9f6b004", "num_rows": 6}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT SUM(CASE WHEN T4.label = '+' THEN 1 ELSE 0 END) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id INNER JOIN molecule AS T4 ON T3.molecule_id = T4.molecule_id WHERE T1.bond_type = '=' ORDER BY (SELECT COUNT(*) FROM bond WHERE molecule_id = T1.molecule_id) DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "1268", "result_hash": "1fb39a29c0c69df04f854313ca68f093", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T1.element = 'i' THEN 1 ELSE 0 END) THEN (SELECT COUNT(T4.bond_id) FROM bond AS T4 INNER JOIN connected AS T5 ON T4.bond_id = T5.bond_id INNER JOIN atom AS T6 ON T5.atom_id = T6.atom_id WHERE T6.element = 'i') ELSE 0 END AS CA/ COUNT(T1.atom_id)) AS avg_number_of_bonds": {"evaluation": "error: <error>", "result": "Execution error: near \"THEN\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T2.bond_type, CONCAT(T1.molecule_id, '_', SUBSTR(T1.atom_id, 7, 2) + 0) AS bond_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR000_45'": {"evaluation": "error: <error>", "result": "Execution error: no such function: CONCAT", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.element FROM atom AS T1 LEFT JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.atom_id2 IS NULL": {"evaluation": "pass: incorrect", "result": "cl\nh\nk\nna\nzn", "result_hash": "f034330c60f898dd65f368b25e08f45e", "num_rows": 5}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T1.atom_id2 = T3.atom_id WHERE T2.molecule_id = 'TR041' AND T2.bond_type = '#'": {"evaluation": "pass: incorrect", "result": "TR041_10\nTR041_7\nTR041_8\nTR041_9", "result_hash": "607453e956036fc860ece34d634bb110", "num_rows": 4}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR144_8_19'": {"evaluation": "pass: correct", "result": "c\nh", "result_hash": "638f2dcb33d9cf437de9c24cba8679ac", "num_rows": 2}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' GROUP BY T1.molecule_id ORDER BY COUNT(T2.bond_type) DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "TR496", "result_hash": "ac10f48b223df0a1d949669728bcb087", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT LEFT(T2.element, 1) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id INNER JOIN atom AS T4 ON T3.atom_id2 = T4.atom_id WHERE T2.label = '+' GROUP BY T2.element ORDER BY COUNT(DISTINCT T2.molecule_id) LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: near \"(\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.atom_id AS atom_id, T3.atom_id AS bonding_atom_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id2 INNER JOIN atom AS T3 ON T3.molecule_id = T1.molecule_id WHERE T1.element = 'pb'": {"evaluation": "pass: incorrect", "result": "TR151_14\tTR151_1\nTR151_14\tTR151_10\nTR151_14\tTR151_11\nTR151_14\tTR151_12\nTR151_14\tTR151_13\nTR151_14\tTR151_14\nTR151_14\tTR151_15\nTR151_14\tTR151_16\nTR151_14\tTR151_17\nTR151_14\tTR151_18\nTR151_14\tTR151_19\nTR151_14\tTR151_2\nTR151_14\tTR151_20\nTR151_14\tTR151_21\nTR151_14\tTR151_22\nTR151_14\tTR151_23\nTR151_14\tTR151_24\nTR151_14\tTR151_25\nTR151_14\tTR151_26\nTR151_14\tTR151_27\nTR151_14\tTR151_28\nTR151_14\tTR151_29\nTR151_14\tTR151_3\nTR151_14\tTR151_30\nTR151_14\tTR151_31\nTR151_14\tTR151_4\nTR151_14\tTR151_5\nTR151_14\tTR151_6\nTR151_14\tTR151_7\nTR151_14\tTR151_8\nTR151_14\tTR151_9", "result_hash": "bec0a25a9eb7ef2811653135e8ba9d47", "num_rows": 31}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#'": {"evaluation": "pass: incorrect", "result": "c\ncl\nh\nn\np\ny", "result_hash": "57e2e65a6e757715e72ee5f5036e4eb3", "num_rows": 6}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T4.bond_type = T3.bond_type THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.atom_id = (SELECT atom_id FROM atom GROUP BY atom_id ORDER BY COUNT(atom_id) DESC LIMIT 1) THEN 1 ELSE 0 END) AS percentage FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id2 INNER JOIN bond AS T4 ON T3.bond_id = T4.bond_id": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.bond_type", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) * 100 AS REAL) / COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'": {"evaluation": "pass: incorrect", "result": "39.752", "result_hash": "161e1e07e06e15a3962ac9cac1d9c7de", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(T1.atom_id) FROM atom AS T1 WHERE T1.element IN ('c', 'h')": {"evaluation": "pass: correct", "result": "10123", "result_hash": "d2a02cd096aa04b6accb865c55f2c2dc", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T3.atom_id2 IN ( SELECT atom_id FROM atom WHERE element = 's' ) AND T2.atom_id IN ( SELECT atom_id FROM atom WHERE element = 's' )": {"evaluation": "pass: incorrect", "result": "TR166_10\nTR166_2\nTR166_5\nTR166_9", "result_hash": "b0700eac01f7943e72e058ae9e7fb386", "num_rows": 4}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T2.bond_type FROM atom AS T1 INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id INNER JOIN bond AS T2 ON T3.bond_id = T2.bond_id WHERE T1.element = 'sn'": {"evaluation": "pass: correct", "result": "-", "result_hash": "2bed14e7a8d1ef972e9df24f73c11cba", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.element FROM atom AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T3.molecule_id = T2.molecule_id WHERE T3.bond_type = '-' AND T1.atom_id != T2.atom_id": {"evaluation": "pass: incorrect", "result": "b\nbr\nc\ncl\ncu\nf\nh\ni\nk\nn\nna\no\np\npb\ns\nsi\nsn\nte\ny\nzn", "result_hash": "46bb9d0bc20396c257ca0a4b7911f5fa", "num_rows": 20}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(T1.atom_id) \nFROM atom AS T1 \nINNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id \nINNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id \nINNER JOIN connected AS T4 ON T3.atom_id2 = T4.atom_id \nINNER JOIN atom AS T5 ON T4.atom_id = T5.atom_id \nINNER JOIN bond AS T6 ON T5.molecule_id = T6.molecule_id \nWHERE T2.bond_type = '#' AND (T1.element = 'p' OR T1.element = 'br')": {"evaluation": "pass: incorrect", "result": "9", "result_hash": "e2ca9b4a69bde08ad25f198b51916859", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT DISTINCT T2.bond_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'": {"evaluation": "pass: correct", "result": "TR000_1_2\nTR001_1_2\nTR001_3_13\nTR001_5_15\nTR001_7_9\nTR006_11_13\nTR006_23_25\nTR006_25_38\nTR006_27_29\nTR006_33_34\nTR006_45_47\nTR006_6_20\nTR019_11_12\nTR019_14_15\nTR019_16_35\nTR019_36_37\nTR019_6_10\nTR019_8_23\nTR020_11_14\nTR020_14_16\nTR020_1_2\nTR020_5_8\nTR020_8_12\nTR028_1_4\nTR028_3_11\nTR029_12_25\nTR029_18_20\nTR029_1_4\nTR029_6_10\nTR029_9_21\nTR039_11_35\nTR039_13_21\nTR039_16_23\nTR039_19_45\nTR039_20_47\nTR039_23_25\nTR039_25_28\nTR039_29_60\nTR039_4_7\nTR039_6_33\nTR041_1_11\nTR041_3_4\nTR041_7_10\nTR047_12_14\nTR047_1_2\nTR047_4_16\nTR047_7_11\nTR049_10_15\nTR049_13_19\nTR049_18_30\nTR049_20_33\nTR049_22_37\nTR049_24_43\nTR049_4_9\nTR049_7_25\nTR053_1_4\nTR053_7_8\nTR054_11_19\nTR054_5_14\nTR054_8_15\nTR055_2_3\nTR058_10_11\nTR058_1_3\nTR058_4_9\nTR058_7_14\nTR058_9_19\nTR063_3_5\nTR063_6_15\nTR072_10_34\nTR072_13_16\nTR072_18_20\nTR072_1_23\nTR072_2_5\nTR072_4_9\nTR072_7_12\nTR072_9_32\nTR076_11_17\nTR076_14_32\nTR076_1_3\nTR076_6_21\nTR076_8_11\nTR080_1_2\nTR080_2_9\nTR080_5_14\nTR081_2_6\nTR081_7_12\nTR084_10_19\nTR084_21_23\nTR084_2_3\nTR084_5_6\nTR084_9_17\nTR085_2_3\nTR085_5_6\nTR086_1_2\nTR086_2_8\nTR089_2_3\nTR089_5_8\nTR089_9_17\nTR092_12_14\nTR092_1_3\nTR092_4_8\nTR092_7_19\nTR093_10_24\nTR093_13_27\nTR093_1_18\nTR093_31_32\nTR093_5_9\nTR093_9_13\nTR094_2_3\nTR094_5_9\nTR094_9_11\nTR095_4_5\nTR095_8_14\nTR099_11_22\nTR099_15_25\nTR099_2_4\nTR099_5_9\nTR099_8_19\nTR100_16_20\nTR100_3_13\nTR100_6_15\nTR105_1_2\nTR105_3_5\nTR105_6_9\nTR105_9_10\nTR111_12_17\nTR111_17_26\nTR111_2_4\nTR111_5_9\nTR111_8_19\nTR115_1_2\nTR115_3_14\nTR115_7_17\nTR115_9_10\nTR118_12_15\nTR118_14_23\nTR118_4_6\nTR118_7_11\nTR127_10_12\nTR127_3_14\nTR127_6_7\nTR127_9_20\nTR128_13_14\nTR128_18_19\nTR128_22_32\nTR128_3_4\nTR128_6_7\nTR130_15_16\nTR130_3_10\nTR130_6_7\nTR140_2_8\nTR140_6_10\nTR142_10_19\nTR142_2_12\nTR142_5_14\nTR142_8_18\nTR144_11_16\nTR144_16_24\nTR144_3_5\nTR144_6_11\nTR144_9_14\nTR149_3_10\nTR149_6_14\nTR149_8_19\nTR153_2_10\nTR153_5_6\nTR153_8_16\nTR154_12_13\nTR154_1_3\nTR154_5_15\nTR154_8_18\nTR155_2_10\nTR155_5_6\nTR160_10_23\nTR160_3_4\nTR160_6_7\nTR160_9_18\nTR162_2_11\nTR162_5_12\nTR162_8_16\nTR164_11_14\nTR164_14_24\nTR164_3_6\nTR164_7_11\nTR181_10_13\nTR181_13_15\nTR181_17_29\nTR181_19_35\nTR181_20_38\nTR181_4_8\nTR181_7_23\nTR186_10_28\nTR186_14_17\nTR186_17_33\nTR186_19_39\nTR186_1_3\nTR186_4_8\nTR186_7_25\nTR190_10_23\nTR190_1_16\nTR190_3_7\nTR190_6_19\nTR190_9_22\nTR193_12_13\nTR193_14_54\nTR193_16_21\nTR193_18_60\nTR193_1_7\nTR193_22_36\nTR193_25_30\nTR193_28_31\nTR193_31_39\nTR193_39_67\nTR193_40_71\nTR193_42_77\nTR193_44_83\nTR193_6_47\nTR196_10_11\nTR196_14_29\nTR196_17_32\nTR196_1_6\nTR196_4_5\nTR196_8_26\nTR205_10_22\nTR205_14_25\nTR205_2_5\nTR205_5_9\nTR205_8_20\nTR206_1_7\nTR206_3_6\nTR207_12_20\nTR207_1_2\nTR207_5_6\nTR207_9_18\nTR209_13_14\nTR209_2_10\nTR209_5_6\nTR209_9_16\nTR210_2_7\nTR216_12_13\nTR216_14_36\nTR216_2_17\nTR216_4_21\nTR216_6_25\nTR216_8_27\nTR217_13_34\nTR217_15_37\nTR217_17_41\nTR217_19_44\nTR217_20_46\nTR217_22_50\nTR217_24_55\nTR217_26_60\nTR217_28_66\nTR217_4_8\nTR217_8_10\nTR222_12_13\nTR222_15_28\nTR222_19_32\nTR222_20_35\nTR222_4_5\nTR222_8_25\nTR225_14_15\nTR225_17_18\nTR225_1_8\nTR225_22_24\nTR225_38_46\nTR225_3_4\nTR225_42_65\nTR225_46_48\nTR225_50_51\nTR225_53_57\nTR225_57_72\nTR225_5_28\nTR225_9_10\nTR226_12_24\nTR226_16_19\nTR226_1_2\nTR226_4_8\nTR226_7_20\nTR234_1_7\nTR234_3_4\nTR238_17_18\nTR238_1_2\nTR238_2_7\nTR238_4_5\nTR245_2_3\nTR245_6_8\nTR248_10_11\nTR248_13_25\nTR248_1_17\nTR248_32_33\nTR248_5_6\nTR248_9_10\nTR253_1_13\nTR253_3_16\nTR253_7_18\nTR253_9_22\nTR257_13_26\nTR257_15_29\nTR257_2_4\nTR257_5_20\nTR257_7_8\nTR259_2_5\nTR259_6_11\nTR266_10_23\nTR266_1_3\nTR266_4_9\nTR266_8_18\nTR267_1_5\nTR267_3_10\nTR269_2_4\nTR278_1_11\nTR278_4_7\nTR278_6_9\nTR278_9_20\nTR285_12_21\nTR285_16_17\nTR285_19_34\nTR285_21_37\nTR285_3_15\nTR285_6_24\nTR285_9_26\nTR287_3_5\nTR287_6_13\nTR289_2_8\nTR289_5_6\nTR291_2_3\nTR291_4_17\nTR291_6_8\nTR291_8_23\nTR298_12_26\nTR298_2_13\nTR298_6_15\nTR298_8_18\nTR299_10_18\nTR299_13_20\nTR299_17_28\nTR299_2_3\nTR299_5_10\nTR299_8_14\nTR300_2_5\nTR300_4_11\nTR304_15_18\nTR304_2_5\nTR304_4_9\nTR304_7_15\nTR308_10_11\nTR308_12_36\nTR308_1_2\nTR308_3_4\nTR308_5_6\nTR308_7_8\nTR308_9_32\nTR309_15_21\nTR309_2_5\nTR309_5_11\nTR309_9_17\nTR313_14_21\nTR313_21_22\nTR313_3_7\nTR313_5_8\nTR313_8_10\nTR316_2_4\nTR316_4_12\nTR319_3_4\nTR319_6_7\nTR323_1_3\nTR323_4_8\nTR323_7_15\nTR328_3_6\nTR329_1_3\nTR329_3_11\nTR331_1_2\nTR331_3_8\nTR332_3_5\nTR332_7_9\nTR334_11_16\nTR334_4_6\nTR334_7_9\nTR339_1_2\nTR339_5_7\nTR339_8_14\nTR341_13_23\nTR341_2_4\nTR341_5_20\nTR341_8_21\nTR342_1_5\nTR342_6_9\nTR342_8_19\nTR347_1_2\nTR347_3_13\nTR347_5_16\nTR347_7_21\nTR350_1_3\nTR351_1_9\nTR351_4_5\nTR358_10_14\nTR358_15_34\nTR358_18_20\nTR358_20_22\nTR358_24_42\nTR358_27_45\nTR358_4_29\nTR358_6_31\nTR359_10_20\nTR359_13_22\nTR359_2_18\nTR359_5_8\nTR359_8_13\nTR360_2_3\nTR360_5_6\nTR360_8_17\nTR361_1_4\nTR362_1_2\nTR362_4_13\nTR362_6_17\nTR362_8_20\nTR363_1_4\nTR366_1_2\nTR366_3_4\nTR366_7_13\nTR368_12_16\nTR368_17_29\nTR368_2_21\nTR368_5_23\nTR368_8_9\nTR369_2_11\nTR369_5_15\nTR369_8_18\nTR372_11_15\nTR372_15_16\nTR372_18_33\nTR372_2_8\nTR372_4_5\nTR372_8_22\nTR374_1_6\nTR374_4_10\nTR382_2_3\nTR382_6_11\nTR383_12_17\nTR383_17_25\nTR383_3_6\nTR383_6_12\nTR384_1_2\nTR384_2_9\nTR386_1_4\nTR386_4_10\nTR388_1_7\nTR388_3_4\nTR390_11_12\nTR390_14_26\nTR390_16_32\nTR390_33_34\nTR390_5_13\nTR390_8_9\nTR391_11_14\nTR391_1_5\nTR391_6_9\nTR391_8_20\nTR397_11_64\nTR397_14_18\nTR397_1_61\nTR397_22_28\nTR397_28_69\nTR397_30_31\nTR397_33_74\nTR397_37_39\nTR397_3_6\nTR397_43_46\nTR397_45_79\nTR397_51_53\nTR397_54_83\nTR397_57_60\nTR397_8_14\nTR398_12_17\nTR398_3_13\nTR398_6_15\nTR398_9_10\nTR400_2_5\nTR400_6_12\nTR402_3_4\nTR405_13_14\nTR405_16_17\nTR405_1_55\nTR405_21_66\nTR405_24_68\nTR405_28_29\nTR405_30_31\nTR405_34_39\nTR405_37_72\nTR405_40_41\nTR405_43_75\nTR405_48_51\nTR405_53_79\nTR405_6_60\nTR405_9_10\nTR407_13_19\nTR407_16_30\nTR407_1_3\nTR407_2_4\nTR407_5_9\nTR407_8_24\nTR409_12_25\nTR409_15_17\nTR409_1_6\nTR409_3_23\nTR409_6_21\nTR409_9_11\nTR414_3_11\nTR414_6_7\nTR416_1_2\nTR416_3_5\nTR416_6_9\nTR422_1_2\nTR422_4_5\nTR422_7_8\nTR423_10_18\nTR423_4_12\nTR423_6_15\nTR423_9_17\nTR430_12_48\nTR430_17_18\nTR430_1_2\nTR430_21_66\nTR430_25_33\nTR430_28_38\nTR430_31_32\nTR430_34_54\nTR430_36_71\nTR430_40_45\nTR430_44_45\nTR430_5_6\nTR430_79_81\nTR430_9_10\nTR436_2_5\nTR436_4_12\nTR448_1_7\nTR448_4_5\nTR448_7_16\nTR452_1_2\nTR452_2_6\nTR452_4_8\nTR456_10_13\nTR456_12_26\nTR456_1_2\nTR456_4_7\nTR456_7_12\nTR457_11_15\nTR457_14_16\nTR457_19_20\nTR457_20_22\nTR457_23_25\nTR457_28_42\nTR457_6_9\nTR457_9_32\nTR458_14_16\nTR458_16_32\nTR458_18_37\nTR458_1_6\nTR458_22_42\nTR458_4_5\nTR458_7_9\nTR463_11_28\nTR463_14_21\nTR463_1_2\nTR463_2_23\nTR463_5_6\nTR463_9_10\nTR465_12_13\nTR465_15_21\nTR465_19_34\nTR465_20_35\nTR465_3_13\nTR465_6_23\nTR465_9_29\nTR466_2_12\nTR466_5_15\nTR466_8_18\nTR467_3_4\nTR470_1_7\nTR470_5_10\nTR475_1_7\nTR475_3_4\nTR482_1_8\nTR482_4_6\nTR483_1_2\nTR483_4_5\nTR486_1_2\nTR486_3_8\nTR487_1_2\nTR487_3_8\nTR491_11_12\nTR491_13_27\nTR491_3_4\nTR491_6_9\nTR491_9_20\nTR494_12_22\nTR494_1_7\nTR494_4_5\nTR494_8_11\nTR496_10_60\nTR496_12_63\nTR496_14_67\nTR496_16_71\nTR496_18_74\nTR496_1_22\nTR496_23_25\nTR496_28_81\nTR496_2_51\nTR496_31_87\nTR496_34_35\nTR496_37_39\nTR496_39_41\nTR496_42_44\nTR496_47_103\nTR496_4_54\nTR496_6_7\nTR496_8_9\nTR499_2_4", "result_hash": "6dedc76205b9e4c3053e08f7d148dc3c", "num_rows": 3715}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT molecule_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-' AND T1.label = '-'": {"evaluation": "error: <error>", "result": "Execution error: ambiguous column name: molecule_id", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T3.element = 'cl' THEN 1 ELSE 0 END) AS REAL) / COUNT(T3.atom_id) * 100 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T3.atom_id = T2.atom_id WHERE T1.bond_type = '-'": {"evaluation": "pass: incorrect", "result": "2.014", "result_hash": "2ab8aeb15778253ed88df28a9f09de28", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002')": {"evaluation": "pass: incorrect", "result": "+\n-", "result_hash": "8a588366b2abd7deff5288cc74fad5a5", "num_rows": 2}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT molecule_id FROM molecule WHERE label = '-'": {"evaluation": "pass: correct", "result": "TR002\nTR004\nTR007\nTR008\nTR009\nTR010\nTR011\nTR012\nTR014\nTR015\nTR017\nTR021\nTR022\nTR023\nTR024\nTR025\nTR030\nTR031\nTR032\nTR033\nTR034\nTR035\nTR036\nTR040\nTR045\nTR046\nTR048\nTR050\nTR051\nTR056\nTR059\nTR060\nTR061\nTR064\nTR066\nTR068\nTR071\nTR073\nTR074\nTR077\nTR078\nTR082\nTR083\nTR090\nTR091\nTR096\nTR098\nTR101\nTR102\nTR103\nTR104\nTR107\nTR109\nTR110\nTR112\nTR113\nTR114\nTR117\nTR120\nTR121\nTR122\nTR123\nTR124\nTR125\nTR126\nTR129\nTR131\nTR132\nTR133\nTR134\nTR135\nTR136\nTR137\nTR138\nTR139\nTR141\nTR143\nTR145\nTR146\nTR147\nTR148\nTR150\nTR151\nTR156\nTR157\nTR158\nTR159\nTR161\nTR163\nTR165\nTR166\nTR168\nTR169\nTR171\nTR172\nTR173\nTR174\nTR175\nTR177\nTR178\nTR179\nTR180\nTR183\nTR184\nTR185\nTR187\nTR191\nTR192\nTR195\nTR200\nTR203\nTR204\nTR208\nTR211\nTR212\nTR214\nTR219\nTR220\nTR223\nTR228\nTR233\nTR235\nTR236\nTR247\nTR255\nTR263\nTR272\nTR275\nTR276\nTR281\nTR282\nTR284\nTR293\nTR305\nTR307\nTR312\nTR314\nTR322\nTR330\nTR333\nTR335\nTR336\nTR343\nTR344\nTR348\nTR352\nTR353\nTR354\nTR357\nTR370\nTR371\nTR373\nTR377\nTR378\nTR379\nTR387\nTR389\nTR394\nTR395\nTR396\nTR401\nTR403\nTR406\nTR412\nTR424\nTR425\nTR427\nTR431\nTR433\nTR435\nTR437\nTR438\nTR439\nTR442\nTR445\nTR446\nTR455\nTR459\nTR461\nTR464\nTR472\nTR473\nTR477\nTR478\nTR480\nTR481\nTR484\nTR490\nTR493\nTR495\nTR501", "result_hash": "c1ff90fc96bd5d158feca3107f03f642", "num_rows": 191}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(T1.molecule_id) FROM molecule AS T1 WHERE T1.molecule_id BETWEEN 'TR000' AND 'TR030' AND T1.label = '+'": {"evaluation": "pass: correct", "result": "7", "result_hash": "0a0314f6b2e9b1dfd76d38ab1a5a0c65", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.bond_type FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.molecule_id BETWEEN 'TR000' AND 'TR050'": {"evaluation": "pass: incorrect", "result": "#\n-\n=", "result_hash": "b992bddde7c93d04e547778c08d11e3d", "num_rows": 3}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.molecule_id = (SELECT T3.molecule_id FROM atom AS T3 WHERE T3.atom_id = (SELECT T2.atom_id2 FROM connected AS T2 WHERE T2.bond_id = 'TR001_10_11'))": {"evaluation": "pass: incorrect", "result": "c\ncl\no", "result_hash": "bd198c17a8762a81418d9b1e3f34d1f9", "num_rows": 3}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'i'": {"evaluation": "pass: incorrect", "result": "174", "result_hash": "a74e59b85aea7df9843115dcac4febc0", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT MAX(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) - MIN(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) AS difference FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca'": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT 1 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN atom AS T3 ON T1.molecule_id = T3.molecule_id AND T3.atom_id = T2.atom_id2 INNER JOIN bond AS T4 ON T2.bond_id = T4.bond_id WHERE T1.atom_id = 'TR001_1' AND T3.element = 'cl' AND T4.bond_id = 'TR001_1_8' AND T1.element = 'c'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN atom AS T3 ON T1.molecule_id = T3.molecule_id INNER JOIN connected AS T4 ON T3.atom_id = T4.atom_id WHERE T2.label = '-' AND T1.bond_type = '#' AND T3.element = 'c GROUP BY T2.molecule_id HAVING count(*) >= 3 LIMIT 2": {"evaluation": "error: <error>", "result": "Execution error: unrecognized token: \"'c GROUP BY T2.molecule_id HAVING count(*) >= 3 LIMIT 2\"", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT CAST(SUM(IIF(element = 'cl', 1, 0)) AS REAL) / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'": {"evaluation": "pass: incorrect", "result": "0.031", "result_hash": "a219ca8a0a77079e389e016a7b674d77", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR001'": {"evaluation": "pass: correct", "result": "c\ncl\no", "result_hash": "bd198c17a8762a81418d9b1e3f34d1f9", "num_rows": 3}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT distinct T1.molecule_id FROM bond AS T1 WHERE T1.bond_type = '='": {"evaluation": "pass: correct", "result": "TR001\nTR002\nTR004\nTR005\nTR006\nTR007\nTR008\nTR009\nTR010\nTR011\nTR012\nTR013\nTR015\nTR016\nTR018\nTR019\nTR020\nTR021\nTR022\nTR023\nTR024\nTR025\nTR026\nTR029\nTR030\nTR031\nTR033\nTR034\nTR035\nTR036\nTR039\nTR040\nTR041\nTR042\nTR043\nTR045\nTR046\nTR047\nTR048\nTR049\nTR050\nTR051\nTR052\nTR053\nTR054\nTR056\nTR057\nTR059\nTR060\nTR061\nTR062\nTR063\nTR064\nTR065\nTR067\nTR069\nTR070\nTR071\nTR072\nTR073\nTR075\nTR077\nTR078\nTR082\nTR083\nTR084\nTR085\nTR088\nTR089\nTR090\nTR091\nTR092\nTR093\nTR094\nTR095\nTR096\nTR099\nTR100\nTR101\nTR102\nTR103\nTR104\nTR105\nTR107\nTR109\nTR111\nTR112\nTR113\nTR114\nTR115\nTR116\nTR117\nTR118\nTR120\nTR121\nTR122\nTR123\nTR124\nTR126\nTR127\nTR128\nTR129\nTR130\nTR131\nTR132\nTR133\nTR134\nTR135\nTR136\nTR137\nTR138\nTR139\nTR140\nTR141\nTR142\nTR143\nTR144\nTR145\nTR146\nTR147\nTR148\nTR149\nTR150\nTR151\nTR152\nTR153\nTR154\nTR155\nTR156\nTR157\nTR159\nTR160\nTR161\nTR162\nTR163\nTR164\nTR165\nTR166\nTR168\nTR169\nTR170\nTR171\nTR172\nTR173\nTR174\nTR175\nTR177\nTR178\nTR179\nTR180\nTR181\nTR183\nTR184\nTR185\nTR186\nTR187\nTR189\nTR190\nTR192\nTR193\nTR195\nTR196\nTR198\nTR200\nTR201\nTR202\nTR203\nTR204\nTR205\nTR207\nTR208\nTR209\nTR211\nTR212\nTR213\nTR214\nTR215\nTR216\nTR217\nTR219\nTR220\nTR222\nTR223\nTR225\nTR226\nTR228\nTR233\nTR234\nTR235\nTR238\nTR240\nTR242\nTR243\nTR245\nTR247\nTR248\nTR250\nTR251\nTR252\nTR253\nTR255\nTR257\nTR259\nTR261\nTR265\nTR266\nTR268\nTR269\nTR271\nTR272\nTR273\nTR276\nTR278\nTR281\nTR283\nTR284\nTR285\nTR288\nTR289\nTR291\nTR293\nTR296\nTR297\nTR299\nTR300\nTR301\nTR303\nTR304\nTR307\nTR309\nTR311\nTR314\nTR315\nTR316\nTR317\nTR318\nTR319\nTR320\nTR322\nTR325\nTR327\nTR328\nTR330\nTR331\nTR332\nTR333\nTR334\nTR335\nTR336\nTR337\nTR338\nTR339\nTR341\nTR342\nTR343\nTR344\nTR345\nTR347\nTR348\nTR349\nTR351\nTR352\nTR353\nTR354\nTR355\nTR356\nTR357\nTR358\nTR359\nTR360\nTR364\nTR365\nTR366\nTR367\nTR368\nTR369\nTR370\nTR371\nTR372\nTR373\nTR375\nTR376\nTR377\nTR378\nTR379\nTR380\nTR381\nTR382\nTR383\nTR386\nTR387\nTR388\nTR389\nTR390\nTR394\nTR395\nTR396\nTR397\nTR398\nTR401\nTR402\nTR403\nTR404\nTR405\nTR406\nTR407\nTR409\nTR410\nTR411\nTR412\nTR414\nTR416\nTR417\nTR418\nTR419\nTR420\nTR422\nTR423\nTR424\nTR425\nTR426\nTR427\nTR429\nTR430\nTR431\nTR433\nTR434\nTR435\nTR437\nTR438\nTR439\nTR440\nTR442\nTR443\nTR444\nTR445\nTR446\nTR448\nTR450\nTR455\nTR456\nTR457\nTR458\nTR459\nTR461\nTR463\nTR464\nTR465\nTR466\nTR467\nTR468\nTR469\nTR470\nTR472\nTR473\nTR474\nTR476\nTR481\nTR482\nTR483\nTR485\nTR486\nTR487\nTR490\nTR491\nTR493\nTR494\nTR495\nTR496\nTR501", "result_hash": "6e44fe0c92b1ccba421c847113a57115", "num_rows": 370}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T2.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id IN ( SELECT bond_id FROM bond WHERE bond_type = '#' )": {"evaluation": "pass: incorrect", "result": "TR041_10\tTR041_10\nTR041_10\tTR041_7\nTR041_7\tTR041_10\nTR041_7\tTR041_7\nTR041_8\tTR041_8\nTR041_8\tTR041_9\nTR041_9\tTR041_8\nTR041_9\tTR041_9\nTR377_3\tTR377_3\nTR377_3\tTR377_5\nTR377_4\tTR377_4\nTR377_4\tTR377_6\nTR377_5\tTR377_3\nTR377_5\tTR377_5\nTR377_6\tTR377_4\nTR377_6\tTR377_6\nTR447_1\tTR447_1\nTR447_1\tTR447_3\nTR447_3\tTR447_1\nTR447_3\tTR447_3\nTR499_1\tTR499_1\nTR499_1\tTR499_2\nTR499_2\tTR499_1\nTR499_2\tTR499_2", "result_hash": "74527154f29c4dc8e482df673a0fedd1", "num_rows": 24}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR000_1_2' UNION SELECT T.element FROM atom AS T WHERE T.atom_id = (SELECT T2.atom_id FROM connected AS T2 WHERE T2.bond_id = 'TR000_1_2' EXCEPT SELECT T1.atom_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id2 = T2.atom_id WHERE T2.bond_id = 'TR000_1_2')": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.atom_id2", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN atom AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-'": {"evaluation": "pass: incorrect", "result": "183794", "result_hash": "e535223b964bb695717e7f7d20942885", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'": {"evaluation": "pass: correct", "result": "+", "result_hash": "6fe78344019608be59c9698d8e24bf68", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T2.molecule_id, T4.label FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id INNER JOIN molecule AS T4 ON T3.molecule_id = T4.molecule_id WHERE T1.bond_type = '#'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.molecule_id", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id INNER JOIN connected AS T4 ON T1.atom_id = T3.atom_id2 INNER JOIN atom AS T5 ON T4.atom_id = T5.atom_id WHERE SUBSTR(T1.atom_id, 7, 1) = '4' AND T2.label = '+' AND T5.atom_id = T1.molecule_id": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT ROUND(SUM(CASE WHEN T1.element = 'h' THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.atom_id), 2), T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR006'": {"evaluation": "pass: incorrect", "result": "36.170\t+", "result_hash": "0bf17b45854af935aa17ae872403dac3", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT DISTINCT T4.label FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id AND T3.atom_id2 = T2.atom_id2 INNER JOIN bond AS T4 ON T2.bond_id = T4.bond_id INNER JOIN molecule AS T5 ON T4.molecule_id = T5.molecule_id WHERE T1.element = 'ca' AND T5.label = '-'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.label", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT DISTINCT T1.bond_type FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'c'": {"evaluation": "pass: correct", "result": "#\n-\n=\nNone", "result_hash": "84e08cd643344f4bc39ba083bd31039f", "num_rows": 4}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.element AS atom_1, T4.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN connected AS T3 ON T2.bond_id = T3.bond_id INNER JOIN atom AS T4 ON T3.atom_id2 = T4.atom_id WHERE T2.bond_id = 'TR001_10_11'": {"evaluation": "pass: incorrect", "result": "c\tc\nc\to\no\tc\no\to", "result_hash": "6278b9e1faeec117f44d95358063df30", "num_rows": 4}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT CAST(COUNT(CASE WHEN T2.bond_type = '#' THEN T1.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id": {"evaluation": "pass: incorrect", "result": "0.055", "result_hash": "758895c71fa84827b3f1439468df1c71", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T1.bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR047'": {"evaluation": "pass: correct", "result": "21.429", "result_hash": "6b3022780caef9a13fc245d441088182", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT CASE WHEN T1.label = '+' THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.atom_id2 = 'TR001_1' INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id": {"evaluation": "error: <error>", "result": "Execution error: near \"INNER\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT CASE WHEN T1.label = '+' THEN 'Yes' ELSE 'No' END FROM molecule AS T1 WHERE T1.molecule_id = 'TR151'": {"evaluation": "pass: incorrect", "result": "No", "result_hash": "ec32724316a298423469b49e09e6610c", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T2.element FROM atom AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id INNER JOIN atom AS T2 ON T1.bond_id = T2.bond_id WHERE T3.molecule_id = 'TR151'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.bond_id", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(T1.molecule_id) FROM molecule AS T1 WHERE T1.label = '+'": {"evaluation": "pass: correct", "result": "152", "result_hash": "0c3909be7f2ddf2c06df2e49eed30185", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id BETWEEN 'TR010' AND 'TR050' AND T1.element = 'c'": {"evaluation": "pass: incorrect", "result": "TR010_11\nTR010_6\nTR010_7\nTR010_8\nTR011_1\nTR011_10\nTR011_11\nTR011_12\nTR011_2\nTR011_5\nTR011_6\nTR011_7\nTR011_8\nTR011_9\nTR012_1\nTR012_12\nTR012_13\nTR012_14\nTR012_15\nTR012_16\nTR012_17\nTR012_18\nTR012_2\nTR012_3\nTR012_4\nTR012_5\nTR014_1\nTR014_2\nTR014_3\nTR014_4\nTR014_5\nTR014_6\nTR015_10\nTR015_12\nTR015_13\nTR015_14\nTR015_15\nTR015_16\nTR015_2\nTR015_7\nTR015_8\nTR017_1\nTR017_13\nTR017_16\nTR017_17\nTR017_18\nTR017_19\nTR017_2\nTR017_3\nTR017_4\nTR017_5\nTR017_6\nTR017_7\nTR019_1\nTR019_10\nTR019_11\nTR019_12\nTR019_13\nTR019_16\nTR019_4\nTR019_5\nTR019_6\nTR019_7\nTR019_8\nTR019_9\nTR020_10\nTR020_11\nTR020_12\nTR020_13\nTR020_14\nTR020_15\nTR020_4\nTR020_5\nTR020_6\nTR020_7\nTR020_8\nTR020_9\nTR021_1\nTR021_10\nTR021_11\nTR021_12\nTR021_2\nTR021_27\nTR021_28\nTR021_29\nTR021_3\nTR021_30\nTR021_31\nTR021_32\nTR021_33\nTR021_34\nTR021_35\nTR021_36\nTR021_37\nTR021_38\nTR021_4\nTR021_5\nTR021_6\nTR021_7\nTR021_8\nTR021_9\nTR022_1\nTR022_10\nTR022_11\nTR022_12\nTR022_2\nTR022_3\nTR022_4\nTR022_5\nTR022_6\nTR022_7\nTR022_8\nTR022_9\nTR023_1\nTR023_11\nTR023_4\nTR023_5\nTR023_8\nTR023_9\nTR024_1\nTR024_14\nTR024_15\nTR024_16\nTR024_17\nTR024_18\nTR024_19\nTR024_3\nTR024_4\nTR024_6\nTR025_1\nTR025_2\nTR025_3\nTR025_4\nTR025_5\nTR025_6\nTR025_7\nTR028_1\nTR028_2\nTR028_3\nTR029_10\nTR029_11\nTR029_12\nTR029_14\nTR029_16\nTR029_17\nTR029_18\nTR029_19\nTR029_20\nTR029_4\nTR029_5\nTR029_6\nTR029_7\nTR029_8\nTR029_9\nTR030_11\nTR030_12\nTR030_13\nTR030_14\nTR030_15\nTR030_16\nTR030_17\nTR030_19\nTR030_2\nTR030_22\nTR030_25\nTR030_27\nTR030_28\nTR030_29\nTR030_3\nTR030_30\nTR030_31\nTR030_32\nTR030_33\nTR030_34\nTR030_37\nTR030_39\nTR030_4\nTR030_40\nTR030_41\nTR030_42\nTR030_43\nTR030_44\nTR030_5\nTR030_7\nTR030_8\nTR030_9\nTR031_10\nTR031_13\nTR031_14\nTR031_15\nTR031_16\nTR031_17\nTR031_18\nTR031_2\nTR031_5\nTR031_6\nTR031_7\nTR031_8\nTR032_1\nTR032_10\nTR032_11\nTR032_13\nTR032_4\nTR032_8\nTR032_9\nTR033_11\nTR033_12\nTR033_13\nTR033_14\nTR033_15\nTR033_16\nTR033_6\nTR033_7\nTR033_8\nTR033_9\nTR034_1\nTR034_14\nTR034_15\nTR034_16\nTR034_17\nTR034_18\nTR034_19\nTR034_2\nTR034_20\nTR034_3\nTR034_4\nTR034_5\nTR034_6\nTR035_1\nTR035_10\nTR035_11\nTR035_12\nTR035_13\nTR035_14\nTR035_15\nTR035_16\nTR035_17\nTR035_2\nTR035_20\nTR035_21\nTR035_3\nTR035_4\nTR035_8\nTR035_9\nTR036_1\nTR036_2\nTR036_3\nTR036_4\nTR036_5\nTR036_6\nTR036_7\nTR039_1\nTR039_10\nTR039_11\nTR039_12\nTR039_13\nTR039_15\nTR039_17\nTR039_19\nTR039_20\nTR039_21\nTR039_23\nTR039_24\nTR039_25\nTR039_27\nTR039_28\nTR039_29\nTR039_3\nTR039_4\nTR039_5\nTR039_6\nTR039_7\nTR040_1\nTR040_11\nTR040_13\nTR040_15\nTR040_17\nTR040_2\nTR040_20\nTR040_3\nTR040_4\nTR040_5\nTR040_6\nTR040_7\nTR040_9\nTR041_1\nTR041_2\nTR041_3\nTR041_4\nTR041_5\nTR041_6\nTR041_7\nTR041_8\nTR045_11\nTR045_12\nTR045_13\nTR045_14\nTR045_15\nTR045_17\nTR045_5\nTR045_6\nTR045_7\nTR045_8\nTR046_1\nTR046_11\nTR046_4\nTR046_5\nTR046_6\nTR046_7\nTR046_8\nTR046_9\nTR047_10\nTR047_11\nTR047_12\nTR047_13\nTR047_2\nTR047_3\nTR047_4\nTR047_5\nTR047_6\nTR047_7\nTR047_8\nTR047_9\nTR048_1\nTR048_4\nTR048_5\nTR048_7\nTR048_8\nTR049_10\nTR049_11\nTR049_12\nTR049_13\nTR049_15\nTR049_18\nTR049_19\nTR049_2\nTR049_20\nTR049_21\nTR049_22\nTR049_23\nTR049_24\nTR049_3\nTR049_4\nTR049_5\nTR049_6\nTR049_7\nTR049_8\nTR049_9\nTR050_1\nTR050_11\nTR050_12\nTR050_14\nTR050_17\nTR050_18\nTR050_19\nTR050_2\nTR050_20\nTR050_21\nTR050_22\nTR050_3\nTR050_4\nTR050_5\nTR050_6", "result_hash": "1c6fa20cf663044b9e7f6403d774073c", "num_rows": 363}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'": {"evaluation": "pass: correct", "result": "3692", "result_hash": "bc501d39ccc513b611951394cb9482f4", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.bond_type = '='": {"evaluation": "pass: correct", "result": "TR001_10_11\nTR006_11_13\nTR006_27_29\nTR006_30_32\nTR006_33_35\nTR006_5_7\nTR006_8_10\nTR019_10_12\nTR019_1_3\nTR019_4_6\nTR019_7_11\nTR020_10_14\nTR020_12_15\nTR020_1_2\nTR020_1_3\nTR020_4_6\nTR020_5_8\nTR020_7_11\nTR020_9_13\nTR029_11_15\nTR029_14_16\nTR029_17_19\nTR029_18_20\nTR029_1_3\nTR029_4_5\nTR029_6_10\nTR029_7_12\nTR029_8_13\nTR039_23_26\nTR039_25_27\nTR039_3_6\nTR039_4_8\nTR041_1_2\nTR041_3_4\nTR041_5_6\nTR047_10_13\nTR047_2_4\nTR047_3_6\nTR047_5_9\nTR047_7_11\nTR047_8_12\nTR049_11_18\nTR049_12_19\nTR049_2_4\nTR049_3_6\nTR049_5_10\nTR049_7_13\nTR049_8_15\nTR049_9_16\nTR053_1_3\nTR053_4_6\nTR053_7_8\nTR054_10_12\nTR054_1_3\nTR054_4_5\nTR054_6_9\nTR054_7_11\nTR063_2_3\nTR063_4_7\nTR063_6_8\nTR072_11_15\nTR072_16_17\nTR072_18_20\nTR072_19_21\nTR072_3_6\nTR072_7_12\nTR084_1_2\nTR084_21_24\nTR084_21_25\nTR084_3_4\nTR084_5_6\nTR085_1_2\nTR085_3_4\nTR085_5_6\nTR089_1_2\nTR089_3_4\nTR089_5_6\nTR092_11_14\nTR092_3_5\nTR092_4_7\nTR092_6_10\nTR092_8_12\nTR092_9_13\nTR093_10_14\nTR093_12_15\nTR093_4_6\nTR093_5_8\nTR093_7_11\nTR093_9_13\nTR094_1_2\nTR094_3_4\nTR094_5_6\nTR094_9_10\nTR095_3_4\nTR095_5_6\nTR095_7_8\nTR099_10_14\nTR099_12_15\nTR099_1_2\nTR099_3_5\nTR099_4_7\nTR099_6_11\nTR099_8_13\nTR100_1_2\nTR100_3_4\nTR100_5_6\nTR100_8_9\nTR105_3_4\nTR105_5_7\nTR105_6_9\nTR111_10_16\nTR111_13_18\nTR111_1_2\nTR111_3_5\nTR111_4_7\nTR111_6_12\nTR111_8_14\nTR111_9_15\nTR115_10_11\nTR115_2_6\nTR118_11_15\nTR118_1_3\nTR118_4_5\nTR118_6_9\nTR118_7_10\nTR118_8_12\nTR127_10_11\nTR127_1_2\nTR127_3_4\nTR127_5_6\nTR128_11_12\nTR128_15_16\nTR128_16_17\nTR128_18_19\nTR128_19_20\nTR128_1_3\nTR128_2_8\nTR128_4_5\nTR128_6_7\nTR128_9_10\nTR130_1_2\nTR130_3_4\nTR130_5_6\nTR140_4_5\nTR142_3_4\nTR142_5_8\nTR142_7_9\nTR144_10_15\nTR144_12_17\nTR144_1_2\nTR144_3_5\nTR144_4_7\nTR144_6_11\nTR144_8_13\nTR144_9_14\nTR149_1_4\nTR153_1_2\nTR153_3_4\nTR153_5_6\nTR154_11_12\nTR154_13_14\nTR154_1_2\nTR154_3_5\nTR154_4_10\nTR154_6_7\nTR154_8_9\nTR155_1_2\nTR155_3_4\nTR155_5_6\nTR160_1_2\nTR160_3_4\nTR160_5_6\nTR162_1_2\nTR162_3_4\nTR162_5_6\nTR164_10_14\nTR164_12_15\nTR164_2_5\nTR164_3_6\nTR164_4_8\nTR164_7_11\nTR164_9_13\nTR181_11_14\nTR181_1_2\nTR181_3_5\nTR181_4_7\nTR181_6_10\nTR181_8_12\nTR181_9_13\nTR186_10_13\nTR186_2_4\nTR186_3_6\nTR186_5_9\nTR186_7_11\nTR186_8_12\nTR190_10_13\nTR190_14_15\nTR190_2_4\nTR190_3_6\nTR190_5_9\nTR190_7_11\nTR190_8_12\nTR193_1_2\nTR193_22_37\nTR193_24_33\nTR193_25_26\nTR193_27_28\nTR193_29_30\nTR193_3_4\nTR193_5_6\nTR193_8_9\nTR196_11_13\nTR196_12_14\nTR196_15_16\nTR196_17_18\nTR196_1_2\nTR196_3_4\nTR196_5_6\nTR196_7_8\nTR205_10_13\nTR205_2_4\nTR205_3_6\nTR205_5_9\nTR205_7_11\nTR205_8_12\nTR207_10_11\nTR207_12_13\nTR207_1_2\nTR207_3_5\nTR207_6_7\nTR207_8_9\nTR209_11_12\nTR209_13_14\nTR209_1_2\nTR209_4_5\nTR209_7_8\nTR209_9_10\nTR216_7_9\nTR217_1_2\nTR217_3_4\nTR217_5_6\nTR217_7_9\nTR217_8_10\nTR222_10_11\nTR222_12_13\nTR222_14_15\nTR222_16_18\nTR222_1_2\nTR222_3_4\nTR222_5_6\nTR222_7_9\nTR225_12_13\nTR225_14_15\nTR225_16_17\nTR225_18_19\nTR225_1_8\nTR225_22_23\nTR225_22_24\nTR225_2_3\nTR225_38_45\nTR225_39_40\nTR225_41_42\nTR225_43_44\nTR225_46_47\nTR225_49_50\nTR225_4_5\nTR225_51_52\nTR225_53_54\nTR225_55_56\nTR225_59_60\nTR225_59_61\nTR225_6_7\nTR225_9_10\nTR226_10_17\nTR226_13_18\nTR226_16_19\nTR226_1_2\nTR226_3_5\nTR226_4_7\nTR226_6_12\nTR226_8_14\nTR226_9_15\nTR234_1_2\nTR234_4_5\nTR234_5_6\nTR238_15_17\nTR238_4_5\nTR245_2_3\nTR245_4_6\nTR245_5_8\nTR248_10_11\nTR248_12_13\nTR248_2_9\nTR248_3_4\nTR248_5_6\nTR248_7_8\nTR253_4_6\nTR253_9_10\nTR257_3_5\nTR257_6_10\nTR257_9_12\nTR259_1_4\nTR259_3_6\nTR266_10_12\nTR266_2_5\nTR266_3_6\nTR266_7_11\nTR269_1_3\nTR278_2_3\nTR278_4_8\nTR278_6_9\nTR285_11_12\nTR285_13_14\nTR285_16_17\nTR285_18_19\nTR285_1_2\nTR285_3_15\nTR285_4_10\nTR285_5_6\nTR285_7_20\nTR285_8_9\nTR289_1_2\nTR289_3_4\nTR289_5_6\nTR291_6_9\nTR291_7_10\nTR299_10_18\nTR299_13_20\nTR299_1_2\nTR299_3_5\nTR299_4_7\nTR299_6_12\nTR299_8_15\nTR299_9_16\nTR300_1_4\nTR304_15_18\nTR304_5_12\nTR304_6_13\nTR309_13_20\nTR309_2_4\nTR309_3_6\nTR309_5_11\nTR309_7_15\nTR309_9_17\nTR311_1_2\nTR316_1_2\nTR319_1_2\nTR319_3_4\nTR319_5_6\nTR328_1_4\nTR331_1_2\nTR331_3_5\nTR332_2_3\nTR332_5_6\nTR332_7_9\nTR332_8_10\nTR334_1_3\nTR334_4_5\nTR334_6_8\nTR334_7_10\nTR339_1_3\nTR339_4_5\nTR339_6_8\nTR339_7_10\nTR341_12_13\nTR341_15_16\nTR341_1_2\nTR341_4_8\nTR341_6_10\nTR341_9_14\nTR342_6_9\nTR347_1_2\nTR347_8_9\nTR351_1_2\nTR351_3_4\nTR351_5_6\nTR358_11_17\nTR358_20_22\nTR358_21_24\nTR358_25_27\nTR358_26_28\nTR358_2_3\nTR358_4_7\nTR358_5_8\nTR358_9_13\nTR359_11_15\nTR359_12_16\nTR359_13_14\nTR359_3_4\nTR359_5_8\nTR359_6_10\nTR360_1_2\nTR360_3_4\nTR360_5_6\nTR366_1_2\nTR366_3_4\nTR366_5_6\nTR368_10_14\nTR368_12_16\nTR368_4_6\nTR368_5_8\nTR368_7_11\nTR368_9_13\nTR369_4_5\nTR369_6_8\nTR369_7_9\nTR372_11_12\nTR372_1_3\nTR372_2_8\nTR372_4_5\nTR372_6_7\nTR372_9_10\nTR382_1_2\nTR382_3_4\nTR382_6_7\nTR383_10_17\nTR383_13_19\nTR383_1_2\nTR383_3_5\nTR383_4_7\nTR383_6_12\nTR383_8_14\nTR383_9_15\nTR386_2_6\nTR386_3_8\nTR386_4_10\nTR386_5_12\nTR388_4_6\nTR390_11_12\nTR390_1_3\nTR390_2_8\nTR390_4_5\nTR390_6_7\nTR390_9_10\nTR397_10_15\nTR397_14_18\nTR397_14_19\nTR397_16_21\nTR397_20_24\nTR397_20_25\nTR397_22_28\nTR397_27_30\nTR397_2_3\nTR397_31_32\nTR397_33_35\nTR397_34_37\nTR397_39_40\nTR397_41_42\nTR397_43_47\nTR397_44_49\nTR397_44_50\nTR397_45_51\nTR397_4_8\nTR397_52_55\nTR397_53_56\nTR397_57_59\nTR397_57_60\nTR397_5_9\nTR397_6_12\nTR397_7_13\nTR398_11_12\nTR398_1_2\nTR398_3_4\nTR398_5_6\nTR398_7_8\nTR398_9_10\nTR402_1_2\nTR402_3_4\nTR405_10_13\nTR405_14_15\nTR405_16_17\nTR405_18_19\nTR405_20_21\nTR405_22_23\nTR405_24_25\nTR405_26_27\nTR405_28_29\nTR405_2_3\nTR405_30_31\nTR405_32_33\nTR405_34_35\nTR405_36_37\nTR405_38_39\nTR405_40_41\nTR405_42_43\nTR405_44_46\nTR405_44_47\nTR405_48_50\nTR405_48_51\nTR405_4_5\nTR405_6_7\nTR405_8_11\nTR405_8_12\nTR407_10_18\nTR407_13_19\nTR407_14_21\nTR407_17_22\nTR407_1_2\nTR407_3_5\nTR407_4_7\nTR407_6_12\nTR407_8_15\nTR407_9_16\nTR409_11_12\nTR409_13_14\nTR409_15_16\nTR409_1_2\nTR409_3_4\nTR409_5_6\nTR409_7_20\nTR409_8_9\nTR414_1_2\nTR414_3_4\nTR414_5_6\nTR416_3_4\nTR416_5_8\nTR416_6_9\nTR416_7_11\nTR422_1_2\nTR422_3_4\nTR422_5_6\nTR422_7_8\nTR422_9_11\nTR423_1_2\nTR423_5_7\nTR423_8_10\nTR423_9_11\nTR430_11_50\nTR430_11_51\nTR430_12_47\nTR430_12_48\nTR430_15_16\nTR430_17_18\nTR430_19_20\nTR430_1_2\nTR430_21_22\nTR430_24_29\nTR430_25_26\nTR430_27_28\nTR430_30_31\nTR430_32_33\nTR430_34_53\nTR430_34_54\nTR430_35_56\nTR430_35_57\nTR430_38_39\nTR430_3_4\nTR430_40_41\nTR430_42_43\nTR430_44_45\nTR430_5_6\nTR430_7_8\nTR430_9_10\nTR448_4_5\nTR450_1_2\nTR456_2_4\nTR456_3_5\nTR456_6_10\nTR456_9_13\nTR457_10_14\nTR457_11_15\nTR457_13_16\nTR457_17_18\nTR457_19_20\nTR457_1_3\nTR457_1_4\nTR457_21_23\nTR457_22_25\nTR457_24_26\nTR457_5_7\nTR457_6_9\nTR457_8_12\nTR458_15_19\nTR458_1_2\nTR458_20_21\nTR458_22_23\nTR458_3_4\nTR458_5_6\nTR458_7_9\nTR458_8_11\nTR463_12_17\nTR463_13_14\nTR463_15_16\nTR463_18_19\nTR463_1_2\nTR463_20_21\nTR463_3_4\nTR463_5_6\nTR463_7_8\nTR463_9_10\nTR465_10_11\nTR465_12_13\nTR465_14_15\nTR465_16_24\nTR465_18_19\nTR465_20_21\nTR465_2_4\nTR465_3_9\nTR465_5_6\nTR465_7_8\nTR466_3_4\nTR466_5_7\nTR466_6_8\nTR467_1_2\nTR467_3_4\nTR470_1_2\nTR470_3_4\nTR470_5_6\nTR482_3_4\nTR482_6_7\nTR483_1_2\nTR483_3_4\nTR483_5_6\nTR486_1_2\nTR486_4_5\nTR487_1_2\nTR491_12_13\nTR491_3_4\nTR491_5_8\nTR491_7_10\nTR494_10_16\nTR494_11_12\nTR494_13_14\nTR494_1_2\nTR494_3_4\nTR494_5_6\nTR494_7_15\nTR494_8_9\nTR496_1_22\nTR496_23_25\nTR496_34_35\nTR496_39_41\nTR496_42_44\nTR496_5_26", "result_hash": "ec441535e8378564fb095ad6da25f588", "num_rows": 634}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' AND T2.label = '+'": {"evaluation": "pass: correct", "result": "1569", "result_hash": "d3ff5016ca4135df154c1fdad5bfe426", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.molecule_id FROM connected AS T2 INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id INNER JOIN bond AS T1 ON T2.bond_id = T1.bond_id WHERE T3.atom_id = 'TR000_1'": {"evaluation": "pass: incorrect", "result": "TR000", "result_hash": "d18c5dfc70eee4cec7c55725aa71ad03", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'": {"evaluation": "pass: incorrect", "result": "TR002\nTR004\nTR007\nTR008\nTR009\nTR010\nTR011\nTR012\nTR014\nTR015\nTR017\nTR021\nTR022\nTR023\nTR024\nTR025\nTR030\nTR031\nTR032\nTR033\nTR034\nTR035\nTR036\nTR040\nTR045\nTR046\nTR048\nTR050\nTR051\nTR056\nTR059\nTR060\nTR061\nTR064\nTR066\nTR068\nTR071\nTR073\nTR074\nTR077\nTR078\nTR082\nTR083\nTR090\nTR091\nTR096\nTR098\nTR101\nTR102\nTR103\nTR104\nTR107\nTR109\nTR110\nTR112\nTR113\nTR114\nTR117\nTR120\nTR121\nTR122\nTR123\nTR124\nTR125\nTR126\nTR129\nTR131\nTR132\nTR133\nTR134\nTR135\nTR136\nTR137\nTR138\nTR139\nTR141\nTR143\nTR145\nTR146\nTR147\nTR148\nTR150\nTR151\nTR156\nTR157\nTR158\nTR159\nTR161\nTR163\nTR165\nTR166\nTR168\nTR169\nTR171\nTR172\nTR173\nTR174\nTR175\nTR177\nTR178\nTR179\nTR180\nTR183\nTR184\nTR185\nTR187\nTR191\nTR192\nTR195\nTR200\nTR203\nTR204\nTR208\nTR211\nTR212\nTR214\nTR219\nTR220\nTR223\nTR228\nTR233\nTR235\nTR236\nTR247\nTR255\nTR263\nTR272\nTR275\nTR276\nTR281\nTR282\nTR284\nTR293\nTR305\nTR307\nTR312\nTR314\nTR322\nTR330\nTR333\nTR335\nTR336\nTR343\nTR344\nTR348\nTR352\nTR353\nTR354\nTR357\nTR370\nTR371\nTR373\nTR377\nTR378\nTR379\nTR387\nTR394\nTR395\nTR396\nTR401\nTR403\nTR406\nTR412\nTR424\nTR425\nTR427\nTR431\nTR433\nTR435\nTR437\nTR438\nTR439\nTR442\nTR445\nTR446\nTR455\nTR459\nTR461\nTR464\nTR472\nTR473\nTR477\nTR478\nTR480\nTR481\nTR484\nTR490\nTR493\nTR501", "result_hash": "6d222277751e9e8d2389191531f438c5", "num_rows": 189}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT cast(SUM(CASE WHEN T1.element = 'h' AND m.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(DISTINCT T1.molecule_id) AS percentage FROM atom AS T1 INNER JOIN molecule AS m ON T1.molecule_id = m.molecule_id": {"evaluation": "pass: incorrect", "result": "457.434", "result_hash": "c28459e03dccc58b3419b1406bd29e07", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT EXISTS(\n  SELECT 1 \n  FROM molecule AS T1 \n  INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id \n  WHERE T2.molecule_id = 'TR124' AND T1.label = '+'\n)": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.atom_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.atom_id2 IN (SELECT atom_id FROM connected WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') AND atom_id = ( SELECT atom_id FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE molecule_id = 'TR186')) )": {"evaluation": "pass: incorrect", "result": "TR186_2\nTR186_20\nTR186_21\nTR186_3", "result_hash": "97ff57449d324a4d04abb5c1d1201f8b", "num_rows": 4}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT info FROM bond WHERE bond_id LIKE 'TR007_4_%'": {"evaluation": "error: <error>", "result": "Execution error: no such column: info", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_2_4'": {"evaluation": "pass: correct", "result": "c", "result_hash": "e6d55ec92ecc8f3b6020bbf39e221954", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(T2.bond_id), T1.label FROM molecule AS T1 INNER JOIN atom AS T3 ON T1.molecule_id = T3.molecule_id INNER JOIN connected AS T2 ON T3.atom_id = T2.atom_id WHERE T2.atom_id = 'TR000_2' AND T2.atom_id2 = 'TR000_4' AND T1.label = '-'": {"evaluation": "pass: incorrect", "result": "0\tNone", "result_hash": "7b62ff56c160b66af9c50d3afccee225", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT DISTINCT T1.molecule_id, T1.label, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.label", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T2.bond_type, T1.atom_id, T3.atom_id2 FROM bond AS T2 INNER JOIN connected AS T1 ON T2.bond_id = T1.bond_id INNER JOIN atom AS T3 ON T1.atom_id2 = T3.atom_id WHERE T2.bond_type = '-'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.atom_id2", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#'": {"evaluation": "pass: incorrect", "result": "c\ncl\nh\nn\np\ny", "result_hash": "57e2e65a6e757715e72ee5f5036e4eb3", "num_rows": 6}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id INNER JOIN connected AS T3 ON T3.bond_id = T2.bond_id AND T3.atom_id2 = T1.atom_id WHERE T3.bond_id = 'TR000_2_3": {"evaluation": "error: <error>", "result": "Execution error: unrecognized token: \"'TR000_2_3\"", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id AND T2.element = 'cl' INNER JOIN atom AS T3 ON T1.bond_id LIKE CONCAT(T2.atom_id, '_', T3.atom_id) AND T3.element = 'cl'": {"evaluation": "error: <error>", "result": "Execution error: no such function: CONCAT", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.atom_id, T3.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN connected AS T3 ON T2.atom_id2 = T3.atom_id INNER JOIN bond AS T4 ON T2.bond_id = T4.bond_id INNER JOIN molecule AS T5 ON T4.molecule_id = T5.molecule_id WHERE T5.molecule_id = 'TR346' GROUP BY T1.atom_id": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.bond_type", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(DISTINCT T1.molecule_id), COUNT(molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T2.molecule_id = T1.molecule_id WHERE T1.bond_type = '=' AND T2.label = '+'": {"evaluation": "error: <error>", "result": "Execution error: ambiguous column name: molecule_id", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id NOT IN (SELECT molecule_id FROM atom WHERE element = 's' AND molecule_id = T1.molecule_id) AND T2.bond_type != '='": {"evaluation": "pass: incorrect", "result": "6034", "result_hash": "57db7bb1c1fed43a8eb60ae57ab77a71", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.label FROM atom AS T2 INNER JOIN connected AS T3 ON T2.atom_id = T3.atom_id INNER JOIN bond AS T4 ON T4.bond_id = T3.bond_id INNER JOIN molecule AS T1 ON T1.molecule_id = T4.molecule_id WHERE T2.atom_id = 'TR000_2' AND T3.atom_id2 = 'TR000_4'": {"evaluation": "pass: correct", "result": "+", "result_hash": "6fe78344019608be59c9698d8e24bf68", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(atom_id) FROM atom WHERE molecule_id = 'TR001'": {"evaluation": "pass: correct", "result": "21", "result_hash": "67b696deaf5ace8fcfe0c2befb5dd5d4", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(bond_id) FROM bond WHERE bond_type = '-'": {"evaluation": "pass: correct", "result": "10528", "result_hash": "2100ecf13168575447a002ce24ab2cbc", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT DISTINCT T1.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.label", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T1.element = 'c' AND T3.atom_id2 IN (SELECT atom_id FROM atom WHERE element = 'c' AND atom_id NOT LIKE '%3')": {"evaluation": "pass: incorrect", "result": "+\n-", "result_hash": "8a588366b2abd7deff5288cc74fad5a5", "num_rows": 2}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT CAST(SUM(IIF(T1.element = 'cl' AND T2.label = '+', 1, 0)) AS REAL) * 100 / COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id": {"evaluation": "pass: incorrect", "result": "33.819", "result_hash": "7362b9b1ae248d062976a8be9e334263", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T3.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id2 = T3.atom_id WHERE T1.bond_id = 'TR001_1_7'": {"evaluation": "pass: correct", "result": "TR001", "result_hash": "4d1a34c05f2717a383a0f92f6e712f15", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.atom_id2 IN (SELECT atom_id FROM atom WHERE molecule_id = (SELECT molecule_id FROM bond WHERE molecule_id = 'TR001' AND M.SUBSTR(bond_id, INSTR(bond_id, '_') + 1, LEN(bond_id)) = '3_4'))": {"evaluation": "error: <error>", "result": "Execution error: near \"(\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T2.bond_type \nFROM connected AS T1 \nINNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id \nWHERE T1.atom_id = 'TR000_1' AND T1.atom_id2 = 'TR000_2'": {"evaluation": "pass: correct", "result": "-", "result_hash": "2bed14e7a8d1ef972e9df24f73c11cba", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.molecule_id FROM atom AS T1 WHERE T1.atom_id = 'TR000_2' UNION SELECT T1.molecule_id FROM atom AS T1 WHERE T1.atom_id = 'TR000_4'": {"evaluation": "pass: correct", "result": "TR000", "result_hash": "d18c5dfc70eee4cec7c55725aa71ad03", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT element FROM atom WHERE atom_id = 'TR000_1'": {"evaluation": "pass: correct", "result": "cl", "result_hash": "af1d022d8fca6072f62fb658473c7810", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT CASE WHEN T1.label = '+' THEN 'carcinogenic' ELSE 'non-carcinogenic' END FROM molecule AS T1 WHERE T1.molecule_id = 'TR000'": {"evaluation": "pass: incorrect", "result": "carcinogenic", "result_hash": "600acb5388f1ce444382fa348bdd20b6", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T3.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.bond_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id2 INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id": {"evaluation": "pass: correct", "result": "85.047", "result_hash": "36c6766d227bfa2ce73effab93a25c48", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'n' AND T2.label = '+'": {"evaluation": "pass: incorrect", "result": "164", "result_hash": "21f33478e82deaa464abcb237d4676be", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T2.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T2.bond_id = T3.bond_id INNER JOIN atom AS T4 ON T3.atom_id2 = T4.atom_id WHERE T1.element = 's' AND T2.bond_type = '='": {"evaluation": "pass: correct", "result": "TR004\nTR015\nTR018\nTR020\nTR024\nTR031\nTR045\nTR046\nTR047\nTR050\nTR051\nTR053\nTR056\nTR057\nTR062\nTR069\nTR070\nTR084\nTR096\nTR101\nTR102\nTR103\nTR113\nTR115\nTR124\nTR126\nTR129\nTR132\nTR135\nTR136\nTR137\nTR138\nTR146\nTR148\nTR149\nTR151\nTR152\nTR157\nTR166\nTR172\nTR192\nTR208\nTR211\nTR220\nTR225\nTR234\nTR238\nTR268\nTR296\nTR307\nTR318\nTR332\nTR335\nTR336\nTR356\nTR357\nTR387\nTR388\nTR395\nTR397\nTR405\nTR412\nTR425\nTR430\nTR435\nTR457\nTR464\nTR501", "result_hash": "3ae219eb4cb1f965269ce10cdb3b4213", "num_rows": 68}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' AND T2.atom_id IN (SELECT T3.atom_id FROM atom AS T3 WHERE atom_id2 IN (SELECT T5.atom_id FROM atom AS T5 WHERE molecule_id IN (SELECT molecule_id FROM atom GROUP BY molecule_id HAVING COUNT(atom_id) > 5) ))": {"evaluation": "error: <error>", "result": "Execution error: no such column: atom_id2", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T2.molecule_id = T3.bond_id INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T2.bond_type = '=' AND T1.molecule_id = 'TR024'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T3.molecule_id FROM atom AS T1 INNER JOIN connected AS T4 ON T1.atom_id = T4.atom_id WHERE T4.atom_id2 IS NOT NULL AND T1.molecule_id IN (SELECT T2.molecule_id FROM atom AS T2 GROUP BY T2.molecule_id ORDER BY COUNT(T2.atom_id) DESC LIMIT 1) INTERSECT SELECT T2.molecule_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.molecule_id", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / ( SELECT COUNT(molecule_id) FROM atom WHERE element = 'h' ) FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id INNER JOIN connected AS T3 ON T2.atom_id2 = T3.atom_id2 INNER JOIN bond AS T4 ON T3.bond_id = T4.bond_id WHERE T2.element = 'h' AND T4.bond_type = '#'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.label", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(molecule_id) AS num_carbonic FROM molecule WHERE label = '+'": {"evaluation": "pass: correct", "result": "152", "result_hash": "0c3909be7f2ddf2c06df2e49eed30185", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T2.molecule_id = T1.molecule_id WHERE T2.molecule_id BETWEEN 'TR004' AND 'TR010' AND T1.bond_type = '-'": {"evaluation": "pass: incorrect", "result": "145", "result_hash": "b54a8e74fe4777bcd0788c103aeb8442", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR008' AND T1.element = 'c'": {"evaluation": "pass: correct", "result": "10", "result_hash": "4ffa6e1ce76a0af5e8657a638fbded6b", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T2.element FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.atom_id = 'TR004_7' AND T1.label = '-'": {"evaluation": "pass: correct", "result": "c", "result_hash": "e6d55ec92ecc8f3b6020bbf39e221954", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.bond_type = '='": {"evaluation": "pass: correct", "result": "273", "result_hash": "fad6745d57e745079d0d751ffb6c6fc3", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT COUNT(T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '-'": {"evaluation": "pass: incorrect", "result": "2", "result_hash": "7c93d02a40ebc670ae8becd4afb910e0", "num_rows": 1}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.element, T3.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id2 LEFT JOIN bond AS T4 ON T3.bond_id = T4.bond_id INNER JOIN molecule AS T5 ON T4.molecule_id = T5.molecule_id WHERE T5.molecule_id = 'TR002' GROUP BY T1.element ORDER BY T1.element": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.bond_type", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecular AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id INNER JOIN bond AS T4 ON T3.bond_id = T4.bond_id WHERE T1.element = 'c' AND T2.molecule_id = 'TR012' AND T4.bond_type = '='": {"evaluation": "error: <error>", "result": "Execution error: no such table: molecular", "result_hash": "", "num_rows": 0}, "data/test_databases/toxicology/toxicology.sqlite<$$|||$$>SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.label = '+'": {"evaluation": "pass: correct", "result": "TR001_11\nTR006_10\nTR006_12\nTR006_13\nTR006_28\nTR006_29\nTR006_31\nTR006_32\nTR006_34\nTR006_35\nTR006_45\nTR006_6\nTR006_7\nTR006_9\nTR019_3\nTR020_2\nTR020_3\nTR029_13\nTR029_15\nTR029_2\nTR029_3\nTR039_14\nTR039_16\nTR039_18\nTR039_2\nTR039_22\nTR039_26\nTR039_8\nTR049_14\nTR049_16\nTR049_17\nTR053_2\nTR053_3\nTR054_12\nTR054_13\nTR054_2\nTR054_3\nTR072_13\nTR076_2\nTR076_3\nTR076_4\nTR076_5\nTR080_3\nTR080_6\nTR081_2\nTR081_3\nTR081_4\nTR081_5\nTR084_22\nTR084_23\nTR084_24\nTR084_25\nTR084_7\nTR089_8\nTR094_10\nTR094_11\nTR094_7\nTR100_10\nTR100_9\nTR105_1\nTR111_1\nTR111_15\nTR118_2\nTR118_3\nTR127_11\nTR127_12\nTR127_8\nTR128_13\nTR128_17\nTR128_20\nTR128_21\nTR140_1\nTR140_5\nTR142_1\nTR144_1\nTR144_14\nTR155_7\nTR164_5\nTR181_2\nTR190_15\nTR193_23\nTR193_31\nTR193_32\nTR193_33\nTR193_34\nTR193_35\nTR193_36\nTR193_37\nTR193_38\nTR196_10\nTR196_13\nTR205_1\nTR207_1\nTR207_14\nTR207_4\nTR207_7\nTR209_3\nTR209_6\nTR216_10\nTR216_9\nTR217_10\nTR217_11\nTR217_12\nTR217_9\nTR222_18\nTR222_19\nTR225_11\nTR225_23\nTR225_24\nTR225_25\nTR225_48\nTR225_60\nTR225_61\nTR225_62\nTR226_11\nTR253_5\nTR253_6\nTR257_1\nTR257_11\nTR257_16\nTR257_8\nTR259_2\nTR259_4\nTR266_5\nTR267_4\nTR287_1\nTR287_3\nTR287_4\nTR291_10\nTR298_10\nTR298_2\nTR298_3\nTR298_4\nTR299_1\nTR299_16\nTR304_13\nTR304_14\nTR304_18\nTR304_19\nTR309_1\nTR323_2\nTR323_3\nTR323_5\nTR328_2\nTR328_4\nTR329_5\nTR331_4\nTR331_5\nTR334_2\nTR334_3\nTR334_9\nTR339_11\nTR339_2\nTR339_3\nTR341_10\nTR341_14\nTR341_16\nTR341_17\nTR341_7\nTR342_2\nTR342_3\nTR342_4\nTR342_5\nTR358_12\nTR358_13\nTR358_14\nTR358_17\nTR358_22\nTR358_23\nTR359_1\nTR359_16\nTR359_7\nTR359_9\nTR362_10\nTR362_3\nTR366_7\nTR366_8\nTR368_13\nTR368_16\nTR368_17\nTR369_3\nTR372_15\nTR372_17\nTR374_2\nTR374_5\nTR382_5\nTR382_7\nTR383_1\nTR383_15\nTR386_10\nTR386_11\nTR386_12\nTR386_13\nTR386_6\nTR386_7\nTR386_8\nTR386_9\nTR391_2\nTR391_3\nTR391_4\nTR391_5\nTR397_1\nTR397_17\nTR397_18\nTR397_19\nTR397_23\nTR397_24\nTR397_25\nTR397_26\nTR397_36\nTR397_46\nTR397_48\nTR397_49\nTR397_50\nTR397_58\nTR397_59\nTR397_60\nTR400_6\nTR402_5\nTR405_11\nTR405_12\nTR405_45\nTR405_46\nTR405_47\nTR405_49\nTR405_50\nTR405_51\nTR405_52\nTR405_9\nTR407_11\nTR407_19\nTR407_20\nTR409_10\nTR409_17\nTR409_18\nTR409_19\nTR409_20\nTR409_21\nTR409_22\nTR414_7\nTR416_1\nTR416_10\nTR416_9\nTR422_10\nTR422_11\nTR423_1\nTR423_3\nTR430_14\nTR430_23\nTR430_37\nTR430_46\nTR430_47\nTR430_48\nTR430_49\nTR430_50\nTR430_51\nTR430_52\nTR430_53\nTR430_54\nTR430_55\nTR430_56\nTR430_57\nTR430_58\nTR436_1\nTR448_3\nTR448_5\nTR452_8\nTR452_9\nTR457_26\nTR457_27\nTR457_28\nTR457_3\nTR457_4\nTR458_10\nTR458_11\nTR458_12\nTR458_9\nTR463_16\nTR463_17\nTR465_17\nTR465_22\nTR465_23\nTR465_24\nTR475_4\nTR482_2\nTR482_5\nTR483_7\nTR491_1\nTR491_6\nTR494_15\nTR494_16\nTR496_21\nTR496_22\nTR496_24\nTR496_25\nTR496_26\nTR496_33\nTR496_35\nTR496_40\nTR496_41\nTR496_43\nTR496_44\nTR496_46\nTR496_47\nTR496_48\nTR496_6", "result_hash": "0f3fff8c0bfbe3d85421ea1cb9b50cd3", "num_rows": 306}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT DISTINCT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL": {"evaluation": "pass: correct", "result": "10\n1018\n1037\n10446\n1055\n1073\n1083\n1101\n112\n1137\n11388\n11405\n11422\n1144\n11458\n11476\n11493\n11511\n1153\n11547\n11565\n11583\n1160\n11618\n11635\n11652\n1167\n1169\n1186\n12917\n12936\n12955\n12974\n12993\n13010\n13029\n13048\n13067\n13086\n13104\n13123\n13142\n13161\n13180\n13199\n13218\n13237\n13256\n13527\n13546\n13565\n13584\n13602\n13621\n13642\n13661\n13680\n13699\n13718\n13737\n13756\n13775\n13794\n13813\n13832\n13852\n13871\n13890\n13909\n13928\n13947\n13966\n13985\n14004\n14023\n14042\n14061\n14080\n14099\n14118\n14137\n14156\n14175\n14194\n14230\n14249\n14268\n14287\n14306\n14325\n14344\n14363\n148\n16004\n16023\n16042\n16061\n16080\n16099\n16122\n16152\n16171\n16190\n16208\n16227\n16246\n16265\n16284\n16302\n16329\n16350\n16370\n16389\n16409\n16430\n16450\n16471\n16492\n16513\n16591\n16610\n16629\n16648\n16667\n16686\n16704\n16723\n16742\n16761\n16780\n16799\n16817\n16836\n170\n17131\n17150\n17169\n17188\n17207\n17226\n17245\n17264\n17283\n17302\n17321\n17340\n17359\n17378\n17397\n17415\n17434\n17453\n17472\n17491\n17510\n17529\n17762\n17785\n17808\n17830\n17850\n17871\n17894\n17915\n17938\n17960\n17980\n18\n18018\n18037\n18056\n18090\n18141\n18166\n18185\n18203\n18223\n18242\n18261\n18280\n18299\n18317\n18336\n18355\n18374\n18393\n18411\n18430\n18449\n18469\n18489\n18508\n18529\n18549\n18568\n18588\n18608\n18629\n18653\n18674\n18694\n18713\n18732\n18751\n18770\n18789\n18808\n18827\n18846\n18865\n19953\n19972\n19991\n20010\n20029\n20048\n20067\n20086\n20105\n20124\n20143\n20162\n20181\n20200\n20219\n20238\n20257\n20276\n20295\n207\n20791\n20809\n20828\n20847\n20866\n20885\n20904\n20923\n20942\n20961\n20980\n20999\n21017\n21036\n21055\n21074\n21093\n21111\n21130\n21149\n21178\n21197\n21264\n21283\n21301\n21320\n21339\n21358\n21377\n21396\n21414\n21433\n21452\n21471\n21490\n21508\n22035\n22054\n22073\n22092\n22110\n22129\n22148\n22167\n22196\n22214\n2261\n22647\n22664\n22681\n22699\n22716\n22733\n22750\n22768\n22785\n22801\n22819\n22836\n22853\n22870\n22888\n22904\n22921\n22939\n22956\n22973\n22990\n23008\n23025\n23042\n2306\n23077\n23094\n23111\n23129\n23146\n23163\n23180\n23198\n23215\n23232\n2325\n23267\n23284\n23301\n23319\n23336\n23353\n23370\n23388\n23406\n23423\n23440\n23458\n23475\n23492\n2351\n23527\n23544\n23561\n23583\n2360\n23617\n23635\n23652\n23670\n2369\n23707\n23725\n23742\n23760\n23779\n23799\n23818\n23839\n23858\n23875\n23892\n2391\n2408\n24560\n24579\n24598\n24616\n24635\n24654\n24673\n24692\n24710\n24729\n24748\n24767\n24786\n24804\n24823\n24842\n24861\n25059\n25080\n251\n25119\n25138\n25158\n25180\n25199\n25218\n25239\n25259\n25278\n25297\n25318\n25338\n25362\n25389\n25411\n25430\n25449\n25492\n25510\n25529\n25548\n25567\n25586\n25604\n25623\n25642\n25661\n25680\n25699\n25717\n25736\n26067\n26086\n26104\n26123\n26142\n26161\n26180\n26199\n26218\n26237\n26256\n26275\n26294\n26313\n26332\n27255\n27274\n27293\n27312\n27331\n27350\n27369\n27388\n27407\n27426\n27445\n27464\n27483\n27502\n27521\n27540\n27559\n27578\n27597\n27616\n27635\n27654\n27673\n27692\n27711\n27730\n27749\n27768\n27787\n27805\n27824\n27843\n27862\n27881\n279\n27918\n27937\n27956\n27975\n27994\n28012\n28031\n28050\n28069\n28088\n28107\n28126\n28145\n28164\n28183\n28202\n28221\n28240\n28259\n28278\n28297\n28316\n28335\n28354\n28373\n28392\n28411\n28430\n28449\n28468\n28487\n28506\n28525\n28544\n28563\n28582\n28600\n28619\n28638\n28657\n28676\n28695\n28713\n28732\n28751\n28770\n28789\n28808\n28827\n28846\n28865\n28884\n28903\n28922\n28941\n28960\n28979\n28998\n29015\n29034\n29053\n29072\n29091\n29109\n29128\n29147\n29166\n29185\n29219\n29238\n29257\n29276\n29295\n29314\n29333\n29352\n29371\n29390\n29408\n29427\n29447\n29466\n29485\n29537\n29556\n29575\n29594\n29612\n29631\n29650\n29669\n29688\n29706\n29725\n29745\n29764\n29783\n29801\n29884\n29903\n29922\n29941\n29960\n29979\n29998\n30017\n30036\n30055\n30074\n30093\n30112\n30131\n30150\n30169\n30188\n30227\n30246\n30265\n314\n31990\n32009\n32028\n32047\n32066\n32085\n32104\n32123\n3246\n3264\n3282\n3300\n33133\n33150\n33168\n33185\n33202\n3322\n33237\n33254\n33271\n33289\n33306\n33323\n33340\n33358\n33375\n335\n3368\n33745\n33762\n3378\n33797\n33814\n33831\n33849\n33866\n33883\n33901\n33919\n33936\n33953\n33971\n33989\n34005\n34022\n3404\n34057\n34074\n34091\n34109\n34126\n34143\n34160\n34178\n34195\n34211\n34229\n34246\n34263\n34280\n34298\n34314\n34331\n34349\n34366\n34383\n3440\n34417\n34434\n34451\n34469\n34486\n34502\n3452\n34537\n34554\n34571\n34589\n34606\n34623\n34640\n34658\n34675\n34692\n3471\n34727\n34744\n34761\n34779\n34796\n34812\n3483\n34847\n34864\n34881\n34899\n34915\n34932\n3495\n3501\n35081\n35099\n35115\n35132\n3515\n35167\n35184\n35201\n35219\n35236\n35253\n35271\n35289\n35305\n35322\n3534\n35357\n35374\n35391\n35408\n35425\n35442\n3546\n35477\n35494\n35510\n35528\n35545\n35562\n3558\n35597\n35613\n35630\n35648\n35665\n35682\n3575\n35834\n35851\n35869\n35886\n35902\n3592\n35937\n35954\n35971\n35989\n36004\n36021\n36039\n36056\n36073\n36090\n36107\n36124\n36141\n3616\n3619\n36212\n36231\n36249\n36266\n36283\n3630\n36317\n36334\n36351\n3637\n3641\n36453\n36470\n36488\n36504\n36521\n36539\n36556\n36573\n36590\n36607\n36624\n36641\n36659\n36676\n36693\n36710\n36729\n36746\n36763\n36780\n3688\n3693\n36948\n36965\n36983\n3700\n37017\n37035\n37052\n37070\n37088\n37105\n37123\n37140\n37158\n37175\n3720\n3738\n37507\n3766\n37829\n380\n3818\n38262\n3828\n38297\n38314\n38331\n38349\n38366\n38383\n3843\n38538\n38585\n3868\n38714\n38746\n38782\n3883\n3894\n39026\n3907\n3915\n39281\n39313\n39345\n39377\n39409\n3965\n39742\n39801\n39819\n39836\n39853\n39870\n39888\n39905\n39925\n39942\n3996\n4010\n4028\n40339\n40357\n40374\n40391\n40408\n40425\n40442\n4046\n40509\n40574\n4062\n40652\n40682\n40712\n40742\n40774\n40804\n40836\n40872\n4098\n4106\n4109\n4124\n4141\n4151\n41575\n41624\n4178\n4197\n4214\n4233\n4250\n4268\n4285\n43005\n43056\n4316\n4335\n4352\n4370\n4389\n4405\n4422\n4441\n44575\n44607\n44639\n4467\n44701\n4486\n45008\n4506\n45117\n4517\n45252\n45304\n4536\n4554\n4576\n45836\n45878\n45912\n45968\n46006\n46023\n46040\n46058\n46075\n46092\n46109\n46126\n46143\n46160\n46178\n46195\n46212\n4623\n46247\n46264\n46281\n46299\n4636\n46507\n46524\n46541\n46559\n46576\n46593\n4661\n46627\n46644\n46662\n46683\n46701\n46727\n46744\n46761\n46779\n46796\n46813\n46830\n46848\n46865\n46882\n469\n46916\n46933\n4696\n46977\n47000\n47018\n47035\n47052\n4707\n47087\n47103\n47120\n47138\n47155\n47172\n4719\n47207\n47224\n47241\n47318\n47335\n47352\n4737\n47387\n47404\n47421\n47439\n47458\n47477\n47496\n47514\n47533\n47552\n47571\n4775\n47792\n4781\n47827\n47844\n47861\n47879\n47896\n47913\n47930\n47948\n47965\n47982\n48\n48016\n48033\n48050\n48068\n48085\n48101\n48119\n48136\n48153\n48170\n48188\n48207\n4824\n4833\n48453\n48472\n48491\n4851\n48528\n48545\n48566\n48586\n48602\n48621\n48641\n4866\n4868\n4870\n48719\n48738\n48762\n48780\n48798\n48816\n48834\n48851\n4887\n48887\n48905\n48922\n48940\n48958\n48975\n48992\n49009\n49026\n49043\n49060\n49078\n49095\n49112\n4913\n49147\n49164\n49181\n49199\n49216\n4927\n4946\n4965\n4985\n50003\n50021\n50039\n50057\n50075\n50093\n50111\n50129\n50146\n50163\n50180\n50198\n50215\n50232\n5025\n50272\n50299\n50316\n50333\n50373\n50390\n50408\n50425\n50442\n5046\n50477\n50494\n50511\n50529\n50546\n50564\n50583\n50602\n50621\n50990\n51009\n51028\n51047\n51066\n51085\n51104\n51392\n51411\n51430\n51449\n51468\n51487\n51507\n51526\n51545\n51564\n51583\n51602\n51621\n51640\n51659\n51678\n51697\n51716\n51735\n51754\n51773\n51792\n51816\n51835\n51854\n51873\n51892\n51911\n51930\n51949\n52081\n52100\n52119\n52138\n52157\n52176\n52195\n52214\n52233\n52252\n52271\n52290\n52309\n52328\n52347\n52366\n52385\n52404\n52423\n52443\n52462\n52584\n52610\n52632\n52667\n52700\n52727\n53105\n53124\n53143\n53162\n53181\n53200\n53219\n53238\n53257\n53276\n53295\n53314\n53333\n53352\n54063\n54082\n54101\n54120\n54139\n54158\n54177\n54196\n54215\n54234\n54253\n54272\n54291\n54310\n54329\n54359\n5449\n5468\n5487\n5506\n5525\n5544\n55485\n55502\n5552\n55537\n55554\n55571\n55589\n55606\n55650\n55669\n55686\n55703\n55720\n5574\n55757\n55774\n55791\n55809\n55827\n55845\n55862\n5588\n5590\n55919\n55945\n55962\n55983\n5600\n56017\n56034\n56051\n56069\n56086\n56103\n56120\n56138\n56155\n56172\n56197\n5628\n56368\n56385\n56403\n56423\n56443\n56462\n56481\n56501\n56520\n5654\n56559\n56579\n56598\n56617\n56637\n56654\n56671\n56694\n56715\n56736\n56756\n56776\n56796\n56814\n6\n6060\n6079\n6098\n6117\n6136\n6155\n6179\n6198\n6217\n6236\n6255\n6274\n6293\n6311\n6330\n6777\n6796\n6815\n6834\n6853\n6872\n6891\n6910\n6929\n6948\n6967\n6986\n7004\n7025\n7044\n7063\n7082\n7101\n7120\n7139\n7158\n7177\n7196\n7215\n7234\n7253\n7274\n7293\n7311\n7330\n7349\n7368\n7387\n7406\n7438\n7460\n7479\n7498\n7517\n7536\n7564\n7583\n7602\n7621\n7640\n7659\n7678\n7697\n7716\n7736\n7755\n7775\n7794\n7814\n7834\n7853\n7873\n7892\n821\n839\n857\n874\n891\n908\n927\n945\n963\n981", "result_hash": "8a8f6e4f2111a3076c17f0614e44fb17", "num_rows": 25061}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.borderColor = 'borderless' AND T1.cardKingdomId IS NOT NULL AND T1.cardKingdomFoilId IS NULL": {"evaluation": "pass: incorrect", "result": "Acidic Slime\nNecrotic Ooze\nScavenging Ooze\nThe Mimeoplasm\nVoidslime", "result_hash": "eaa4c44acd1eefc811b804b6286f81cd", "num_rows": 5}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.name FROM cards AS T1 INNER JOIN cards AS T2 ON T2.name = T1.name ORDER BY CASE WHEN T2.convertedManaCost > T1.convertedManaCost THEN 1 ELSE 0 END DESC": {"evaluation": "pass: incorrect", "result": "\"Ach! Hans, Run!\"\nAbundance\nAcidic Dagger\nAdvance Scout\nAether Adept\nAetherstream Leopard\nAhn-Crop Crasher\nAkki Drillmaster\nAlabaster Wall\nAlley Evasion\nAltar's Reap\nAn-Havva Inn\nAncient Kavu\nAngelic Ascension\nAnimate Land\nApathy\nAradara Express\nArcbound Bruiser\nArchmage's Charm\nArgentum Armor\nArmored Pegasus\nArtisan of Kozilek\nAshnod's Altar\nAtarka Efreet\nAura of Dominion\nAvalanche Caller\nAven Surveyor\nAxis of Mortality\nBack to Nature\nBaleful Strix\nBanners Raised\nBarony Vampire\nBasri's Lieutenant\nBattlefield Promotion\nBeast Hunt\nBellowing Elk\nBerserkers of Blood Ridge\nBishop of Binding\nBladeback Sliver\nBlessed Light\nBlind-Spot Giant\nBlood Celebrant\nBloodchief's Thirst\nBloodshed Fever\nBoartusk Liege\nBojuka Bog\nBone Shredder\nBorderland Behemoth\nBoulder Salvo\nBrallin, Skyshark Rider\nBreaking // Entering\nBrimaz, King of Oreskos\nBronze Tablet\nBubbling Muck\nBurning Sands\nCabal Evangel\nCall from the Grave\nCandelabra of Tawnos\nCaptivating Crew\nCarrion Call\nCatacomb Crocodile\nCavalier of Gales\nCenn's Enlistment\nCessation\nChampion's Drake\nChange of Heart\nCharging Slateback\nChild of Thorns\nChoose Your Champion\nCinder Seer\nCivic Wayfinder\nClergy of the Holy Nimbus\nClone Legion\nCoalition Honor Guard\nCold Storage\nCommand Beacon\nConclave Equenaut\nConservator\nContraband Kingpin\nCoralhelm Commander\nCosmic Larva\nCoveted Peacock\nCrashing Tide\nCrimson Hellkite\nCrown of Flames\nCrushing Pain\nCrystalline Nautilus\nCurious Pair // Treats to Share\nCustodi Soulbinders\nDaghatar the Adamant\nDarigaaz's Charm\nDarkbore Pathway // Slitherbore Pathway\nDauntless Cathar\nDaxos, Blessed by the Sun\nDeadly Insect\nDeath's-Head Buzzard\nDeception\nDeeptread Merrow\nDegavolver\nDemonic Hordes\nDescendant of Masumaro\nDespondency\nDevouring Strossus\nDimir Aqueduct\nDirty Rat\nDisorder\nDivergent Growth\nDogpile\nDosan the Falling Leaf\nDrag to the Underworld\nDragonrage\nDread Cacodemon\nDream Tides\nDromar's Attendant\nDrudge Spell\nDuneblast\nDutiful Return\nDynavolt Tower\nEbony Owl Netsuke\nEkundu Cyclops\nElectryte\nElspeth's Devotee\nElvish Pathcutter\nEmbodiment of Insight\nEmpyrial Storm\nEnduring Ideal\nEnraged Revolutionary\nEpic Downfall\nErstwhile Trooper\nEtali, Primal Storm\nEvanescent Intellect\nExcavation\nExperimental Overload\nEye of Ramos\nFaerie Dragon\nFallen Angel Avatar\nFarbog Explorer\nFathom Mage\nFeeding Grounds\nFeral Maaka\nFeudkiller's Verdict\nFight to the Death\nFire Imp\nFires of Yavimaya\nFlame Jet\nFlash\nFleshgrafter\nFlowstone Channeler\nFolk of the Pines\nForced March\nForm of the Dragon\nFountain of Renewal\nFresh Meat\nFrost Ogre\nFungal Reaches\nGaea's Avenger\nGang of Elk\nGatekeeper of Malakir\nGelatinous Genesis\nGeothermal Crevice\nGhitu Journeymage\nGhoulflesh\nGideon's Battle Cry\nGilder Bairn\nGlare of Subdual\nGlint Hawk Idol\nGluetius Maximus\nGoblin Balloon Brigade\nGoblin Firestarter\nGoblin Piker\nGoblin Tunneler\nGolden Demise\nGoliath Spider\nGraf Rats // Chittering Host\nGrave Defiler\nGray Merchant of Asphodel\nGreenweaver Druid\nGrimclaw Bats\nGrotag Bug-Catcher\nGruul Beastmaster\nGuardians' Pledge\nGutwrencher Oni\nHalf-Squirrel, Half-\nHand of Emrakul\nHarm's Way\nHaunted Angel\nHead to Head\nHeartstone\nHekma Sentinels\nHematite Golem\nHero's Blade\nHierophant's Chalice\nHisoka's Defiance\nHoly Light\nHope of Ghirapur\nHostile Desert\nHuatli, the Sun's Heart\nHunted Wumpus\nHymn of the Wilds\nIcebind Pillar\nIkiral Outrider\nImminent Doom\nImplements of Sacrifice\nIncreasing Ambition\nInfectious Host\nInga Rune-Eyes\nInscription of Abundance\nIntervene\nInvisible Stalker\nIronroot Warlord\nIvorytusk Fortress\nJace, Mirror Mage\nJasmine Seer\nJeweled Torque\nJoraga Invocation\nJungle Hollow\nKabuto Moth\nKami of the Honored Dead\nKarplusan Hound\nKazandu Blademaster\nKeiga, the Tide Star\nKetria Crystal\nKindle the Carnage\nKiss of the Amesha\nKjeldoran Skycaptain\nKnights of Thorn\nKor Blademaster\nKranioceros\nKrosan Vorine\nKydele, Chosen of Kruphix\nLambholt Elder // Silverpelt Werewolf\nLast Kiss\nLavalanche\nLeashling\nLeonin Snarecaster\nLiberating Combustion\nLifetap\nLightning Strike\nLim-Dûl's Vault\nLiving Tempest\nLocket of Yesterdays\nLord of the Unreal\nLoxodon Lifechanter\nLumengrid Warden\nLyev Skyknight\nMagebane Armor\nMagus of the Abyss\nMalachite Golem\nMana Maze\nManta Ray\nMardu Charm\nMarsh Crocodile\nMasked Gorgon\nMasterwork of Ingenuity\nMeadowboon\nMemory Jar\nMercurial Pretender\nMesmerizing Benthid\nMidnight Guard\nMinamo's Meddling\nMindleecher\nMinotaur Warrior\nMirror-Mad Phantasm\nMistbind Clique\nMnemonic Wall\nMolderhulk\nMongrel Pack\nMorale\nMortuary Mire\nMox Opal\nMurasa Ranger\nMy Laughter Echoes\nMystic Decree\nNacre Talisman\nNarnam Cobra\nNaughty // Nice\nNecropede\nNemesis Trap\nNeurok Familiar\nNicol Bolas, the Deceiver\nNightveil Predator\nNip Gwyllion\nNoble Elephant\nNotorious Throng\nNumot, the Devastator\nOasis Ritualist\nOboro Envoy\nOgre Marauder\nOlivia Voldaren\nOne with the Stars\nOphiomancer\nOrcish Cannoneers\nOreskos Swiftclaw\nOstiary Thrull\nOvermaster\nPain's Reward\nPanic\nPardic Dragon\nPatron of the Kitsune\nPelt Collector\nPersecute\nPhantom Centaur\nPhyrexian Broodlings\nPhyrexian Splicer\nPin to the Earth\nPitiless Pontiff\nPlaneswalker's Mischief\nPolis Crusher\nPostmortem Lunge\nPrecursor Golem\nPride Sovereign\nPrimeval Titan\nProclamation of Rebirth\nProtector of the Crown\nPsychic Symbiont\nPuppet Strings\nPygmy Troll\nQilin's Blessing\nQuicksilver Behemoth\nRadiant Essence\nRaging Swordtooth\nRakdos Ringleader\nRamirez DePietro\nRapid Fire\nRavenous Bloodseeker\nRazorjaw Oni\nReaping the Graves\nReclamation\nReflecting Pool\nRekindled Flame\nRemove Soul\nReprisal\nRestless Dead\nReveillark\nRhizome Lurcher\nRidged Kusite\nRing of Kalonia\nRise to the Challenge\nRivals' Duel\nRoc of Kher Ridges\nRona, Disciple of Gix\nRorix Bladewing\nRubble Reading\nRumbling Slum Avatar\nRupture Spire\nSabertooth Alley Cat\nSage of Epityr\nSalt Road Patrol\nSanctum of All\nSanguine Indulgence\nSarulf, Realm Eater\nSavannah Sage\nScare Tactics\nSchool of Piranha\nScourge of Skola Vale\nScroll Thief\nSea Serpent\nSeascape Aerialist\nSee the Unwritten\nSeize the Spoils\nSen Triplets\nSerene Heart\nSerum Powder\nShacklegeist\nShamanic Revelation\nShattered Angel\nShield Mate\nShinen of Flight's Wings\nShore Snapper\nShriveling Rot\nSiege Modification\nSilence the Believers\nSilver Wyvern\nSin Collector\nSix-y Beast\nSkirk Drill Sergeant\nSkullbriar, the Walking Grave\nSkyhunter Cub\nSkysnare Spider\nSleeper Dart\nSliver Queen\nSmoldering Werewolf // Erupting Dreadwolf\nSnowfield Sinkhole\nSolitary Camel\nSoratami Cloud Chariot\nSoul Net\nSoulblast\nSpark Reaper\nSpectral Cloak\nSpellkeeper Weird\nSphinx's Tutelage\nSpined Sliver\nSpirit of the Labyrinth\nSplit Decision\nSpringleaf Drum\nSquirrel Farm\nStampede Rider\nStatic Orb\nSteel Wall\nStingscourger\nStone Rain\nStorm Fleet Swashbuckler\nStrands of Undeath\nStrionic Resonator\nStunt Double\nSulfur Falls\nSunblade Angel\nSunscour\nSurgical Extraction\nSwamp\nSwooping Talon\nSylvan Yeti\nTah-Crop Elite\nTake into Custody\nTamiyo, Collector of Tales\nTaste of Blood\nTeferi's Ageless Insight\nTelim'Tor\nTemporal Mastery\nTerminate\nTeysa, Orzhov Scion Avatar\nThassa, God of the Sea\nThe Great Forest\nThe Wretched\nThistledown Duo\nThought Nibbler\nThran Weaponry\nThrone of Makindi\nThundering Tanadon\nTidespout Tyrant\nTimebender\nTithe\nTonic Peddler\nTorn Between Heads\nTower of Coireall\nTrained Orgg\nTraveler's Amulet\nTreetop Village\nTrigon of Thought\nTrue Love's Kiss\nTunneler Wurm\nTwinflame\nUktabi Efreet\nUncaged Fury\nUnderworld Charger\nUnleash Fury\nUnwind\nUrza's Avenger\nValeron Wardens\nVampiric Link\nVaultbreaker\nVenarian Glimmer\nVerdant Eidolon\nVeteran Swordsmith\nVicious Hunger\nVillainous Ogre\nVirulent Plague\nVivien's Crocodile\nVoid\nVolley of Boulders\nVow of Wildness\nWakestone Gargoyle\nWall of Limbs\nWandering Eye\nWard Sliver\nWarrior's Charge\nWaterspout Elemental\nWeatherlight\nWell of Life\nWhiptail Wurm\nWicked Pact\nWildcall\nWind Zendikon\nWingfold Pteron\nWit's End\nWojek Embermage\nWoodvine Elemental\nWormfang Manta\nWu Light Cavalry\nYasova Dragonclaw\nYosei, the Morning Star\nZedruu the Greathearted\nZodiac Horse\nZzzyxas's Abyss", "result_hash": "e1c36072e2420067927767781e624a3e", "num_rows": 21738}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT name FROM cards WHERE frameVersion = 2015 AND edhrecRank > 100 AND edhrecRank < 200": {"evaluation": "pass: incorrect", "result": "Acidic Slime\nAetherflux Reservoir\nAnguished Unmaking\nAnimate Dead\nArbor Elf\nAsh Barrens\nAssassin's Trophy\nAustere Command\nAvenger of Zendikar\nBeast Whisperer\nBlighted Woodland\nBlood Artist\nBoros Charm\nBuried Ruin\nCanopy Vista\nCaves of Koilos\nChrome Mox\nCinder Glade\nClifftop Retreat\nDark Ritual\nDarksteel Ingot\nDiabolic Tutor\nDimir Aqueduct\nDockside Extortionist\nDovin's Veto\nDragonskull Summit\nEverflowing Chalice\nExpedition Map\nExplosive Vegetation\nFact or Fiction\nFaithless Looting\nForce of Will\nFrantic Search\nFyndhorn Elves\nGenerous Gift\nGhost Quarter\nGhostly Prison\nGlacial Fortress\nGolgari Signet\nGray Merchant of Asphodel\nGuardian Project\nHarmonize\nHarrow\nHedron Archive\nHinterland Harbor\nInventors' Fair\nIsolated Chapel\nIzzet Boilerworks\nKrosan Grip\nLlanowar Wastes\nLotus Petal\nMana Drain\nMerciless Eviction\nMortify\nMystic Sanctuary\nNarset's Reversal\nNarset, Parter of Veils\nNature's Claim\nNature's Lore\nOpulent Palace\nPath of Ancestry\nPlaguecrafter\nPrairie Stream\nPreordain\nPropaganda\nRead the Bones\nReality Shift\nReflecting Pool\nReturn to Dust\nRhythm of the Wild\nRootbound Crag\nSeedborn Muse\nShivan Reef\nSimic Growth Chamber\nSimic Signet\nSkyshroud Claim\nStrip Mine\nSulfur Falls\nSunken Hollow\nSunpetal Grove\nSword of the Animist\nTalisman of Creativity\nTeferi's Protection\nTemple of Mystery\nToxic Deluge\nVandalblast\nViscera Seer\nWhispersilk Cloak\nWood Elves\nWoodland Cemetery\nWorldly Tutor\nWorn Powerstone\nWrath of God\nYavimaya Coast\nZendikar Resurgent\nZulaport Cutthroat", "result_hash": "9833bb094bbc3f7793c820c54e310b0d", "num_rows": 96}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.name, T1.manaCost, T1.setCode FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T2.status = 'Banned' AND T2.format = 'gladiator'?": {"evaluation": "error: <error>", "result": "Execution error: near \"?\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT DISTINCT T1.status FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.type = 'Artifact' AND T2.side IS NULL AND T1.format = 'vintage'": {"evaluation": "pass: correct", "result": "Banned\nLegal\nRestricted", "result_hash": "9fde62ba385fcf4a76f00eb906d613e9", "num_rows": 3}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Legal' AND T2.format = 'commander' AND (T1.power = '*' OR T1.power IS NULL)": {"evaluation": "pass: correct", "result": "10\tDaren Bader\n10083\tFranz Vohwinkel\n10185\tRaoul Vitale\n10310\tMatt Stewart\n10392\tJames Paick\n10503\tTitus Lunter\n10635\tKieran Yanner\n10718\tJohn Avon\n10793\tRob Alexander\n10902\tJesper Myrfors\n11016\tDan Frazier\n11094\tRichard Thomas\n11201\tAmy Weber\n11312\tChristopher Rush\n11418\tJim Murray\n11571\tHugh Jamieson\n11677\tJim Nelson\n11802\tTom Wänerstrand\n11927\tAdam Paquette\n12046\tMike Sass\n12118\tJohn Avon\n12224\tAdrian Smith\n12376\tGreg Hildebrandt\n12444\tJung Park\n12656\tCyril Van Der Haegen\n1279\tMark Poole\n12889\tJohn Avon\n13016\tViktor Titov\n13203\tDaniel Ljunggren\n13302\tZack Stella\n13400\tNoah Bradley\n13592\tAdam Paquette\n13744\tWillian Murai\n13914\tAdam Paquette\n14043\tJason Rainville\n142\tVolkan Baǵa\n1435\tAmy Weber\n14461\tRob Alexander\n14590\tHeather Hudson\n14710\tJohn Zeleznik\n14824\tAnthony Palumbo\n1494\tDan Frazier\n15041\tIzzy\n15155\tChippy\n15252\tAdam Paquette\n15366\tIgor Kieryluk\n15492\tZoltan Boros & Gabor Szikszai\n15617\tRichard Wright\n15746\tAndreas Rocha\n15850\tNils Hamm\n15990\tJung Park\n16127\tGreg Staples\n16239\tGreg Hildebrandt\n16353\tMartina Pilcerova\n16507\tMichael Komarck\n16625\tMark Tedin\n16766\tAdam Paquette\n16876\tJeremy Jarvis\n17001\tMark Poole\n17129\tMatt Cavotta\n17254\tTony Szczudlo\n17379\tFilip Burburan\n17527\tRaymond Swanland\n17665\tClint Cearley\n17754\tBrad Rigney\n17885\tDaarken\n18017\tNicholas Gregory\n18115\tWylie Beckert\n18254\tWillian Murai\n18371\tMagali Villeneuve\n18503\tZack Stella\n18655\tLindsey Look\n18802\tCarl Frank\n1895\tMark Tedin\n19075\tTitus Lunter\n19175\tAnthony S. Waters\n19282\tMathias Kollros\n19371\tDouglas Shuler\n1949\tJulie Baroh\n19594\tAnson Maddocks\n1975\tRob Alexander\n19875\tCliff Childs\n20005\tYohann Schepacz\n20126\tNoah Bradley\n20270\tJohn Donahue\n20370\tMark Poole\n20489\tTerese Nielsen\n20657\tRyan Pancoast\n20797\tPete Venters\n20934\tMartina Pilcerova\n21080\tG-host Lee\n21203\tDimitar Marinski\n21332\tMark Winters\n21485\tSteve Prescott\n21602\tMark Brill\n2173\tAmy Weber\n21881\tCarl Critchlow\n21998\tRob Alexander\n22116\tSimon Dominic\n22218\tYeong-Hao Han\n2232\tAnson Maddocks\n22430\tRichard Thomas\n22542\tMark Tedin\n22622\tDouglas Shuler\n22758\tSeb McKinnon\n22887\tAdam Paquette\n23060\tMatt Stewart\n23217\tZoltan Boros & Gabor Szikszai\n23324\tMark Romanoski\n23456\tArnie Swekel\n23590\tDonato Giancola\n2370\tAdam Rex\n23841\tSteve Prescott\n23930\tJeff A. Menges\n24039\tBrom\n24142\tDan Scott\n24309\tJason A. Engle\n24474\tZack Stella\n2462\tTom Wänerstrand\n24762\tDon Hazeltine\n24897\tScott Bailey\n25039\tEytan Zana\n25171\tIgor Kieryluk\n25300\tPiotr Dura\n2539\tRichard Kane Ferguson\n25543\tKieran Yanner\n25698\tAaron Miller\n25816\tSvetlin Velinov\n25972\tRyan Alexander Lee\n26102\tSvetlin Velinov\n26251\tMathias Kollros\n26335\tDan Frazier\n26442\tMark Poole\n26564\tAmy Weber\n26645\tJesper Myrfors\n26748\tMelissa A. Benson\n26869\tAmy Weber\n26953\tDouglas Shuler\n27066\tAnson Maddocks\n27233\tBryon Wackwitz\n27536\tWarren Mahy\n2767\tNéNé Thomas\n27779\tAlex Horley-Orlandelli\n27909\tAlan Pollack\n28013\tGreg Staples\n28141\tAlan Pollack\n28245\tJason Chan\n28372\tPete Venters\n28468\tAnthony Palumbo\n2860\tMark Tedin\n2869\tJ. W. Frost\n28815\tWinona Nelson\n28921\tCliff Childs\n29048\tScott Chou\n29177\tAdam Paquette\n29301\tTomasz Jedruszek\n2945\tRichard Kane Ferguson\n29555\tWayne Reynolds\n2970\tDan Frazier\n29810\tSteven Belledin\n29981\tMike Bierek\n30125\tEytan Zana\n30228\tEkaterina Burmak\n30363\tD. Alexander Gregory\n30504\tViktor Titov\n30624\tChase Stone\n30773\tVéronique Meignaud\n30901\tRyan Yee\n31041\tRalph Horsley\n31179\tJohn Stanko\n31317\tZoltan Boros & Gabor Szikszai\n31459\tBastien L. Deharme\n31587\tMark Winters\n31724\tKev Walker\n3185\tAmy Weber\n31944\tSteven Belledin\n3205\tPat Morrissey\n32151\tSteven Belledin\n32286\tMark Poole\n3239\tMark Romanoski\n32522\tHeather Hudson\n32628\tSandra Everingham\n32793\tAnthony S. Waters\n3289\tKev Walker\n33014\tAnson Maddocks\n33101\tLivia Prima\n33219\tSeb McKinnon\n33364\tWinona Nelson\n3348\tCiruelo\n33617\tPat Morrissey\n33718\tDouglas Shuler\n33836\tMitch Cotie\n33974\tSteven Belledin\n34096\tScott Chou\n34215\tDave Kendall\n34346\tJim Murray\n34483\tDiTerlizzi\n34615\tEdward P. Beard, Jr.\n34749\tD. Alexander Gregory\n34841\tSteve Ellis\n34985\tGreg Opalinski\n35085\tJohn Matson\n35213\tBradley Williams\n35319\tJim Nelson\n35401\tRandy Gallegos\n35526\tJames Ryman\n35652\tDaniel Ljunggren\n35847\tMark Tedin\n35971\tAlex Horley-Orlandelli\n36084\tCarl Critchlow\n362\tGlen Angus\n36345\tChris Rallis\n36496\tDave Dorman\n36631\tGary Ruddell\n36766\tAnthony S. Waters\n36993\tAaron Miller\n37141\tDan Scott\n37270\tDiTerlizzi\n37394\tQuinton Hoover\n37481\tChase Stone\n3760\tPuddnhead\n3769\tFranz Vohwinkel\n37772\tJock\n37954\tDaarken\n38065\tVéronique Meignaud\n38198\tFred Fields\n38327\tAlan Pollack\n38457\tAleksi Briclot\n38615\tWillian Murai\n38764\tAdam Paquette\n38901\tAnna Steinbauer\n39037\tSeb McKinnon\n39155\tRaymond Swanland\n39253\tLarry Elmore\n39383\tSeb McKinnon\n39544\tAnna Steinbauer\n39655\tPiotr Dura\n39801\tMichael Phillippi\n3996\tAlan Pollack\n40110\tScott Hampton\n40247\trk post\n40356\tPete Venters\n4049\tMatthew D. Wilson\n40632\tViktor Titov\n4077\tAdam Rex\n40899\tCarl Critchlow\n41074\tAdam Paquette\n41221\tDan Frazier\n41340\tRomas Kukalis\n41475\tPiotr Dura\n41634\tMark Tedin\n41728\tWayne England\n41847\tMichael Sutfin\n41971\tPete Venters\n42117\tNils Hamm\n42249\tEric Fortune\n42361\tJason A. Engle\n42507\tKarl Kopinski\n42640\tEfrem Palacios\n42747\tRyan Yee\n42850\tSeb McKinnon\n4292\tJohn Avon\n43036\tAnthony Palumbo\n43156\tHoward Lyon\n43314\tDave Dorman\n43396\tPete Venters\n43522\tMatthew Mitchell\n43630\tDan Frazier\n43752\tTony Szczudlo\n43862\tJohn Matson\n43970\tJohn Avon\n44081\tRob Alexander\n44224\tTitus Lunter\n44316\tQuinton Hoover\n44405\tQuinton Hoover\n44481\tQuinton Hoover\n4456\tKarl Kopinski\n44713\tRyan Yee\n44885\tKu Xueming\n45026\tChris Rallis\n45112\tChris Ostrowski\n45231\tClint Cearley\n45350\tSvetlin Velinov\n45450\tMark Zug\n45590\tJonas De Ro\n45749\tSeb McKinnon\n45895\tAnna Steinbauer\n46007\tAlex Horley-Orlandelli\n46144\tChristopher Rush\n46289\tRob Alexander\n46405\tQuinton Hoover\n46537\tDaniel Ljunggren\n46696\tJonas De Ro\n46833\tDmitry Burmak\n46967\tTitus Lunter\n47098\tTrevor Claxton\n47226\tJohn Avon\n47334\tSlawomir Maniak\n47469\tDan Scott\n47575\tJohn Avon\n47715\tBrian Snõddy\n47835\tDaren Bader\n47958\tMike Dringenberg\n48107\tDan Scott\n48226\tAlayna Danner\n48365\tTheodoru\n48446\tLucas Staniec\n48588\tChase Stone\n48738\tVolkan Baǵa\n48844\tAlex Horley-Orlandelli\n48982\tIgor Kieryluk\n49127\tJohann Bodin\n49222\tMagali Villeneuve\n49361\tBrom\n49456\tAmy Weber\n49592\tKerstin Kaman\n49676\tChristopher Rush\n49774\tChristopher Rush\n49907\tJustin Sweet\n50018\tWisnu Tan\n5015\tRichard Wright\n50272\tSam Burley\n50422\tAdam Paquette\n50587\tJasper Sandner\n50681\tDan Frazier\n50814\tDoug Chaffee\n50933\tCharles Gillespie\n51030\tPete Venters\n51168\tApril Lee\n5131\tTyler Jacobson\n51441\tAnson Maddocks\n516\tDan Frazier\n51766\tJohn Zeleznik\n51867\tPete Venters\n5206\tJohann Bodin\n52190\tRon Spears\n52302\tBastien L. Deharme\n52437\tDan Scott\n52769\tScott M. Fischer\n52876\tLawrence Snelly\n53005\tDaren Bader\n5309\tJason Rainville\n53421\tJohn Avon\n53532\tRoger Raupp\n53654\tRomas Kukalis\n53767\tJim Nelson\n53906\tDarrell Riche\n53998\tHeather Hudson\n54113\tGabor Szikszai\n54220\tRalph Horsley\n54316\tNorikatsu Miyoshi\n54399\tDavid Seeley\n54476\tDon Hazeltine\n54559\tD. J. Cleland-Hura\n54656\tRob Alexander\n54738\tBen Thompson\n54820\tRon Spears\n54914\tRob Alexander\n54990\tBrian Snõddy\n55083\tJesper Myrfors\n55190\tRandy Gallegos\n55287\tAndrew Goldhawk\n55413\tScott Kirschner\n55557\tJaime Jones\n55693\tMathias Kollros\n55841\tGrzegorz Rutkowski\n55948\tGoran Josic\n56097\tRyan Pancoast\n56192\tJung Park\n56317\tEric Deschamps\n56397\tColin Boyer\n5652\tBrandon Kitkouski\n56648\tYongjae Choi\n56741\tPascal Blanché\n5705\tChristopher Rush\n5810\tHeather Hudson\n5921\tJohn Avon\n6091\tMike Sass\n6215\trk post\n6366\tChristopher Moeller\n6477\tSusan Van Camp\n6638\tJeff Miracola\n6745\tKaja Foglio & Phil Foglio\n6866\tIgor Kieryluk\n6994\tJung Park\n7142\tDavid Palumbo\n7310\tTyler Jacobson\n7432\tTianhua X\n7537\tJung Park\n7655\tAdam Paquette\n781\tSandra Everingham\n7930\tRob Alexander\n8028\tHe Jiancheng\n8152\tJaime Jones\n8283\tDarrell Riche\n8397\tAnthony Francisco\n8466\tCliff Childs\n8567\tDermot Power\n8719\tSteve Argyle\n8798\tJohn Avon\n8908\tMatthew D. Wilson\n9049\tIgor Kieryluk\n9129\tRob Alexander\n9238\tJosh Hass\n9370\tRichard Wright\n9457\tDaniel Ljunggren\n9542\tKieran Yanner\n9681\tMarco Nelor\n9774\tRichard Wright\n9870\tGrzegorz Rutkowski\n9986\tJim Pavelec", "result_hash": "a6e64165400f7951c78d2f7b3042c3f8", "num_rows": 29936}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.id, T1.text, T1.uuid, T2.type, T2.date, T2.text AS ruling_text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.type", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.text FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name LIKE 'Sublime Epiphany' AND T2.number LIKE '74s'": {"evaluation": "pass: correct", "result": "Abilities that create replacement effects, such as a permanent entering the battlefield tapped or with counters on it, can’t be countered. Abilities that apply “as [this creature] enters the battlefield” are also replacement effects and can’t be countered\nActivated abilities are written in the form “[Cost]: [Effect].” Some keyword abilities (such as equip) are activated abilities and will have colons in their reminder texts.\nAny enters-the-battlefield abilities of the copied creature will trigger when the token enters the battlefield. Any “As [this creature] enters the battlefield” or “[This creature] enters the battlefield with” abilities of the copied creature will also wor\nIf any of the targets become illegal, the remaining targets are affected as appropriate.\nIf the copied creature has {X} in its mana cost, X is 0.\nIf the copied creature is copying something else, the token enters the battlefield as whatever that creature is copying.\nIf the copied creature is itself a token, the token created by Sublime Epiphany copies the original characteristics of that token as stated by the effect that created it.\nIf you choose more than one mode, you perform the modes in the order specified. For example, if you choose to counter target spell, return target nonland permanent to its owner’s hand, and have target player draw a card, that permanent will be on the batt\nIf you choose the third and fourth modes and target the same creature you control both times, you’ll return it and then create a token that’s a copy of it, using its copiable values as it last appeared on the battlefield. This is because the legality of t\nIf you counter a delayed triggered ability that triggered at the beginning of the “next” occurrence of a specified step or phase, that ability won’t trigger again the following time that phase or step occurs.\nSublime Epiphany’s second mode can’t counter an activated or triggered mana ability. An activated mana ability is one that adds mana to a player’s mana pool as it resolves, doesn’t have a target, and isn’t a loyalty ability. A triggered mana ability is on\nSublime Epiphany’s second mode counters only activated and triggered abilities already on the stack. It doesn’t prevent abilities from being activated or from triggering later in the turn, and it has no effect on static abilities.\nThe token copies exactly what is printed on the creature and nothing else (unless that creature is a token or is copying something else; see below). It doesn’t copy whether that creature is tapped or untapped, whether it has any counters on it or Auras an\nTriggered abilities use the word “when,” “whenever,” or “at.” They’re often written as “[Trigger condition], [effect].” Some keyword abilities (such as prowess) are triggered abilities and will have “when,” “whenever,” or “at” in their reminder text.\nYou can’t choose any one mode more than once.", "result_hash": "5704207b6f3c66512606b605706f2bdb", "num_rows": 15}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN (SELECT uuid, COUNT(T2.uuid) as count FROM rulings GROUP BY uuid ORDER BY count DESC LIMIT 1) AS T2 ON T1.uuid = T2.uuid": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.uuid", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.translation FROM set_translations AS T1 INNER JOIN sets AS T2 ON T2.setCode = T1.setCode INNER JOIN cards AS T3 ON T2.name = 'Annul' AND T2.number = '29' AND T3.name = 'Annul' AND T3.number = '29' WHERE T1.language != 'English'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.language = 'Japanese' AND T1.hasAlternative IN (1)": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.hasAlternative", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T1.language = 'Chinese Simplified' THEN T1.id END) AS REAL) * 100 / COUNT(T1.id) FROM set_translations AS T1": {"evaluation": "pass: incorrect", "result": "6010.000", "result_hash": "946406da8417d7b6ce879b7450aaf10c", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.setCode, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.language = 'Italian'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.artist = 'Aaron Boyd'": {"evaluation": "pass: incorrect", "result": "5", "result_hash": "a186a70f4f8e69c36efb1e865941a768", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T2.keywords FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.name = 'Angel of Mercy'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.keywords", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(id) FROM cards WHERE power LIKE '%*'": {"evaluation": "pass: incorrect", "result": "453", "result_hash": "a044b098b62c0040c6d0c79fd7ca47fe", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT promoTypes FROM cards WHERE name = 'Duress'": {"evaluation": "pass: incorrect", "result": "arenaleague\nmediainsert\ntourney,fnm\nNone", "result_hash": "ac41f03d1c43aff4d2ddbebc5e665206", "num_rows": 4}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT border_color FROM cards WHERE name = 'Ancestor''s Chosen'": {"evaluation": "error: <error>", "result": "Execution error: no such column: border_color", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T2.originalType FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.setCode INNER JOIN set_translations AS T3 ON T2.setCode = T3.setCode WHERE T1.name = 'Ancestor''s Chosen'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.originalType", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.translation FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN cards AS T3 ON T2.code = T3.setCode WHERE T3.name = 'Angel of Mercy'": {"evaluation": "pass: incorrect", "result": "Colección Básica - Décima Edición\nColección Básica - Novena edición\nColección Básica - Octava edición\nColeção Básica Décima Edição\nDivine vs. Demonic\nDixième édition\nHauptset Achte Edition\nHauptset Neunte Edition\nHauptset Zehnte Edition\nHuitième édition\nNeuvième édition\nNona Edição\nOitava Edição\nSet Base Decima Edizione\nSet Base Nona Edizione\nSet Base Ottava Edizione\nБазовый выпуск Eighth Edition\nБазовый выпуск Девятая редакция\nБазовый выпуск Десятое Издание\n核心系列 第九版\n核心系列第八版\n核心系列第十版\n第10版基本セット\n第８版 基本セット\n第９版 基本セット\n코어세트 10판\n코어세트 8판\n코어세트 9판", "result_hash": "bf2b61ccb4cffd22343e636080d18e97", "num_rows": 28}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(T3.uuid) FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.isTextless = 0 AND T1.status = 'Restricted'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.uuid", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.text AS \"description about the ruling of Condemn\" FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Condemn'": {"evaluation": "pass: correct", "result": "The affected creature’s last known existence on the battlefield is checked to determine its toughness.", "result_hash": "691adb88efa0c5edb9e153a299a28524", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(*) FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T2.setCode = T3.setCode WHERE T3.isStarter = 1 AND T1.status = 'Restricted'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.isStarter", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'": {"evaluation": "pass: correct", "result": "Legal", "result_hash": "e2fedd3afa7155a7b0ecd9a5103f12a3", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT cards.type FROM cards WHERE cards.name = 'Benalish Knight": {"evaluation": "error: <error>", "result": "Execution error: unrecognized token: \"'Benalish Knight\"", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T3.text FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCODE INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T2.translation = 'Benalish Knight'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.artist FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.language = 'Phyrexian'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT CAST(COUNT(CASE WHEN borderColor = 'borderless' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(id) FROM cards": {"evaluation": "pass: correct", "result": "0.424", "result_hash": "18fbeb312793baeb38cb92d1665800ea", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(T1.uuid) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.isReprint = 1": {"evaluation": "pass: correct", "result": "9351", "result_hash": "2107e61eb4de3058f86fd7ca1f4f6375", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(t3.id) \nFROM cards AS t1 \nINNER JOIN set_translations AS t2 ON t1.setCode = t2.setCode \nINNER JOIN set_translations AS t3 ON t2.translation = t3.translation \nWHERE t1.borderColor = 'borderless' AND t3.language = 'Russian'": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T1.language = 'French' AND T1.isStorySpotlight = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CASE WHEN T1.isStorySpotlight = 1 THEN 1 ELSE 0 END) FROM cards AS T1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.language", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(id) FROM cards WHERE toughness = '99'": {"evaluation": "pass: correct", "result": "1", "result_hash": "40f1fb91cd3bfacd97c83113575324a9", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT name FROM cards WHERE artist = 'Aaron Boyd'": {"evaluation": "pass: correct", "result": "Cloudchaser Eagle\nKavu Recluse\nRepulse\nScarred Puma\nStormwatch Eagle", "result_hash": "32b2365523a364aa189b4da7adbd6565", "num_rows": 5}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo'": {"evaluation": "pass: correct", "result": "3697", "result_hash": "ec16cd0299fff292d737f0042177b038", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT id FROM cards WHERE convertedManaCost = 0": {"evaluation": "pass: correct", "result": "10053\n10059\n10065\n10071\n10077\n10083\n10089\n10095\n10101\n10107\n10113\n10119\n10125\n10358\n10364\n10370\n10376\n10382\n10388\n10394\n10400\n10406\n10412\n10418\n10424\n10430\n1050\n10692\n10698\n10704\n10710\n10716\n10722\n10728\n10734\n10740\n10746\n10752\n10765\n11028\n11045\n11051\n11057\n11063\n1117\n1124\n1130\n11330\n11346\n11351\n11357\n11362\n11368\n1141\n11656\n11662\n11668\n11674\n1168\n11685\n11702\n11708\n1180\n1182\n1188\n12018\n12067\n12073\n12079\n12085\n12091\n12097\n12103\n12109\n12115\n12121\n12127\n12133\n12139\n12382\n12388\n12394\n12400\n12406\n12412\n12418\n12424\n12430\n12436\n12442\n12448\n12454\n12460\n12579\n12585\n12856\n12862\n12868\n12874\n12880\n12886\n12892\n12898\n12904\n13256\n13262\n13268\n13390\n13396\n13402\n13408\n13414\n13420\n13616\n13622\n13629\n13635\n13844\n13851\n13857\n13914\n14201\n14360\n14370\n14376\n14424\n14430\n14466\n14497\n14531\n14562\n14592\n14626\n14656\n14689\n14754\n1476\n14793\n14799\n14833\n14839\n14875\n14880\n14886\n1492\n14953\n14959\n1498\n15001\n15039\n15045\n15081\n15120\n15126\n15166\n15172\n15210\n15248\n15286\n15292\n15326\n15332\n15372\n15412\n15418\n15455\n15461\n15498\n15532\n15562\n15568\n15604\n15636\n15642\n15680\n15715\n15747\n15753\n15788\n15820\n15851\n15882\n15914\n15947\n15983\n15989\n16155\n16161\n16346\n16352\n16525\n16573\n16579\n16825\n16831\n16837\n16843\n16849\n16961\n16967\n16973\n17096\n17276\n17528\n17534\n17540\n17570\n17604\n17701\n17707\n17757\n18029\n18035\n18041\n18047\n18053\n18150\n18207\n18451\n18457\n18463\n1866\n18684\n1874\n18862\n18893\n18924\n19071\n19077\n19083\n19089\n19095\n19101\n19107\n19113\n19200\n19243\n19298\n19599\n19605\n19611\n19617\n19664\n19804\n19920\n20109\n20115\n20121\n20127\n20232\n20302\n20308\n20349\n20365\n20402\n20454\n20481\n20533\n20585\n20639\n20699\n20763\n20769\n20931\n20937\n21194\n21200\n21206\n21239\n21499\n21505\n21536\n21569\n21605\n21611\n21658\n21689\n21831\n21985\n21991\n21997\n22003\n22009\n22015\n22199\n22204\n22210\n22216\n22222\n22228\n2243\n2249\n2255\n22599\n22605\n22611\n22617\n22623\n22629\n22877\n22883\n22889\n22895\n22901\n22941\n23240\n23256\n23262\n23268\n23598\n23604\n23610\n23616\n23622\n23884\n23890\n23896\n23902\n23908\n23966\n23972\n2399\n24008\n24042\n24096\n24102\n24108\n24114\n24120\n24126\n24132\n24138\n24555\n24864\n24897\n24927\n25038\n25044\n25309\n25315\n25321\n25327\n25333\n25339\n25345\n25356\n25451\n25477\n25733\n25739\n25745\n25751\n26044\n26050\n26056\n26062\n26296\n26302\n26308\n26314\n26320\n26326\n26332\n26597\n26614\n26620\n26626\n26892\n26909\n26915\n26921\n26927\n27072\n27235\n27241\n27656\n27662\n27668\n27674\n27680\n27686\n27912\n27918\n27924\n27930\n27936\n28162\n28168\n28174\n28180\n2825\n28412\n28418\n28423\n28429\n28434\n2849\n2855\n2861\n28655\n28660\n28666\n28671\n28677\n28682\n2873\n2879\n28912\n28918\n28924\n28930\n29173\n29179\n29185\n29191\n29197\n29466\n29472\n29478\n29484\n29490\n29496\n29778\n29784\n29790\n29796\n29802\n29808\n30118\n30124\n30130\n30136\n30142\n30148\n30188\n30265\n31830\n31921\n31934\n31940\n31946\n31952\n31958\n31964\n31970\n3204\n3210\n32120\n32126\n32143\n3215\n3220\n3225\n3231\n3233\n32335\n32341\n32347\n32563\n32579\n32585\n32591\n327\n32802\n32808\n32814\n32820\n33061\n33067\n33073\n33079\n33085\n33363\n33369\n33375\n33381\n33709\n33715\n33721\n33727\n338\n33969\n33975\n33981\n34213\n34219\n34225\n34231\n34434\n34452\n34458\n34776\n34782\n34788\n34794\n348\n34805\n349\n350\n35031\n35219\n35348\n35354\n35360\n35366\n35372\n35516\n3563\n3568\n35688\n35693\n35710\n35716\n35721\n35727\n35732\n35738\n35743\n35749\n3577\n3582\n359\n36139\n36145\n36151\n36157\n36163\n36169\n36175\n36182\n36188\n36194\n363\n36371\n36377\n36383\n36389\n36395\n36400\n36406\n36412\n36418\n36426\n36432\n36438\n36752\n36758\n36764\n36770\n36776\n36782\n36788\n36794\n368\n36805\n36811\n36817\n36823\n36829\n36835\n36841\n36847\n36853\n36859\n36865\n36871\n36877\n36883\n36889\n36895\n36901\n36907\n36913\n37166\n37172\n37178\n37184\n37190\n37214\n37223\n37382\n37388\n37394\n37581\n37616\n37625\n37638\n37647\n37661\n37670\n37684\n37691\n37697\n37715\n37721\n37727\n37733\n37739\n37745\n37751\n37757\n37766\n37862\n37869\n37875\n38030\n38036\n38042\n38048\n38054\n38060\n38066\n38187\n38193\n38199\n38205\n38211\n38217\n38223\n38425\n38454\n38460\n38553\n38559\n38751\n38757\n38763\n38817\n38823\n38909\n38917\n38998\n3905\n39093\n39121\n3914\n3917\n39203\n39215\n39227\n3924\n39253\n3927\n3933\n3938\n39387\n39392\n39582\n39588\n39594\n39602\n39709\n40024\n40256\n40262\n40268\n40321\n40466\n40570\n40694\n40700\n40834\n40840\n40939\n40945\n40951\n40957\n40963\n40969\n40975\n40981\n40987\n40993\n40999\n41005\n41011\n41017\n41023\n41031\n41037\n41043\n41049\n41055\n41062\n41068\n41074\n41105\n41215\n41348\n41354\n41361\n41390\n41396\n41472\n41588\n41648\n41654\n41660\n41666\n41672\n41678\n41688\n41750\n41769\n41776\n41785\n41925\n41994\n42122\n42179\n42185\n42191\n42208\n42261\n42275\n42288\n42294\n42315\n42340\n42368\n42444\n42486\n4257\n42607\n4266\n4270\n4273\n42770\n42809\n4283\n42849\n4288\n4291\n42915\n42921\n4297\n43057\n43096\n43102\n43108\n43316\n43322\n43328\n43334\n43386\n43400\n43417\n43432\n43448\n43462\n43477\n43492\n43508\n43523\n43537\n43552\n43569\n43583\n43598\n43615\n43630\n43644\n43667\n43675\n43690\n43704\n43727\n43735\n4375\n43763\n43779\n43795\n43810\n43824\n43839\n43855\n43870\n43883\n43897\n43913\n43931\n43947\n43961\n43977\n43992\n44006\n44021\n44037\n44052\n44067\n44081\n44098\n44193\n44226\n44232\n44238\n44280\n44286\n44322\n44328\n44362\n44381\n44402\n44438\n44449\n44468\n44474\n44508\n44514\n44532\n44552\n44659\n44665\n44882\n44888\n44894\n44934\n44940\n44963\n44969\n44975\n44981\n44987\n44993\n45117\n45303\n45309\n4545\n45503\n45509\n45514\n4553\n45597\n45768\n45925\n45931\n45937\n45943\n45949\n46283\n46289\n46295\n46301\n46307\n46432\n46491\n46497\n466\n46699\n46705\n46969\n46975\n46981\n46987\n47226\n47232\n47238\n47244\n47300\n47306\n4740\n47548\n47554\n47560\n47566\n47572\n47578\n47584\n47761\n47767\n47773\n48191\n48197\n48203\n48209\n48215\n48221\n48227\n48276\n48314\n48329\n48382\n48430\n48436\n48442\n48448\n48758\n48764\n48770\n48776\n48782\n48953\n49130\n49184\n49190\n49196\n49202\n49372\n49658\n49664\n49670\n49676\n49682\n49688\n49719\n49726\n49732\n49739\n49746\n49752\n49875\n49888\n49927\n49933\n49973\n49979\n49985\n49991\n50238\n50244\n50270\n50276\n5030\n5034\n5035\n50356\n50361\n50368\n5038\n5044\n5050\n50595\n50600\n50606\n50612\n50618\n5067\n5073\n50940\n50946\n50952\n50958\n50964\n50970\n51114\n51352\n51358\n51364\n51370\n51376\n51382\n51502\n51620\n51776\n51782\n51788\n51794\n51800\n51806\n52050\n52067\n52211\n52452\n52458\n52464\n52547\n52560\n52566\n52734\n53067\n53073\n53079\n53085\n53091\n53150\n53179\n53204\n53210\n53248\n53274\n53280\n53286\n53292\n53338\n53344\n53350\n53393\n53414\n53420\n53486\n53680\n53689\n5383\n5389\n5395\n53974\n5398\n53985\n53990\n53996\n54001\n54007\n5404\n5410\n54157\n5421\n5427\n54327\n54332\n54338\n54343\n54352\n54381\n54435\n54456\n54480\n54486\n54524\n54530\n54557\n54563\n54569\n54589\n54595\n54627\n54633\n54640\n54657\n54663\n54685\n54700\n54706\n54720\n54735\n54741\n54767\n54786\n54800\n54808\n54842\n54871\n54878\n54894\n54915\n54937\n54943\n54965\n54979\n54998\n55004\n55027\n55055\n55061\n55092\n55135\n55154\n55171\n55186\n55213\n55239\n55277\n55297\n55469\n55605\n55611\n55642\n55909\n55915\n55921\n55927\n55933\n55970\n56160\n56166\n56172\n56178\n56184\n56190\n56196\n56202\n56208\n56337\n56343\n56349\n56355\n56361\n56367\n56373\n56379\n56385\n5659\n5665\n56677\n56682\n56688\n56693\n56699\n56707\n56712\n56718\n5675\n5681\n56823\n5686\n5750\n5886\n5892\n5898\n5904\n5910\n5916\n5922\n6038\n6187\n6461\n6467\n6473\n6479\n6485\n6572\n6650\n6656\n6662\n6747\n6753\n6759\n6989\n6995\n7001\n7007\n7257\n7399\n7405\n7410\n7416\n7422\n7430\n7436\n7448\n7537\n7543\n7549\n7555\n7562\n7726\n788\n7910\n795\n798\n800\n8005\n8010\n8016\n8021\n8027\n8032\n808\n8107\n8113\n8119\n8397\n8403\n8409\n8415\n8421\n8427\n8433\n8439\n8445\n8451\n8457\n8463\n8469\n8475\n8539\n8765\n8771\n8777\n8783\n8789\n8795\n8801\n8807\n8813\n9077\n9098\n9104\n9110\n9116\n9122\n9128\n9134\n9140\n9146\n9152\n9158\n9442\n9448\n9454\n9460\n9466\n9472\n9478\n9484\n9490\n9496\n9502\n9508\n9745\n9751\n9757\n9763\n9769\n9775\n9781\n9787\n9793\n9799\n9805\n9811\n9817\n9880", "result_hash": "e3a37f8a922028f5d30b00833d1e5327", "num_rows": 7327}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT cards.layout FROM cards WHERE cards.keywords LIKE '%Flying%'": {"evaluation": "pass: incorrect", "result": "adventure\naugment\nflip\nhost\nleveler\nmeld\nmodal_dfc\nnormal\ntransform", "result_hash": "db90415e718a4df768a0aa90d54e9343", "num_rows": 9}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(T2.id) FROM sets AS T1 INNER JOIN cards AS T2 ON T1.setCode = T2.setCode WHERE T2.originalType = 'Summon - Angel' AND T2.subtypes <> 'Angel'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.id FROM cards AS T1 INNER JOIN cards AS T2 ON T1.id != T2.id WHERE T1.cardKingdomFoilId IS NOT NULL AND T2.cardKingdomFoilId IS NULL AND T1.colorIdentity = T2.colorIdentity AND T1.convertedManaCost = T2.convertedManaCost AND T1.name = T2.name": {"evaluation": "pass: incorrect", "result": "10\n1011\n1018\n1027\n1039\n107\n1103\n11385\n11415\n11453\n1148\n11502\n11536\n11550\n11578\n1161\n11668\n11678\n118\n11823\n11834\n1185\n120\n129\n12931\n12961\n13004\n13023\n13051\n13080\n13114\n13136\n13160\n13210\n13427\n13437\n13448\n13508\n13549\n13582\n13646\n13663\n13685\n13704\n13723\n13736\n13749\n13766\n13779\n13793\n13807\n13819\n13834\n13879\n13897\n13927\n13940\n13953\n13967\n13980\n14\n14014\n14026\n14038\n14067\n14089\n14108\n14133\n14162\n14179\n14206\n14216\n14238\n14298\n14324\n14356\n14502\n14841\n15335\n157\n16\n16052\n16081\n16102\n16120\n16140\n16161\n16183\n16217\n16250\n16280\n16295\n16310\n16331\n16353\n16379\n16403\n16434\n16458\n16490\n16525\n16600\n16627\n16657\n16677\n16703\n16726\n16746\n16768\n16791\n16838\n16848\n16933\n16990\n17150\n17193\n17296\n17327\n17362\n17387\n17409\n17433\n17451\n17467\n17497\n17529\n17539\n17769\n17802\n17837\n17882\n17928\n17965\n18040\n18050\n18060\n18080\n181\n18118\n18216\n18227\n18238\n18252\n18263\n18273\n18283\n18294\n18305\n18315\n18326\n18338\n18350\n18360\n18371\n18386\n18396\n18405\n18416\n18427\n18457\n18485\n18502\n18520\n18540\n18563\n18590\n18618\n18640\n18663\n18708\n18753\n18784\n18818\n18843\n19074\n19084\n19121\n19131\n19142\n19152\n19162\n19175\n19186\n19196\n19207\n19221\n19233\n19246\n19258\n19269\n19280\n19290\n19300\n19313\n19816\n19850\n19876\n19899\n19939\n19956\n19973\n19994\n20014\n20036\n20060\n20079\n20099\n20116\n20126\n20185\n20226\n20251\n20298\n20314\n20324\n20337\n20353\n20370\n204\n20783\n20809\n20842\n20870\n20885\n20899\n20915\n20932\n20944\n20974\n21002\n21041\n21060\n21089\n21118\n21158\n21179\n21199\n21208\n21269\n21313\n21344\n21362\n214\n21420\n21435\n21458\n21473\n21499\n21509\n21585\n21602\n21691\n22027\n22044\n22063\n22075\n22095\n22107\n22119\n22134\n22150\n22165\n22185\n22209\n22221\n2263\n22682\n22741\n228\n22883\n22894\n22904\n23\n23025\n23039\n23051\n23064\n23075\n23088\n23102\n23115\n23128\n23139\n23149\n23160\n23174\n23184\n23197\n23212\n23223\n23253\n23275\n23301\n23335\n23362\n23389\n2342\n23447\n23469\n23498\n23511\n23535\n23565\n23604\n23614\n23624\n23640\n23654\n23676\n23694\n23712\n23728\n23749\n23761\n23785\n23807\n23830\n23846\n23894\n23903\n23979\n23992\n24000\n24012\n24026\n24039\n24062\n24578\n24623\n24677\n24708\n24736\n24758\n24794\n24830\n24850\n25056\n25082\n25112\n25141\n25177\n25209\n25244\n25272\n253\n25343\n25354\n25369\n25386\n25410\n25422\n25432\n25442\n25477\n25493\n25506\n25519\n25532\n25546\n25557\n25569\n25580\n25594\n25603\n25617\n25634\n25649\n25659\n25670\n25688\n25731\n25743\n26\n26082\n26102\n26126\n26151\n26166\n26186\n26201\n26215\n26231\n26258\n26275\n26301\n26315\n26325\n265\n27268\n27299\n27325\n27345\n27372\n27388\n27414\n27452\n27474\n27508\n27531\n27565\n27579\n27593\n27613\n27633\n27662\n27673\n27683\n27699\n27715\n27731\n27746\n27758\n27771\n27783\n27795\n27808\n27823\n27840\n27853\n27869\n27884\n27914\n27925\n27935\n27951\n27963\n27978\n27991\n28009\n28023\n28036\n28056\n28075\n28092\n28111\n28126\n28163\n28174\n28184\n282\n28213\n28230\n28248\n28264\n28283\n28299\n28316\n28328\n28342\n28361\n28373\n284\n28420\n28430\n28454\n28475\n28493\n28506\n28518\n28536\n28559\n28574\n28594\n28609\n28625\n28662\n28672\n28682\n28698\n28715\n28729\n28750\n28764\n28780\n28808\n28825\n28843\n28861\n28876\n28916\n28926\n28941\n28952\n28979\n28995\n29015\n29027\n29047\n29069\n29080\n29097\n29110\n29126\n29176\n29189\n29199\n29236\n29256\n29272\n29300\n29312\n29333\n29357\n29371\n29387\n29401\n29417\n29465\n29478\n29488\n29532\n29561\n29588\n29614\n29640\n29680\n29705\n29737\n29784\n29797\n29807\n29895\n29961\n29999\n30041\n30085\n30127\n30140\n30150\n30185\n30248\n31983\n32005\n32035\n32069\n32128\n3243\n3254\n3268\n3279\n3289\n3300\n33097\n33115\n33138\n33164\n33187\n3321\n3324\n33269\n33296\n33333\n33372\n3341\n3351\n3362\n3372\n3375\n33763\n33772\n33782\n33792\n33805\n33817\n3383\n33842\n33854\n33867\n33880\n33894\n33907\n33918\n33930\n33970\n33984\n33995\n34003\n34015\n34029\n3404\n34051\n34064\n34075\n34084\n34094\n34108\n34124\n34138\n34150\n34164\n34178\n34189\n342\n34210\n34223\n34241\n34256\n3427\n34281\n34298\n34317\n34337\n34351\n34364\n3438\n34393\n34408\n34419\n3443\n34460\n345\n34528\n34547\n34574\n34609\n34637\n34670\n3469\n34713\n34735\n3477\n34798\n34806\n34825\n34853\n34874\n34903\n34925\n34957\n3497\n3498\n3499\n35\n35010\n35020\n35079\n35098\n35122\n35143\n35164\n35180\n35196\n35227\n35322\n35356\n35366\n35392\n35423\n35446\n35489\n3553\n35565\n35591\n35621\n35649\n35687\n3571\n3580\n35850\n35889\n35910\n35934\n35956\n3598\n36002\n36040\n36069\n361\n36118\n36153\n36164\n36174\n3622\n36234\n36266\n3630\n36318\n3634\n36356\n3638\n36442\n36475\n36497\n36516\n36552\n36578\n36601\n36617\n36645\n36660\n36676\n36697\n36713\n36741\n36760\n36774\n36783\n3683\n3692\n36933\n36947\n36969\n36984\n36997\n37008\n37022\n37035\n37052\n37069\n3709\n37103\n37118\n37135\n37171\n37180\n3719\n3729\n3740\n37443\n37463\n37479\n37499\n37512\n37525\n37535\n37546\n37559\n37574\n37589\n37599\n37607\n37620\n37630\n37650\n37674\n37684\n3776\n37804\n37820\n37831\n37860\n3788\n37902\n3793\n3805\n3820\n38246\n3827\n38311\n38382\n38403\n38413\n38423\n38434\n38443\n38452\n38464\n38479\n38501\n38518\n38535\n38576\n38597\n38619\n38637\n38646\n38662\n38699\n38733\n3877\n3880\n38851\n38878\n38899\n38913\n38926\n38938\n38952\n38967\n38979\n38991\n39011\n39038\n39066\n39101\n39128\n39141\n39156\n39176\n392\n3930\n394\n39421\n39443\n39454\n3964\n39668\n39678\n39697\n39715\n39726\n3974\n39751\n39768\n39783\n398\n3982\n3985\n39885\n39906\n39920\n39942\n39958\n4002\n4015\n4029\n40347\n40375\n40402\n40430\n40449\n40472\n40482\n40497\n4051\n40536\n40566\n40597\n40637\n40694\n40734\n40792\n4082\n4088\n40902\n4099\n41030\n4104\n41049\n41058\n41068\n41079\n41091\n4111\n41128\n4116\n4125\n4137\n41410\n41425\n41439\n41451\n41465\n4148\n41502\n41515\n41528\n41546\n4158\n41630\n4171\n4184\n4196\n4208\n4219\n423\n427\n4282\n4291\n43004\n43054\n43084\n43094\n43102\n43111\n4321\n4332\n43353\n43363\n434\n4350\n436\n4372\n4381\n4392\n4400\n44101\n44126\n44146\n44162\n44178\n44206\n44219\n44235\n44246\n44256\n4432\n4446\n4457\n4460\n4466\n44709\n4476\n4487\n44918\n4493\n44952\n45004\n45018\n45033\n45045\n45066\n45082\n45096\n45106\n45129\n45142\n45164\n45176\n45185\n45199\n45208\n45219\n45241\n4527\n45308\n45339\n4551\n4571\n45809\n45855\n4593\n45979\n46009\n46033\n4605\n46078\n46098\n46108\n46133\n46160\n46174\n4619\n46205\n46214\n46230\n46247\n46267\n46286\n46296\n46305\n4634\n4646\n46525\n46549\n46571\n46596\n46632\n46651\n4668\n46704\n46735\n46767\n468\n46825\n46863\n46911\n46943\n46964\n46976\n46986\n47017\n47034\n47063\n47092\n47105\n47133\n47147\n47164\n4718\n47199\n4722\n47235\n47245\n47326\n47345\n47368\n47389\n47411\n47435\n47457\n47473\n47487\n47506\n47524\n47549\n47561\n47571\n47581\n4775\n4780\n47828\n47849\n47863\n47882\n479\n4792\n47953\n47986\n48012\n48033\n48063\n48092\n48123\n48143\n48191\n48209\n48218\n48227\n48246\n48256\n48275\n48293\n48321\n48352\n48395\n48404\n48413\n48422\n48462\n48479\n48501\n48527\n48544\n48565\n4858\n486\n48612\n48634\n48647\n48669\n48700\n48714\n4876\n48774\n48783\n48804\n48835\n48876\n4890\n48940\n48977\n48991\n49008\n4903\n4905\n491\n49147\n4919\n49199\n49207\n49216\n49226\n4933\n4944\n4953\n4963\n4974\n4987\n5\n5003\n50115\n50236\n50256\n50279\n50340\n50381\n50410\n50429\n50447\n5048\n50496\n50510\n5053\n50557\n50577\n50608\n50618\n50995\n51025\n51054\n51109\n51390\n51402\n51413\n51425\n51437\n51448\n51458\n51470\n51482\n51524\n51554\n51569\n51606\n51640\n51668\n51689\n51725\n51751\n51788\n51798\n51817\n51864\n51902\n51932\n52082\n52111\n52129\n52155\n52185\n52222\n52235\n52248\n52267\n52282\n52299\n52311\n52326\n52344\n52356\n52370\n52384\n52395\n52412\n52425\n52456\n52580\n52614\n52643\n52682\n52734\n53112\n53223\n53295\n53368\n53399\n53423\n53436\n53449\n53461\n53480\n53501\n54062\n54097\n54117\n54152\n54171\n54198\n54234\n54252\n54286\n54307\n54317\n54341\n54363\n5452\n5487\n5513\n5539\n55481\n55501\n5553\n55546\n55566\n55583\n55612\n55669\n55693\n55723\n55760\n55785\n55809\n55839\n55863\n55911\n55922\n55931\n55956\n55973\n55995\n56014\n56035\n56055\n56071\n56084\n56105\n56116\n56129\n56160\n56174\n56188\n56207\n5634\n56415\n56457\n56507\n56568\n56607\n56677\n56692\n56701\n5672\n56762\n56804\n6\n6079\n6100\n6134\n6149\n6169\n6192\n6211\n6229\n6254\n6274\n6295\n6320\n6773\n6796\n6808\n6827\n6848\n6870\n6909\n6935\n6992\n7001\n7039\n7095\n7106\n7117\n7129\n7144\n7161\n7174\n7186\n7203\n7217\n7232\n7262\n7294\n7322\n7338\n7358\n7377\n7407\n7430\n7456\n7488\n7515\n7545\n7572\n7617\n7655\n7698\n7744\n7772\n7806\n7837\n817\n83\n848\n860\n870\n887\n9\n916\n9193\n9204\n927\n939\n9548\n9560\n966\n978\n9864\n99", "result_hash": "1cc209d3bee57f644540865146161f13", "num_rows": 12878}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT id FROM cards WHERE duelDeck = 'a'": {"evaluation": "pass: correct", "result": "14440\n14441\n14442\n14443\n14444\n14445\n14446\n14447\n14448\n14449\n14450\n14451\n14452\n14453\n14454\n14455\n14456\n14457\n14458\n14459\n14460\n14461\n14462\n14463\n14464\n14465\n14466\n14467\n14468\n14469\n14470\n14502\n14503\n14504\n14505\n14506\n14507\n14508\n14509\n14510\n14511\n14512\n14513\n14514\n14515\n14516\n14517\n14518\n14519\n14520\n14521\n14522\n14523\n14524\n14525\n14526\n14527\n14528\n14529\n14530\n14531\n14532\n14533\n14534\n14535\n14566\n14567\n14568\n14569\n14570\n14571\n14572\n14573\n14574\n14575\n14576\n14577\n14578\n14579\n14580\n14581\n14582\n14583\n14584\n14585\n14586\n14587\n14588\n14589\n14590\n14591\n14592\n14593\n14594\n14628\n14629\n14630\n14631\n14632\n14633\n14634\n14635\n14636\n14637\n14638\n14639\n14640\n14641\n14642\n14643\n14644\n14645\n14646\n14647\n14648\n14649\n14650\n14651\n14652\n14653\n14654\n14655\n14656\n14657\n14658\n14691\n14692\n14693\n14694\n14695\n14696\n14697\n14698\n14699\n14700\n14701\n14702\n14703\n14704\n14705\n14706\n14707\n14708\n14709\n14710\n14711\n14712\n14713\n14714\n14715\n14716\n14717\n14718\n14719\n14720\n14721\n14722\n14723\n14724\n14725\n14762\n14763\n14764\n14765\n14766\n14767\n14768\n14769\n14770\n14771\n14772\n14773\n14774\n14775\n14776\n14777\n14778\n14779\n14780\n14781\n14782\n14783\n14784\n14785\n14786\n14787\n14788\n14789\n14790\n14791\n14792\n14793\n14794\n14795\n14796\n14797\n14798\n14799\n14841\n14842\n14843\n14844\n14845\n14846\n14847\n14848\n14849\n14850\n14851\n14852\n14853\n14854\n14855\n14856\n14857\n14858\n14859\n14860\n14861\n14862\n14863\n14864\n14865\n14866\n14867\n14868\n14869\n14870\n14871\n14872\n14873\n14874\n14875\n14876\n14877\n14878\n14879\n14880\n14881\n14882\n14883\n14884\n14885\n14886\n14922\n14923\n14924\n14925\n14926\n14927\n14928\n14929\n14930\n14931\n14932\n14933\n14934\n14935\n14936\n14937\n14938\n14939\n14940\n14941\n14942\n14943\n14944\n14945\n14946\n14947\n14948\n14949\n14950\n14951\n14952\n14953\n14954\n14955\n14956\n14957\n14958\n14959\n14960\n14961\n14962\n15005\n15006\n15007\n15008\n15009\n15010\n15011\n15012\n15013\n15014\n15015\n15016\n15017\n15018\n15019\n15020\n15021\n15022\n15023\n15024\n15025\n15026\n15027\n15028\n15029\n15030\n15031\n15032\n15033\n15034\n15035\n15036\n15037\n15038\n15039\n15040\n15041\n15042\n15043\n15044\n15045\n15046\n15047\n15082\n15083\n15084\n15085\n15086\n15087\n15088\n15089\n15090\n15091\n15092\n15093\n15094\n15095\n15096\n15097\n15098\n15099\n15100\n15101\n15102\n15103\n15104\n15105\n15106\n15107\n15108\n15109\n15110\n15111\n15112\n15113\n15114\n15115\n15116\n15117\n15118\n15119\n15120\n15121\n15122\n15123\n15124\n15125\n15126\n15174\n15175\n15176\n15177\n15178\n15179\n15180\n15181\n15182\n15183\n15184\n15185\n15186\n15187\n15188\n15189\n15190\n15191\n15192\n15193\n15194\n15195\n15196\n15197\n15198\n15199\n15200\n15201\n15202\n15203\n15204\n15205\n15206\n15207\n15208\n15209\n15210\n15211\n15212\n15213\n15254\n15255\n15256\n15257\n15258\n15259\n15260\n15261\n15262\n15263\n15264\n15265\n15266\n15267\n15268\n15269\n15270\n15271\n15272\n15273\n15274\n15275\n15276\n15277\n15278\n15279\n15280\n15281\n15282\n15283\n15284\n15285\n15286\n15287\n15288\n15289\n15290\n15291\n15292\n15293\n15294\n15295\n15335\n15336\n15337\n15338\n15339\n15340\n15341\n15342\n15343\n15344\n15345\n15346\n15347\n15348\n15349\n15350\n15351\n15352\n15353\n15354\n15355\n15356\n15357\n15358\n15359\n15360\n15361\n15362\n15363\n15364\n15365\n15366\n15367\n15368\n15369\n15370\n15371\n15372\n15373\n15374\n15375\n15423\n15424\n15425\n15426\n15427\n15428\n15429\n15430\n15431\n15432\n15433\n15434\n15435\n15436\n15437\n15438\n15439\n15440\n15441\n15442\n15443\n15444\n15445\n15446\n15447\n15448\n15449\n15450\n15451\n15452\n15453\n15454\n15455\n15456\n15457\n15458\n15459\n15460\n15461\n15462\n15463\n15504\n15505\n15506\n15507\n15508\n15509\n15510\n15511\n15512\n15513\n15514\n15515\n15516\n15517\n15518\n15519\n15520\n15521\n15522\n15523\n15524\n15525\n15526\n15527\n15528\n15529\n15530\n15531\n15532\n15533\n15534\n15535\n15536\n15569\n15570\n15571\n15572\n15573\n15574\n15575\n15576\n15577\n15578\n15579\n15580\n15581\n15582\n15583\n15584\n15585\n15586\n15587\n15588\n15589\n15590\n15591\n15592\n15593\n15594\n15595\n15596\n15597\n15598\n15599\n15600\n15601\n15602\n15603\n15604\n15605\n15606\n15607\n15608\n15644\n15645\n15646\n15647\n15648\n15649\n15650\n15651\n15652\n15653\n15654\n15655\n15656\n15657\n15658\n15659\n15660\n15661\n15662\n15663\n15664\n15665\n15666\n15667\n15668\n15669\n15670\n15671\n15672\n15673\n15674\n15675\n15676\n15677\n15678\n15679\n15680\n15681\n15682\n15683\n15720\n15721\n15722\n15723\n15724\n15725\n15726\n15727\n15728\n15729\n15730\n15731\n15732\n15733\n15734\n15735\n15736\n15737\n15738\n15739\n15740\n15741\n15742\n15743\n15744\n15745\n15746\n15747\n15748\n15749\n15750\n15751\n15752\n15753\n15754\n15790\n15791\n15792\n15793\n15794\n15795\n15796\n15797\n15798\n15799\n15800\n15801\n15802\n15803\n15804\n15805\n15806\n15807\n15808\n15809\n15810\n15811\n15812\n15813\n15814\n15815\n15816\n15817\n15818\n15819\n15820\n15821\n15822\n15855\n15856\n15857\n15858\n15859\n15860\n15861\n15862\n15863\n15864\n15865\n15866\n15867\n15868\n15869\n15870\n15871\n15872\n15873\n15874\n15875\n15876\n15877\n15878\n15879\n15880\n15881\n15882\n15883\n15884\n15885\n15918\n15919\n15920\n15921\n15922\n15923\n15924\n15925\n15926\n15927\n15928\n15929\n15930\n15931\n15932\n15933\n15934\n15935\n15936\n15937\n15938\n15939\n15940\n15941\n15942\n15943\n15944\n15945\n15946\n15947\n15948\n15949\n15950\n15951\n21221\n21222\n21223\n21224\n21225\n21226\n21227\n21228\n21229\n21230\n21231\n21232\n21233\n21234\n21235\n21236\n21237\n21238\n21239\n21240\n21241", "result_hash": "6a5689bd30dae75ad933c82031b62790", "num_rows": 804}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT edhrecRank FROM cards WHERE frameVersion = '2015'": {"evaluation": "pass: correct", "result": "1\n1001\n10019\n10029\n10043\n10056\n10066\n10078\n10093\n10102\n10119\n1013\n10143\n10153\n10168\n10182\n10194\n10203\n10215\n10226\n10241\n10257\n1027\n10285\n10294\n10306\n1032\n10332\n10340\n10351\n10365\n10378\n10386\n10396\n10406\n10422\n10430\n1044\n1045\n10460\n10470\n10480\n10490\n10507\n10522\n10531\n10547\n10562\n10579\n10596\n10606\n10623\n10637\n10649\n1066\n10678\n10690\n10700\n10717\n10732\n10740\n10758\n10767\n10780\n10792\n10814\n10826\n1084\n10857\n10866\n10883\n10892\n10909\n10929\n10942\n10955\n10975\n10985\n11000\n11014\n1103\n1104\n11050\n11064\n11080\n11094\n11110\n1112\n11139\n11156\n11169\n1118\n11192\n11205\n11219\n11230\n11242\n11257\n11266\n11283\n11297\n1131\n11319\n11331\n11348\n1137\n11381\n11399\n11414\n11434\n11445\n11459\n11476\n11488\n11495\n11508\n11524\n11533\n11543\n11553\n11566\n11579\n11594\n11601\n11612\n11622\n11635\n11655\n11669\n11680\n11691\n11702\n11714\n11728\n11741\n1175\n11767\n11780\n1180\n11815\n1183\n11846\n11855\n11867\n11887\n11901\n1192\n11934\n11957\n11973\n11988\n120\n12011\n12021\n12032\n12043\n12063\n12082\n12094\n12105\n12114\n12130\n12147\n1216\n12170\n12185\n12198\n12210\n12237\n12246\n12263\n12274\n12283\n12298\n12320\n12332\n12347\n12360\n12375\n12389\n12399\n1241\n1242\n12444\n1246\n12473\n12490\n12501\n1252\n12529\n12542\n12554\n12568\n1258\n12590\n12604\n12620\n12634\n12647\n1266\n12680\n1270\n12713\n12724\n12738\n12749\n12763\n12777\n12789\n12805\n1282\n1283\n1284\n1285\n12866\n1288\n12890\n12903\n12916\n12937\n12950\n12967\n12985\n1300\n13016\n13023\n13041\n13055\n13067\n13075\n13091\n13107\n1312\n13131\n13149\n13158\n13176\n13193\n13207\n13226\n13246\n1326\n13275\n13292\n13305\n1332\n13339\n13359\n13374\n13387\n13401\n13415\n13432\n1345\n13458\n1347\n13482\n13497\n13511\n13523\n13535\n13555\n13569\n13579\n13594\n13604\n13624\n13638\n13651\n13665\n13675\n13692\n13703\n13719\n1373\n1375\n13769\n13784\n13794\n13808\n1382\n1384\n13850\n13863\n1388\n13892\n13906\n13919\n13931\n13954\n13967\n13988\n140\n14010\n1403\n1405\n14060\n14074\n1409\n14101\n14120\n14132\n14147\n14159\n14173\n14190\n14207\n14226\n14241\n14256\n14275\n14293\n1431\n14323\n14339\n14357\n1437\n14385\n14399\n14414\n14427\n14440\n14456\n14479\n14489\n14512\n14529\n14539\n1456\n14575\n14594\n14608\n14631\n14646\n1466\n14673\n14693\n14706\n14726\n14739\n14751\n1477\n14788\n14799\n14814\n14826\n14840\n14856\n14879\n1489\n1491\n14924\n14939\n14959\n14980\n15\n15015\n15030\n15045\n15058\n15078\n15097\n15105\n15120\n15140\n15162\n15176\n15188\n1520\n15212\n15230\n15256\n15271\n1529\n15308\n15321\n15331\n15347\n1536\n15375\n1539\n15412\n15427\n15449\n1548\n15495\n1551\n15543\n15558\n1557\n15581\n15592\n15610\n15627\n1564\n15652\n1567\n15687\n157\n15715\n15733\n15751\n15777\n15786\n15807\n1582\n15833\n15854\n1587\n15886\n159\n1592\n15936\n1595\n15979\n160\n16010\n16034\n16053\n16075\n16085\n16104\n16123\n16134\n16153\n1617\n16188\n16211\n1623\n16244\n16263\n16281\n16302\n16336\n1635\n16363\n16394\n16406\n16423\n16437\n16454\n16475\n16496\n16514\n16539\n16554\n1657\n1659\n1661\n16633\n16657\n1667\n16691\n16711\n1673\n16748\n16775\n168\n16820\n1684\n16857\n16878\n1691\n16930\n16952\n16970\n1699\n17008\n17023\n17040\n1706\n17077\n17092\n17108\n1713\n17148\n1717\n17188\n1721\n1723\n1725\n1728\n1730\n17319\n1734\n17355\n17378\n17397\n17411\n17438\n17474\n1749\n17505\n17535\n17554\n17582\n17615\n17638\n17669\n17694\n17708\n17736\n17757\n1778\n17801\n17832\n1786\n17889\n17903\n17925\n17954\n17984\n18009\n18031\n18057\n18069\n18098\n1812\n18144\n1818\n18203\n1822\n1825\n18265\n18289\n18304\n18332\n18358\n1838\n184\n18426\n18442\n1847\n18494\n18528\n1856\n18596\n18629\n18645\n18678\n187\n1873\n1877\n18789\n18824\n1886\n18894\n1892\n18958\n18987\n1902\n19065\n1909\n19109\n1913\n19157\n1920\n1923\n19270\n19304\n1934\n19362\n19387\n1942\n1946\n19498\n19527\n19556\n1958\n19600\n19639\n19660\n19694\n19723\n19748\n1977\n198\n19829\n19857\n1989\n19922\n19944\n19974\n200\n2003\n20086\n20127\n2016\n2020\n20240\n20266\n2030\n2033\n20360\n20382\n2042\n2047\n20497\n2053\n20564\n20595\n2061\n20659\n2069\n20727\n20759\n20792\n2082\n20869\n209\n2098\n2105\n2113\n2120\n2129\n2137\n2144\n2151\n2160\n2168\n2176\n2185\n2195\n2201\n2211\n2221\n2229\n2240\n2248\n2258\n2266\n2273\n2282\n2291\n2299\n2305\n2314\n2323\n2331\n2339\n2346\n2354\n2362\n2371\n238\n2389\n2397\n2403\n2411\n2424\n2436\n2444\n2451\n2460\n2469\n2477\n2488\n2497\n2504\n2514\n2523\n2531\n254\n2547\n2554\n2563\n2571\n258\n2589\n2597\n2605\n2616\n2624\n2637\n2644\n2651\n2660\n267\n2679\n2688\n2696\n2702\n2710\n2718\n2727\n2737\n2745\n2752\n276\n2768\n2776\n2784\n2792\n280\n2808\n2816\n2823\n2830\n2840\n285\n286\n2868\n2875\n2882\n2890\n2899\n2906\n2916\n2927\n2936\n2944\n2952\n2960\n2969\n2979\n2986\n2995\n3002\n3011\n3020\n3030\n304\n3047\n3056\n3064\n3074\n3084\n3091\n31\n3109\n3118\n3128\n3136\n3143\n3150\n3160\n3168\n3175\n3182\n3191\n3200\n321\n3218\n3225\n3234\n3242\n3252\n3263\n3270\n3280\n3289\n3299\n3308\n3317\n3327\n3336\n3349\n3358\n3365\n3375\n3385\n3395\n3402\n3412\n3421\n3429\n344\n3449\n3457\n3466\n3475\n3483\n3490\n35\n3506\n3514\n3525\n3535\n3543\n3554\n3563\n3571\n3581\n3590\n3599\n3608\n3619\n3628\n3637\n3645\n3653\n3665\n3675\n3682\n3690\n370\n3712\n3721\n3731\n3741\n3751\n3762\n3773\n3784\n3791\n38\n381\n3819\n3829\n3837\n3846\n3853\n3863\n3872\n3885\n3898\n3905\n3913\n3922\n3931\n3943\n3952\n396\n3969\n3979\n399\n3999\n4006\n4013\n4021\n403\n404\n4052\n4060\n4071\n4081\n409\n410\n4109\n4116\n4123\n4133\n4144\n4153\n4162\n417\n418\n4190\n420\n421\n422\n4229\n424\n4247\n4255\n4263\n4272\n4280\n429\n4298\n4306\n4315\n4325\n4333\n4347\n4358\n4366\n4376\n4387\n4395\n4402\n4410\n4421\n443\n4438\n4446\n4458\n4465\n4475\n4484\n4495\n4501\n451\n4520\n4530\n4539\n4546\n4556\n4565\n4573\n4582\n4591\n4600\n4611\n462\n4630\n4639\n4651\n4660\n4670\n4684\n4692\n4701\n4710\n4719\n4727\n4742\n4751\n4760\n4769\n4779\n4786\n4795\n4801\n4812\n4826\n4838\n4852\n4862\n4870\n4882\n4892\n49\n4907\n492\n493\n4943\n4958\n4969\n4980\n4989\n500\n501\n502\n5028\n5038\n5048\n5062\n5072\n5084\n5093\n5104\n5117\n5130\n514\n5150\n5162\n5176\n5186\n5195\n5201\n5212\n5224\n5238\n5245\n5260\n5270\n5282\n5292\n5300\n5311\n5320\n5331\n5341\n535\n5359\n5371\n5381\n5391\n5401\n5415\n5425\n5436\n5445\n5455\n5467\n5475\n5487\n5496\n5505\n5517\n5528\n554\n555\n556\n557\n558\n5594\n5608\n5618\n5637\n5650\n5659\n5673\n5687\n5697\n5706\n5717\n5726\n5737\n5751\n5762\n5771\n5780\n5791\n58\n5816\n5823\n5833\n5845\n5855\n5866\n5878\n5886\n5893\n5900\n5917\n5926\n5936\n5945\n5953\n5965\n5979\n5987\n5996\n6007\n6018\n603\n604\n6058\n6069\n6080\n609\n61\n6114\n6124\n6137\n6148\n616\n617\n618\n6190\n620\n6211\n6223\n6231\n6243\n6253\n6268\n628\n6289\n6298\n6306\n6317\n6330\n6339\n6356\n6369\n6380\n6397\n6405\n6416\n6432\n6446\n6462\n6475\n6484\n6494\n6502\n6511\n6523\n6532\n6540\n6554\n6566\n6576\n6588\n66\n6608\n662\n6632\n6644\n6657\n6665\n6673\n669\n670\n671\n6723\n6734\n6744\n6751\n6763\n6774\n6785\n6795\n6804\n6819\n683\n684\n6851\n6866\n6876\n6889\n6897\n6909\n6918\n6927\n6939\n6953\n6968\n6978\n699\n7002\n7014\n7027\n7038\n7046\n7054\n7063\n7072\n7089\n71\n711\n7123\n714\n7156\n7171\n7188\n720\n7210\n722\n7229\n7238\n7251\n7263\n7275\n7288\n7296\n7306\n7315\n733\n7347\n7357\n737\n7382\n7394\n7405\n742\n7432\n7444\n746\n7467\n7476\n749\n7504\n7516\n7524\n7539\n755\n7563\n7576\n759\n7599\n7607\n7624\n7637\n7651\n7663\n7672\n7686\n7696\n7704\n7718\n7729\n774\n7750\n7762\n7772\n7786\n7797\n7805\n7818\n7829\n7843\n7851\n7861\n7875\n7886\n7901\n7912\n7922\n7932\n7944\n7953\n7964\n7978\n7991\n8000\n8013\n8027\n8039\n805\n8062\n8075\n809\n81\n8118\n8133\n8148\n8158\n817\n8181\n8195\n8209\n8218\n8234\n8249\n8258\n8269\n8282\n8296\n8305\n832\n8336\n835\n8360\n837\n8382\n8394\n8410\n843\n8442\n8452\n8468\n848\n8491\n8501\n8514\n8526\n8537\n8549\n8561\n8576\n8583\n8596\n8603\n8616\n8628\n8639\n865\n8668\n8682\n8695\n8705\n8716\n8726\n8738\n8745\n876\n8771\n8786\n88\n8807\n8817\n883\n8838\n8846\n886\n8872\n8886\n8894\n8903\n8915\n8924\n8939\n8952\n8969\n8989\n8999\n9005\n9016\n9025\n9035\n9045\n9055\n9067\n9085\n9098\n9104\n9113\n9125\n9134\n9143\n916\n9170\n918\n9192\n9208\n9223\n9235\n9245\n926\n9271\n9281\n9295\n9304\n9313\n9324\n9339\n9349\n9362\n938\n939\n9401\n942\n9431\n9447\n9461\n9470\n9481\n9495\n9506\n9519\n9535\n9545\n9559\n9568\n9577\n9586\n96\n9615\n9626\n9636\n9647\n9659\n9667\n9680\n969\n9704\n9715\n9730\n9741\n9755\n9768\n9781\n9790\n9800\n9816\n9827\n9838\n9851\n9868\n9880\n9895\n9903\n9913\n993\n9941\n9952\n9964\n9971\n9983\n9991", "result_hash": "c9a5ed00bc50b31a47bf5591964fddf6", "num_rows": 10909}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT cards.artist FROM cards INNER JOIN set_translations AS T2 ON cards.setCode = T2.setCode WHERE T2.language = 'Chinese Simplified'": {"evaluation": "pass: incorrect", "result": "Aaron Boyd\nAdam Paquette\nAdi Granov\nAdrian Smith\nAlan Pollack\nAlayna Danner\nAleksi Briclot\nAlex Horley-Orlandelli\nAlexander Forssberg\nAllen Williams\nAmy Weber\nAnastasia Ovchinnikova\nAndrea Radeck\nAndrew Goldhawk\nAndrew Murray\nAndrey Kuzinskiy\nAnna Steinbauer\nAnthony Francisco\nAnthony Palumbo\nAntonio Bravo\nApril Lee\nArnie Swekel\nAustin Hsu\nBabyson Chen & Uzhen Lin\nBastien L. Deharme\nBen Maier\nBen Wootten\nBill Sienkiewicz\nBlackie del Rio\nBob Petillo\nBradley Williams\nBrandon Dorman\nBrian Despain\nBrian Hagan\nBrian Snõddy\nBrom\nBryan Talbot\nBryon Wackwitz\nCaio Monteiro\nCara Mitten\nCarl Frank\nCarol Heyer\nCecil Fernando\nCharles Urbach\nChengo McFlingers\nChippy & Matthew D. Wilson\nChris Cold\nChris J. Anderson\nChris Rahn\nChris Seaman\nChristopher Burdett\nChristopher Rush\nCiruelo\nCliff Nielsen\nClint Langley\nClyde Caldwell\nColin Boyer\nCorey D. Macourek\nCos Koniotis\nCraig J Spearing\nCristi Balanescu\nCyril Van Der Haegen\nD. Alexander Gregory\nD. J. Cleland-Hura\nDaisuke Izuka\nDameon Willich\nDan Frazier\nDan Seagrave\nDaniel Gelon\nDaniel R. Horne\nDany Orizio\nDarek Zabrocki\nDarrell Riche\nDave DeVries\nDave Kendall\nDavid Day\nDavid Ho\nDavid Martin\nDavid O'Connor\nDavid Rapoza\nDavid Seguin\nDenman Rooke\nDermot Power\nDiTerlizzi\nDmitry Burmak\nDominick Domingo\nDonato Giancola\nDoug Keith\nDrew Baker\nDylan Martens\nEdward P. Beard, Jr.\nEfrem Palacios\nEmrah Elmasli\nEric Deschamps\nEric Peterson\nEric Velhagen\nErica Yang\nEvan Shipard\nEvyn Fong\nFay Jones\nFlorian de Gesincourt\nForrest Imel\nFrank Kelly Freas\nFred Fields\nFred Hooper\nFuzichoco\nGabor Szikszai\nGao Yan\nGary Ruddell\nGeofrey Darrow & I. Rabarot\nGerry Grace\nGlen Angus & Arnie Swekel\nGoran Josic\nGreg Hildebrandt & Tim Hildebrandt\nGreg Simanson\nGrzegorz Rutkowski\nHannibal King\nHe Jiancheng\nHenry G. Higginbotham\nHeonhwa Choe\nHiro Izawa\nHitowa\nHozan Shinomaru\nIain McCaig\nIan Miller\nIlse Gort\nIris Compiet\nIttoku\nJ. W. Frost\nJOZ\nJaime Jones\nJakub Kasper\nJames Allen\nJames Bernardin\nJames Kei\nJames Ryman\nJames Zapata\nJana Schirmer & Johannes Voss\nJanine Johnston\nJason A. Engle\nJason Chan\nJason Kang\nJasper Sandner\nJedd Chevrier\nJeff Easley\nJeff Miracola\nJeff Reitz\nJeff Simpson\nJehan Choo\nJenn Ravenna Tran\nJeremy Jarvis\nJeremy Wilson\nJesper Ejsing\nJi Yong\nJim Nelson\nJinho Bae\nJoel Biske\nJohan Grenier\nJohannes Voss\nJohn Bolton\nJohn Donahue\nJohn Howe\nJohn Matson\nJohn Silva\nJohn Thacker\nJon Foster\nJonas De Ro\nJose Cabrera\nJosh Hass\nJosu Hernaiz\nJulie Dillon\nJunko Taguchi\nJustin Murray\nJustin Sweet\nKaida Yuji\nKaja Foglio & Phil Foglio\nKarl Kopinski\nKeith Garletts\nKekai Kotaki\nKensuke Okabayashi\nKev Brockschmidt\nKevin Dobler\nKhang Le\nKim Sokol\nKipling West\nKotakan\nKu Xueming\nLack\nLarry Elmore\nLars Grant-West\nLeesha Hannigan\nLie Setiawan\nLius Lasahido\nLiz Danforth\nLubov\nLucas Graciano\nM. W. Kaluta & DiTerlizzi\nMaddie Julyk\nMagali Villeneuve\nMarc Fishman\nMarcelo Vignali\nMarco Teixeira\nMark A. Nelson\nMark Brill\nMark Hyzer\nMark Romanoski\nMark Winters\nMartin McKenna\nMartina Pilcerova\nMasuda Mikio\nMatt Cavotta\nMatt Stewart\nMatthew D. Wilson\nMcLean Kendree\nMiao Aili\nMichael Bruinsma\nMichael Danza\nMichael Komarck\nMichael Ryan\nMichele Parisi\nMiho Midorikawa\nMike Burns\nMike Kerr\nMike Ploog\nMike Sass\nMiles Johnston\nMin Yum\nMitch Cotie\nMonte Michael Moore\nNaochika Morishita\nNelson DeCastro\nNicholas Gregory\nNick Southam\nNils Hamm\nNorikatsu Miyoshi\nNéNé Thomas\nNéNé Thomas & Phillip Mosness\nOmar Rayyan\nPaolo Parente\nPat Lee\nPat Morrissey\nPatrick Ho\nPaul Bonner\nPaul Lee\nPete Venters\nPeter Mohrbacher\nPhilip Straub\nPiotr Dura\nQiao Dafu\nQuinton Hoover & Val Mayerik\nRaita Kazama\nRandis Albion\nRandy Elliott\nRandy Vargas\nRay Lago\nRebecca Guay\nRebekah Lynn\nRichard Sardinha\nRichard Whitters\nRick Emond\nRob Alexander\nRobert Bliss\nRoger Raupp\nRomas Kukalis\nRon Chironna\nRon Spears & Wayne Reynolds\nRon Walotsky\nRuth Thompson\nRyan Barger\nRyan Yee\nRyota-H\nSam Burley\nSam Wolfe Connelly\nSandra Everingham\nSara Winters\nScott Bailey\nScott Hampton\nScott M. Fischer\nSean McConnell\nSean Sevestre\nShawn Wood\nShishizaru\nSidharth Chaturvedi\nSimon Dominic\nSolomon Au Yeung\nStanton Feng\nStephan Martiniere\nStephen L. Walsh\nSteve Argyle\nSteve Firchow\nSteve Prescott\nSteven Belledin\nSue Ellen Brown\nSung Choi\nSuzanne Helmigh\nTada\nTed Galaday\nTerese Nielsen\nTerese Nielsen & Ron Spencer\nTerry Springer\nThomas Gianni\nTianhua X\nTitus Lunter\nTom Babbey\nTom Kyffin\nToma Feizo Gas\nTomasz Jedruszek\nTony Foti\nTony Szczudlo\nToshiaki Takayama\nTrevor Hairsine\nTsutomu Kawade\nTyler Walpole\nUna Fricker\nVal Mayerik\nVictor Adame Minguez\nVincent Evans\nVolkan Baǵa\nWarren Mahy\nWayne Reynolds\nWhit Brachna\nWilliam O'Connor\nWilliam Wu\nWinona Nelson\nWylie Beckert\nXiaoDi Jin\nYW Tang\nYan Li\nYefim Kligerman\nYigit Koroglu\nYokota Katsumi\nYoshino Himori\nYukie Tajima\nZak Plucinski\nZhang Jiazhen\nZoltan Boros\njD\nrk post & Mark Tedin\n羽山晃平", "result_hash": "253fa8532adc9a5ede0172cfe317b208", "num_rows": 677}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T FROM ( SELECT DISTINCT CASE WHEN cards.availability = 'paper' AND set_translations.language = 'Japanese' THEN name END AS T FROM cards LEFT JOIN set_translations ON cards.setCode = set_translations.setCode WHERE cards.availability = 'paper' AND set_translations.language = 'Japanese' ) WHERE T IS NOT NULL": {"evaluation": "pass: incorrect", "result": "Abattoir Ghoul\nAbu Ja'far\nAcademy Elite\nAdarkar Sentinel\nAdvantageous Proclamation\nAether Storm\nAggression\nAjani's Sunstriker\nAlabaster Potion\nAliban's Tower\nAmbition's Cost\nAn-Havva Constable\nAnaba Shaman\nAncient Excavation\nAnimate Dead\nAnti-Magic Aura\nApprentice Wizard\nArc Lightning\nArcanis the Omnipotent\nArcum's Sleigh\nArgothian Elder\nArmillary Sphere\nArnjlot's Ascent\nAshen Powder\nAssassinate\nAtraxa, Praetors' Voice\nAuratouched Mage\nAvenger of Zendikar\nAysen Bureaucrats\nAzure Drake\nBalan, Wandering Knight\nBalduvian Hydra\nBane of the Living\nBarbarian Guides\nBarter in Blood\nBattering Ram\nBeast Within\nBenalish Hero\nBiomantic Mastery\nBlack Knight\nBlade of Selves\nBlaze\nBlighted Woodland\nBlizzard Elemental\nBlood Pet\nBloodfell Caves\nBloodrock Cyclops\nBlue Mana Battery\nBody Double\nBojuka Bog\nBone Splinters\nBorderland Behemoth\nBoros Signet\nBrago, King Eternal\nBrass Man\nBreath of Fury\nBrindle Shoat\nBronze Tablet\nBruse Tarl, Boorish Herder\nBuried Ruin\nButcher Ghoul\nCall of the Wild\nCaller of the Untamed\nCaptain of the Watch\nCarnivorous Plant\nCatastrophe\nCaves of Koilos\nCelestial Sword\nChain Stasis\nChandler\nChaoslace\nChartooth Cougar\nChromatic Lantern\nCircle of Protection: Artifacts\nCitadel Siege\nClay Statue\nClockwork Steed\nCoastal Breach\nCoercive Portal\nCold Snap\nComet Storm\nConcentrate\nConsume the Meek\nCooperation\nCorpse Augur\nCouncil's Judgment\nCoveted Peacock\nCraw Wurm\nCrimson Honor Guard\nCrown of the Ages\nCrumbling Necropolis\nCrystal Vein\nCurse of Disturbance\nCurse of the Nightly Hunt\nCustodi Peacekeeper\nD'Avenant Archer\nDance of Many\nDaretti, Scrap Savant\nDark Ritual\nDauntless Onslaught\nDay of the Dragons\nDeath Grasp\nDeathbringer Regent\nDeceiver Exarch\nDemon's Grasp\nDerelor\nDespoiler of Souls\nDiabolic Servitude\nDiminishing Returns\nDire Wolves\nDisenchant\nDisrupt Decorum\nDivine Reckoning\nDoomed Traveler\nDragon Breath\nDragon Whelp\nDrain Power\nDread Wight\nDream Pillager\nDriver of the Dead\nDuelist's Heritage\nDwarven Armory\nDwarven Soldier\nEarthlore\nEcho Tracer\nEerie Interlude\nElderwood Scion\nElfhame Palace\nElvish Aberration\nEmancipation Angel\nEnchantment Alteration\nEnergy Tap\nEnraged Revolutionary\nEron the Relentless\nEssence Vortex\nEtherium-Horn Sorcerer\nEverlasting Torment\nExhume\nExplorer's Scope\nEzuri's Predation\nFaerie Invaders\nFall of the Hammer\nFang of the Pack\nFate Unraveler\nFecundity\nFemeref Archers\nFertilid\nFieldmist Borderpost\nFiery Justice\nFire Drake\nFireshrieker\nFlame Spirit\nFlash\nFleshbag Marauder\nFlowstone Blade\nFollowed Footsteps\nForce Void\nForgotten Cave\nFortunate Few\nFractured Powerstone\nFrontier Bivouac\nFuneral March\nFyndhorn Bow\nGaea's Blessing\nGang of Devils\nGauntlets of Chaos\nGhave, Guru of Spores\nGhostblade Eidolon\nGiant Crab\nGiant Strength\nGisela, Blade of Goldnight\nGleam of Resistance\nGluttonous Slime\nGoblin Deathraiders\nGoblin Lyre\nGoblin Shrine\nGoblin Warchief\nGolgari Charm\nGorilla Warrior\nGrasp of Fate\nGravebind\nGrazing Gladehart\nGreen Scarab\nGrenzo, Havoc Raiser\nGrixis Illusionist\nGruul Signet\nGuardian of the Gateless\nGustcloak Skirmisher\nHallowed Ground\nHanna, Ship's Navigator\nHarvester of Souls\nHavenwood Battleground\nHeartless Hidetsugu\nHedron Archive\nHellkite Charger\nHematite Talisman\nHexplate Golem\nHipparion\nHollow Dogs\nHomeward Path\nHostility\nHuman Frailty\nHunted Dragon\nHurr Jackal\nHydroblast\nIcatian Phalanx\nIcequake\nIkra Shidiqi, the Usurper\nIllusionary Informant\nIllusory Angel\nIn Garruk's Wake\nIndestructible Aura\nInfectious Horror\nInferno Trap\nInkfathom Witch\nInspiring Call\nIrini Sengir\nIrresistible Prey\nIterative Analysis\nIzzet Chronarch\nJalum Tome\nJedit Ojanen of Efrava\nJeweled Amulet\nJor Kadeen, the Prevailer\nJump\nJustice\nKaervek the Merciless\nKarlov of the Ghost Council\nKaseto, Orochi Archmage\nKeening Stone\nKelsinko Ranger\nKheru Mind-Eater\nKindred Boon\nKiora's Follower\nKjeldoran Frostbeast\nKjeldoran Skyknight\nKolaghan, the Storm's Fury\nKormus Bell\nKrenko, Mob Boss\nKrovikan Fetish\nLace with Moonglove\nLapis Lazuli Talisman\nLay of the Land\nLeechridden Swamp\nLeovold's Operative\nLhurgoyf\nLifelace\nLightning Bolt\nLim-Dûl's Hex\nLizard Warrior\nLone Revenant\nLost Order of Jarkeld\nLoyal Retainers\nMaddening Wind\nMagmaquake\nMagus of the Unseen\nMakeshift Mauler\nMan-o'-War\nMana Short\nManifold Insights\nMarchesa's Infiltrator\nMark of Mutiny\nMass Mutiny\nMausoleum Turnkey\nMemnarch\nMerchant Scroll\nMerfolk Skyscout\nMesmeric Trance\nMighty Leap\nMind Stone\nMindstab Thrull\nMirri, Weatherlight Duelist\nMischievous Poltergeist\nMistvein Borderpost\nMoan of the Unhallowed\nMonastery Siege\nMorale\nMother of Runes\nMudslide\nMusician\nMyr Retriever\nMystic Monastery\nMárton Stromgald\nNath of the Gilt-Leaf\nNaya Charm\nNecromantic Selection\nNekrataal\nNevinyrral's Disk\nNihil Spellbomb\nNissa, Voice of Zendikar\nNoble Templar\nNullmage Advocate\nOb Nixilis Reignited\nObsianus Golem\nOmenspeaker\nOpaline Unicorn\nOran-Rief, the Vastwood\nOrcish Captain\nOrcish Squatters\nOrim's Thunder\nOrzhov Guildgate\nOverwhelming Stampede\nPalace Siege\nPanic\nPatagia Golem\nPawn of Ulamog\nPentagram of the Ages\nPestilence\nPhantasmal Forces\nPharika's Mender\nPhyrexian Reclamation\nPillarfield Ox\nPlague Rats\nPlated Spider\nPollenbright Wings\nPortent\nPox\nPrey Upon\nPrimal Growth\nPrismatic Geoscope\nProphecy\nPsychic Transfer\nPurelace\nPyroclasm\nQueen Marchesa\nQuirion Explorer\nRaise Dead\nRakdos Guildmage\nRampant Growth\nRay of Command\nReality Twist\nRecall\nRecruiter of the Guard\nReef Pirates\nRegicide\nRelentless Skaabs\nRemove Soul\nReprisal\nReturn to Dust\nReviving Dose\nRime Dryad\nRivals' Duel\nRolling Thunder\nRout\nRuins of Trokair\nRysorian Badger\nSafe Haven\nSamite Alchemist\nSand Silos\nSaskia the Unyielding\nScaled Wurm\nScion of Darkness\nScourge of Valkas\nScryb Sprites\nSea Serpent\nSeal of the Guildpact\nSecluded Steppe\nSeeker\nSeht's Tiger\nSelvala's Charge\nSengir Bats\nSerendib Sorcerer\nSerra Inquisitors\nSewer Rats\nShambling Remains\nSharuum the Hegemon\nShield of the Ages\nShinen of Life's Roar\nShower of Sparks\nSigil of the Empty Throne\nSilhana Ledgewalker\nSimic Guildgate\nSinuous Vermin\nSkeletal Vampire\nSkittering Horror\nSkullwinder\nSleep\nSmoldering Crater\nSnapping Drake\nSol Ring\nSolemn Simulacrum\nSoraya the Falconer\nSoul Net\nSovereign's Realm\nSpectral Shield\nSphinx Summoner\nSpike Feeder\nSpirit Link\nSpitting Earth\nSpontaneous Combustion\nStaff of the Ages\nStangg\nSteam Augury\nStinkdrinker Daredevil\nStone Rain\nStonework Puma\nStormbind\nStroke of Genius\nStunted Growth\nSulfurous Blast\nSun Titan\nSunken Hope\nSunstone\nSwift Justice\nSydri, Galvanic Genius\nSynod Centurion\nTaigam, Sidisi's Hand\nTakklemaggot\nTariff\nTeferi's Puzzle Box\nTemur Sabertooth\nTerritorial Baloth\nThalakos Lowlands\nThe Ur-Dragon\nThief of Blood\nThought Reflection\nThran Dynamo\nThrone Warden\nThunder-Thrash Elder\nTidal Surge\nTimmerian Fiends\nTopplegeist\nTormenting Voice\nTouch of Vitae\nTrained Armodon\nTransguild Promenade\nTreacherous Terrain\nTrial // Error\nTruce\nTundra Wolves\nTwiddle\nTyrant's Choice\nUnbreathing Horde\nUnexpected Potential\nUnseen Walker\nUpdraft\nUrza's Incubator\nUtter End\nVampire Nighthawk\nVedalken Engineer\nVenerable Monk\nVerdant Force\nVeteran Explorer\nVibrating Sphere\nVillage Elder\nVisions\nVivid Marsh\nVolcanic Eruption\nVow of Duty\nWakestone Gargoyle\nWall of Bone\nWall of Ice\nWall of Shadows\nWall of Water\nWar Elephant\nWarp Artifact\nWatchwolf\nWeakness\nWhims of the Fates\nWhispering Madness\nWhite Ward\nWild Griffin\nWill-o'-the-Wisp\nWind Spirit\nWinds of Change\nWinter's Chill\nWolverine Pack\nWoolly Spider\nWorldly Tutor\nWrath of Marit Lage\nYavimaya Ants\nYotian Soldier\nZoetic Cavern\nZuran Enchanter", "result_hash": "c1697b51bd57bd8d24552517e4700a3b", "num_rows": 2841}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(T1.borderColor) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'": {"evaluation": "pass: correct", "result": "258", "result_hash": "27546f8aba3abcb9f002bf23f3cbcd3f", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T5.uuid FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN set_translations AS T3 ON T1.setCode = T3.setCode INNER JOIN foreign_data AS T4 ON T1.uuid = T4.uuid WHERE T2.status = 'Legal' AND T2.format = 'Legacy'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T5.uuid", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.text FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Beacon of Immortality'": {"evaluation": "pass: correct", "result": "Beacon of Immortality’s effect counts as life gain (or life loss, if the life total was negative) for effects that trigger on or replace life gain (or life loss).\nIf a Beacon is countered or doesn’t resolve, it’s put into its owner’s graveyard, not shuffled into the library.\nIf you double a negative life total, you do the real math. A life total of -10 becomes -20.", "result_hash": "6f08e9fe25bd1de87db3c0c91851878f", "num_rows": 3}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(T2.id),T1.status FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.frameVersion = 'future'": {"evaluation": "pass: incorrect", "result": "583\tLegal", "result_hash": "3937bfe76e16f2719bd9cc981c66d91f", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.name, T3.colorIdentity FROM sets AS T2 INNER JOIN cards AS T1 ON T2.setCode = T1.setCode INNER JOIN set_translations AS T3 ON T3.setCode = T2.setCode WHERE T2.setCode = 'OGW'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.colorIdentity", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.translation FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN cards AS T3 ON T2.code = T3.setCode WHERE T3 convertersFormat != 'lvacr' AND T2.code = '10E' AND T3.convertManaCost = 5 AND T3.language IN ('Chinese Simplified', 'Chinese Traditional', 'French')": {"evaluation": "error: <error>", "result": "Execution error: near \"convertersFormat\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T3.originalType, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T1.setCode = T3.setCode WHERE T1.originalType = 'Creature - Elf'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.originalType", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T4.colors, T3.format FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode INNER JOIN sets AS T3 ON T2.setCode = T3.code INNER JOIN legalities AS T4 ON T1.uuid = T4.uuid WHERE T1.id BETWEEN 1 AND 20": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.colors", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.name, T1.originalType, T2.language FROM cards AS T1 INNER JOIN set_translations AS T3 ON T1.setCode = T3.setCode INNER JOIN languages AS T2 ON T3.language = T2.language WHERE T1.originalType = 'Artifact' AND T1.colors = 'B' AND T2.language != 'English'": {"evaluation": "error: <error>", "result": "Execution error: no such table: languages", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3": {"evaluation": "pass: incorrect", "result": "Guerrilla Tactics", "result_hash": "66e1351252b2c208c55dcfa992d33e1a", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(CASE WHEN T1.isFoil AND T1.isPowerful IS FALSE THEN 1 END) AS count FROM ( SELECT cards.id, cards.isFoil, cards.isPowerful FROM cards JOIN set_translations ON cards.setCode = set_translations.setCode WHERE cards.artist = 'John Avon' GROUP BY cards.id HAVING CAST(COUNT(COALESCE(cardKingdomId, cardKingdomFoilId)) AS INTEGER) = 2 GROUP BY cards.id) AS T1": {"evaluation": "error: <error>", "result": "Execution error: near \"GROUP\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL": {"evaluation": "pass: correct", "result": "1050", "result_hash": "13d8d8d1fe425fad87a115a28164cf6b", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(T1.id) \nFROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.setCode \nWHERE T1.artist = 'UDON' AND T1.availability = 'mtgo' AND T1.hand = '-1'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.frameVersion = '1993' AND T1.availability = 'paper' AND T1.hasContentWarning = 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.frameVersion", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T3.manaCost FROM sets AS T1 INNER JOIN cards AS T2 ON T1.setCode = T2.setCode WHERE T1.frameVersion = 2003 AND T2.layout = 'normal' AND T2.borderColor = 'black' AND T2.availability = 'mtgo,paper'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.manaCost", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT SUM(manaCost) FROM cards WHERE artist = 'Rob Alexander'": {"evaluation": "pass: incorrect", "result": "0.000", "result_hash": "9143c73ccd25211c79511b12d071d69b", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT DISTINCT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN Games.MTG_ARENA.cards AS T2 ON T1.mtgArenaId = T2.id WHERE T1.availability IN ('mtgo,arena', 'arena')": {"evaluation": "error: <error>", "result": "Execution error: near \".\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.setCode FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.setCode WHERE T1.language = 'Spanish'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(T1.frameEffects) * 100 / ( SELECT COUNT(isOnlineOnly) FROM cards WHERE isOnlineOnly = 1 AND frameEffects = 'legendary' AND isStorySpotlight = 0 AND isFoilOnly = 0 AND isNonFoilOnly = 0 ) FROM cards AS T1 WHERE T1.frameEffects = 'legendary'": {"evaluation": "error: <error>", "result": "Execution error: no such column: isFoilOnly", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT \n  CAST(COUNT(T1.id) AS REAL) / COUNT(T2.id) * 100 \nFROM \n  cards AS T1 \n  INNER JOIN \n  cards AS T2 \n  ON T1.id = T2.id \n  JOIN \n  ( \n    SELECT \n      id \n    FROM \n      cards \n    WHERE isStorySpotlight = 1 \n    AND isTextless = 0 \n  ) AS T3 \n  ON T1.id = T3.id": {"evaluation": "pass: correct", "result": "100.000", "result_hash": "db5ed6f5479bd89638f361d1c19997ae", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T1.language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id), T1.name \nFROM cards AS T1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.language", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.translation FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.setCode WHERE T2.baseSetSize = 309": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(T1.setCode) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.block = 'Commander' AND T2.language = 'Portuguese (Brasil)'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal' AND T2.id IN (SELECT id FROM cards WHERE type = 'Creature')": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German'": {"evaluation": "pass: incorrect", "result": "Artifact\nArtifact Creature — Bird\nArtifact Creature — Cleric\nArtifact Creature — Dreadnought\nArtifact Creature — Elk\nArtifact Creature — Gargoyle\nArtifact Creature — Golem Construct\nArtifact Creature — Human Artificer\nArtifact Creature — Illusion\nArtifact Creature — Leviathan\nArtifact Creature — Myr Construct\nArtifact Creature — Scorpion\nArtifact Creature — Sliver\nArtifact Creature — Spider\nArtifact Creature — Vedalken Scout\nArtifact Creature — Wolf Construct\nArtifact — Food\nBasic Land — Plains\nBasic Snow Land — Swamp\nCreature — Angel Ally\nCreature — Antelope\nCreature — Ape Snake\nCreature — Aurochs\nCreature — Badger Beast\nCreature — Bat Imp\nCreature — Beast Horror\nCreature — Bird Ally\nCreature — Bird Mercenary\nCreature — Bird Skeleton\nCreature — Bird Soldier Wizard\nCreature — Boar Horror\nCreature — Carrier\nCreature — Cat Beast Warrior\nCreature — Cat Monk\nCreature — Cat Soldier\nCreature — Centaur Archer\nCreature — Centaur Knight\nCreature — Centaur Warrior\nCreature — Cephalid Wizard Scout\nCreature — Construct\nCreature — Crocodile Frog\nCreature — Cyclops Soldier\nCreature — Dauthi Minion\nCreature — Demon Minion\nCreature — Dinosaur Avatar\nCreature — Djinn Pirate\nCreature — Dog Soldier\nCreature — Dragon Skeleton\nCreature — Dryad\nCreature — Dwarf\nCreature — Dwarf Pilot\nCreature — Dwarf Wizard\nCreature — Eldrazi Beast\nCreature — Eldrazi Homunculus\nCreature — Eldrazi Reflection\nCreature — Elemental Bird\nCreature — Elemental Drake\nCreature — Elemental Insect\nCreature — Elemental Nightmare\nCreature — Elemental Scout\nCreature — Elemental Spellshaper\nCreature — Elemental Wolf\nCreature — Elephant Wizard\nCreature — Elf Artificer Druid\nCreature — Elf Cleric Druid\nCreature — Elf Druid Shaman\nCreature — Elf Nomad\nCreature — Elf Shaman\nCreature — Elf Warrior\nCreature — Elk\nCreature — Faerie Artificer\nCreature — Faerie Rogue\nCreature — Fish\nCreature — Fox\nCreature — Frog Beast\nCreature — Fungus Dinosaur\nCreature — Fungus Zombie\nCreature — Giant Knight\nCreature — Giant Soldier\nCreature — Goat Hydra\nCreature — Goblin Avatar\nCreature — Goblin Pirate\nCreature — Goblin Shaman\nCreature — Goblin Wizard\nCreature — Griffin\nCreature — Harpy Beast\nCreature — Homarid Drone\nCreature — Horror\nCreature — Horse Rebel\nCreature — Human Archer Minion\nCreature — Human Barbarian\nCreature — Human Berserker\nCreature — Human Cleric Avatar\nCreature — Human Cleric Soldier\nCreature — Human Druid Warrior\nCreature — Human Knight\nCreature — Human Mercenary Rebel\nCreature — Human Nightmare Barbarian\nCreature — Human Nomad Horror\nCreature — Human Pirate Scout\nCreature — Human Rebel Cleric\nCreature — Human Rogue\nCreature — Human Samurai\nCreature — Human Shaman Ally\nCreature — Human Soldier Knight\nCreature — Human Spellshaper Warrior\nCreature — Human Wizard\nCreature — Hydra Beast\nCreature — Illusion Dragon\nCreature — Illusion Wall\nCreature — Insect Assassin\nCreature — Insect Shade\nCreature — Jackal Archer\nCreature — Jellyfish Hydra Beast\nCreature — Kithkin Knight\nCreature — Kithkin Soldier Wizard\nCreature — Kor Artificer Ally\nCreature — Kor Monk\nCreature — Kor Scout\nCreature — Kor Warrior Knight\nCreature — Leech\nCreature — Lizard Beast\nCreature — Lizard Warrior\nCreature — Merfolk Goblin\nCreature — Merfolk Rogue Ally\nCreature — Merfolk Spellshaper\nCreature — Metathran\nCreature — Minotaur Archer\nCreature — Minotaur Shaman\nCreature — Mole\nCreature — Moonfolk Wizard\nCreature — Naga Druid\nCreature — Nautilus Beast\nCreature — Nightmare Dinosaur\nCreature — Nightmare Horse\nCreature — Nightmare Sphinx\nCreature — Noggle Wizard\nCreature — Ogre Knight\nCreature — Ogre Samurai Shaman\nCreature — Ooze\nCreature — Orc Pirate\nCreature — Orgg\nCreature — Pangolin Beast\nCreature — Plant Dog\nCreature — Plant Mutant\nCreature — Rat Ninja\nCreature — Rhino Beast\nCreature — Salamander\nCreature — Satyr Archer\nCreature — Satyr Shaman\nCreature — Shade\nCreature — Shapeshifter Pirate\nCreature — Shark Crab\nCreature — Siren Soldier\nCreature — Skeleton Warrior\nCreature — Sliver Trilobite\nCreature — Snake Beast\nCreature — Snake Wall\nCreature — Soltari Monk Cleric\nCreature — Sphinx Wizard\nCreature — Spirit\nCreature — Spirit Horror\nCreature — Spirit Pirate\nCreature — Spirit Warrior\nCreature — Squid Illusion\nCreature — Thalakos Illusion\nCreature — Treefolk\nCreature — Treefolk Soldier\nCreature — Troll Frog Warrior\nCreature — Troll Warrior\nCreature — Vampire Archer\nCreature — Vampire Dog\nCreature — Vampire Rogue\nCreature — Vampire Skeleton\nCreature — Vedalken\nCreature — Vedalken Rogue Mutant\nCreature — Viashino\nCreature — Viashino Soldier\nCreature — Werewolf\nCreature — Wolf\nCreature — Wolverine Beast\nCreature — Wraith\nCreature — Zombie\nCreature — Zombie Beast\nCreature — Zombie Centaur\nCreature — Zombie Dinosaur Beast\nCreature — Zombie Elephant\nCreature — Zombie Giant\nCreature — Zombie Imp\nCreature — Zombie Leech\nCreature — Zombie Minion\nCreature — Zombie Ninja\nCreature — Zombie Scout\nCreature — Zombie Soldier Warrior\nCreature — Zombie Vampire\nCreature — Zubera Spirit\nEnchantment Creature — Centaur\nEnchantment Creature — Demon\nEnchantment Creature — Gorgon\nEnchantment Creature — Human\nEnchantment Creature — Lamia\nEnchantment Creature — Nautilus\nEnchantment Creature — Serpent\nEnchantment Creature — Spider\nEnchantment — Aura Cartouche\nInstant — Trap\nLand — Forest Island Mountain\nLand — Island Swamp\nLand — Mountain Plains Swamp\nLand — Swamp Forest\nLand — Urza’s Tower\nLegendary Artifact Creature — Human\nLegendary Artifact Creature — Wizard\nLegendary Creature — Angel Artificer\nLegendary Creature — Atog\nLegendary Creature — Bird\nLegendary Creature — Bird Wizard\nLegendary Creature — Cat Dragon\nLegendary Creature — Cat Warrior\nLegendary Creature — Cyclops\nLegendary Creature — Dinosaur\nLegendary Creature — Djinn Monk\nLegendary Creature — Dragon Wizard\nLegendary Creature — Dwarf Pilot\nLegendary Creature — Eldrazi\nLegendary Creature — Elemental Boar\nLegendary Creature — Elemental Giant\nLegendary Creature — Elf\nLegendary Creature — Elf Horror\nLegendary Creature — Elf Spirit\nLegendary Creature — Faerie Wizard\nLegendary Creature — Fungus Shaman\nLegendary Creature — Goblin\nLegendary Creature — Goblin Shaman\nLegendary Creature — Griffin\nLegendary Creature — Horror Minion\nLegendary Creature — Human Archer\nLegendary Creature — Human Druid\nLegendary Creature — Human Ninja\nLegendary Creature — Human Samurai\nLegendary Creature — Human Warrior\nLegendary Creature — Hyena Beast\nLegendary Creature — Kithkin Advisor\nLegendary Creature — Kor Soldier Ally\nLegendary Creature — Merfolk Artificer\nLegendary Creature — Minion\nLegendary Creature — Naga Shaman\nLegendary Creature — Nightmare Insect\nLegendary Creature — Ooze\nLegendary Creature — Pirate Spirit\nLegendary Creature — Satyr\nLegendary Creature — Skeleton\nLegendary Creature — Snake Warrior\nLegendary Creature — Spirit\nLegendary Creature — Treefolk Shaman\nLegendary Creature — Vampire Ally\nLegendary Creature — Vampire Noble\nLegendary Creature — Vedalken Artificer\nLegendary Creature — Whale Wolf\nLegendary Creature — Zombie Dragon\nLegendary Creature — Zombie Horror\nLegendary Creature — Zombie Warrior\nLegendary Enchantment Creature — Harpy\nLegendary Planeswalker\nLegendary Planeswalker — Basri\nLegendary Planeswalker — Domri\nLegendary Planeswalker — Gideon\nLegendary Planeswalker — Kasmina\nLegendary Planeswalker — Nahiri\nLegendary Planeswalker — Rowan\nLegendary Planeswalker — Szat\nLegendary Planeswalker — Ugin\nLegendary Planeswalker — Wrenn\nLegendary Sorcery\nPlane — Bolas’s Meditation Realm\nPlane — Iquatana\nPlane — Kyneth\nPlane — Muraganda\nPlane — Regatha\nPlane — Valla\nSnow Artifact Creature — Golem\nSnow Creature — Centaur Warrior\nSnow Creature — Faerie\nSnow Creature — Insect\nSnow Creature — Snake\nSnow Creature — Wurm\nSorcery\nTribal Artifact — Warrior Equipment\nTribal Enchantment — Giant\nTribal Instant — Eldrazi\nTribal Instant — Rogue\nTribal Sorcery — Elf", "result_hash": "e4868fd6e6acbde0a723102824ac245a", "num_rows": 1752}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(T2.uuid) FROM cards AS T1 INNER JOIN rules REFERENCES Table_Name AS T2 ON T1.key IS NOT NULL": {"evaluation": "error: <error>", "result": "Execution error: near \"REFERENCES\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(*) FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T2.uuid = T3.uuid WHERE T1.format = 'premodern' AND T2.side IS NULL AND T3.text = 'This is a triggered mana ability.'": {"evaluation": "pass: correct", "result": "16", "result_hash": "282de5622d4c5ad8e592df093f872b96", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT SIMILARITY(cardKingdomId, CASE WHEN albums.name = 'Erica Yang' THEN cards mtgoId ELSE NULL END) FROM albums INNER JOIN cards ON albums.scryfallId = cards.scryfallId WHERE cards.availability = 'paper' AND cards.type = 'coalition'": {"evaluation": "error: <error>", "result": "Execution error: near \"mtgoId\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.multiverseId = T2.multiverseid WHERE T2.flavorText = 'Das perfekte Gegenmittel zu einer dichten Formation'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T3.flavorText FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid AND T3.language = 'French' WHERE T1.type = 'Creature' AND T1.layout = 'normal' AND T1.borderColor = 'black' AND T1.artist = 'Matthew D. Wilson'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(T1.uuid) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid INNER JOIN set_translations AS T4 ON T1.setCode = T4.setCode INNER JOIN sets AS T5 ON T1.setCode = T5.setCode WHERE T3.status = 'Legal' AND T3.format = 'commander' AND T5.releaseDate < '2007-01-01' AND T4érica = 'rare' AND T2.date = '2007-02-01'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4érica", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT translation FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.block = 'Ravnica' AND T2.baseSetSize = 180": {"evaluation": "pass: incorrect", "result": "Discorde\nDiscordia\nInsurreição\nZwietracht\nРаскол\nディセンション\n紛爭\n纷争\n갈등", "result_hash": "a245509bfddb893794cfada0a9879483", "num_rows": 9}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'": {"evaluation": "pass: correct", "result": "100.000", "result_hash": "db5ed6f5479bd89638f361d1c19997ae", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T2.language = 'French' AND T2.power IN ('*', NULL) THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.power IN ('*', NULL) THEN 1 ELSE 0 END) FROM sets AS T1 INNER JOIN cards AS T2 ON T1.setCode = T2.setCode": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.language", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT CAST(COUNT(CASE WHEN T2.type = 'expansion' THEN 1 ELSE NULL END) AS REAL) / COUNT(T2.type) * 100 FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.language = 'Japanese'": {"evaluation": "pass: incorrect", "result": "50.413", "result_hash": "5f4337218541a938a31d86aeecd8c1f2", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'": {"evaluation": "pass: correct", "result": "arena\narena,paper\ndreamcast\nmtgo\nmtgo,paper\npaper", "result_hash": "6471d828bc1a1761a0443ba964e57817", "num_rows": 6}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(T2.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.setCode WHERE T1.borderColor = 'borderless' AND T1.edhrecRank > 12000": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1": {"evaluation": "pass: correct", "result": "17", "result_hash": "03401e3017263424126c0f3c78431b8f", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Creature' AND POWER IS NULL AND T2.promoTypes LIKE '%arenaleague%' AND T1.name NOT IN ( SELECT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE POWER IS NOT NULL AND T2.promoTypes LIKE '%arenaleague%' GROUP BY T1.name ORDER BY COUNT(T1.name) LIMIT 3) ORDER BY T1.name": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.promoTypes", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T3.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.multiverseId = T2.multiverseid INNER JOIN set_translations AS T3 ON T2.name = T3.translation WHERE T1.multiverseId = 149934": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.cardKingdomFoilId, T2.cardKingdomId FROM cards AS T1 INNER JOIN cards AS T2 ON T1.id = T2.id WHERE T1.cardKingdomFoilId IS NOT NULL AND T2.cardKingdomId IS NOT NULL ORDER BY T1.cardKingdomFoilId ASC LIMIT 3": {"evaluation": "pass: correct", "result": "110502\t110332\n110503\t110333\n110504\t110334", "result_hash": "5a6ba3096056195c298e0885511fb7e3", "num_rows": 3}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT CAST(COUNT(CASE WHEN cards.isTextless = 1 AND cards.layout = 'normal' THEN cards.id ELSE NULL END) AS REAL) * 100 / COUNT(cards.id) FROM cards": {"evaluation": "pass: correct", "result": "0.202", "result_hash": "a73ccfa535a851ca3a69225218239e0a", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.number FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.subtypes LIKE BUT‰ '&' AND T1.variations IS NULL": {"evaluation": "error: <error>", "result": "Execution error: near \"'&'\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.mtgoCode IN ('', NULL) ORDER BY T1.name LIMIT 3": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.language FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.setCode WHERE T2.mcmName = 'Archenemy' AND T2.setCode = 'ARC'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT name FROM sets WHERE id = ( SELECT id FROM sets WHERE setCode = ( SELECT setCode FROM set_translations WHERE setCode '5' ) )": {"evaluation": "error: <error>", "result": "Execution error: near \"'5'\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.translation, T2.type FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.id = 206": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.language = 'italian' AND T1.block IN ('Shadowmoor') ORDER BY T1.name LIMIT 2": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.language = 'Japanese' AND T1.isForeignOnly = 0 AND T1.isFoilOnly = 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.setCode, T1.name FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.language = 'Russian' ORDER BY T2.baseSetSize DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.name", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' AND T1.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code": {"evaluation": "pass: correct", "result": "0.083", "result_hash": "d0599f8b91c5a92a816b9fc62fe1102c", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(T1.code) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T2.setCode = T1.setCode WHERE T1.language = 'Japanese' AND (T2.mtgoCode IS NULL OR T2.mtgoCode = '')": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.code", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(*) AS blackborderCount, card_id FROM cards WHERE borderColor = 'black' GROUP BY card_id": {"evaluation": "error: <error>", "result": "Execution error: no such column: card_id", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT id FROM cards WHERE frameEffects = 'extendedart'": {"evaluation": "pass: correct", "result": "13524\n13525\n13526\n13527\n13528\n13529\n13530\n13531\n13532\n13533\n13534\n13535\n13536\n13537\n13538\n13539\n13540\n13541\n13542\n13543\n13544\n13545\n13546\n13547\n13548\n13549\n13550\n13551\n13552\n13553\n13554\n13555\n13556\n13557\n13558\n13559\n13560\n13561\n13562\n13563\n13564\n13565\n13566\n13567\n13568\n13569\n13570\n13571\n13572\n13573\n13574\n13575\n13576\n13577\n13578\n13579\n13580\n13581\n13582\n13583\n13584\n13585\n13586\n13587\n13588\n13589\n13590\n13591\n13592\n13593\n13594\n13595\n13596\n13597\n13598\n13599\n13600\n13601\n13602\n13603\n13604\n13605\n13606\n13607\n13608\n13609\n13610\n13611\n13612\n13613\n13614\n13615\n13616\n13617\n13618\n13619\n13620\n13621\n13622\n13623\n13624\n13625\n18151\n18152\n18154\n18155\n18156\n18158\n18160\n18163\n18164\n18165\n18166\n18168\n18170\n18171\n18172\n18174\n18175\n18177\n18178\n18179\n18180\n18181\n18182\n18183\n18185\n18186\n18188\n18190\n18191\n18192\n18194\n18195\n18196\n18197\n18198\n18199\n18200\n18201\n18202\n18203\n18204\n18205\n18206\n18207\n18208\n22945\n22946\n22947\n22948\n22949\n22950\n22951\n22952\n22953\n22954\n22955\n22956\n22958\n22960\n22962\n22963\n22964\n22965\n22967\n22968\n22970\n22971\n22972\n22974\n22975\n22976\n22977\n22978\n22979\n22981\n22992\n22994\n25414\n25415\n25416\n25417\n25418\n25419\n25420\n25421\n25422\n25423\n25424\n25425\n25426\n25427\n25428\n25429\n25430\n25431\n25432\n25433\n25434\n25435\n25436\n25437\n25438\n25439\n25440\n25441\n25442\n25443\n25444\n25445\n25446\n25447\n25448\n25449\n25450\n25451\n25452\n25453\n25479\n30216\n30217\n30218\n30220\n30221\n30222\n30223\n30225\n30226\n30227\n30228\n30229\n30230\n30231\n30232\n30233\n30235\n30236\n30237\n30239\n30240\n30241\n30242\n30245\n30246\n30247\n30249\n30250\n30251\n30253\n30254\n30259\n30260\n30261\n30262\n30263\n30264\n30265\n30266\n30267\n44911\n44913\n44915\n44916\n44917\n44918\n44919\n44920\n44921\n44922\n44925\n44926\n44928\n44929\n44930\n44931\n44933\n44934\n44935\n44936\n44937\n44940\n44941\n44942\n44945\n44946\n44947\n44948\n44949\n50290\n50292\n50293\n50294\n50296\n50297\n50298\n50299\n50300\n50304\n50305\n50308\n50309\n50310\n50311\n50312\n50313\n50314\n50315\n50316\n50319\n50320\n50321\n50323\n50324\n50326\n50328\n50329\n50338\n50339\n50340\n50341\n50342\n50343\n50344\n56746\n56747\n56748\n56749\n56750\n56751\n56752\n56753\n56754\n56755\n56756\n56757\n56760\n56761\n56762\n56763\n56764\n56765\n56766\n56767\n56768\n56769\n56770\n56771\n56772\n56773\n56774\n56776\n56777\n56778\n56779\n56780\n56781\n56782\n56783\n56785\n56786\n56787\n56788\n56789\n56790\n56791\n56792\n56793\n56794\n56795\n56796\n56797\n56799\n56800\n56801\n56802\n56803\n56804\n56805\n56817\n56818\n56819\n56820", "result_hash": "aa4ced2b2d20f6affb81ae3629384aea", "num_rows": 383}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.name FROM cards AS T1 INNER JOIN cards AS T2 ON T1.id = T2.id INNER JOIN sets AS T3 ON T3.code = T1.setCode WHERE T1.borderColor = 'black' AND T2.isFullArt = 1": {"evaluation": "pass: incorrect", "result": "Abrade\nAdorned Pouncer\nAnguished Unmaking\nAthreos, God of Passage\nBituminous Blast\nBlack Sun's Zenith\nBlade of the Sixth Pride\nBlightning\nBlind Phantasm\nBlood Crypt\nBlood Knight\nBoros Challenger\nBramblewood Paragon\nBrave the Elements\nBreeding Pool\nBurst Lightning\nCancel\nCelestial Purge\nChief Engineer\nConclave Naturalists\nCondemn\nCorrupt\nCruel Edict\nCryptborn Horror\nCryptic Command\nCultivator of Blades\nDamnation\nDay of Judgment\nDeath Baron\nDeathless Angel\nDeeproot Champion\nDemon of Catastrophes\nDictate of Kruphix\nDiregraf Ghoul\nDisenchant\nDoom Blade\nDoran, the Siege Tower\nDryad Militant\nDungrove Elder\nElectrolyze\nElite Inquisitor\nEmeria Angel\nEmmara, Soul of the Accord\nEphara, God of the Polis\nErebos, God of the Dead\nEssence Extraction\nFireball\nFiremane Avenger\nFlame Javelin\nFomori Nomad\nForest\nGhalta, Primal Hunger\nGiant Growth\nGlorybringer\nGoblin Diplomats\nGoblin Snowman\nGodless Shrine\nGroundbreaker\nGuttersnipe\nHada Freeblade\nHallowed Fountain\nHarmonize\nHarrow\nHeir of the Wilds\nHeliod, God of the Sun\nHeron's Grace Champion\nHinder\nHive Stirrings\nImmolating Glare\nImperious Perfect\nIncinerate\nIncorrigible Youths\nInfest\nIroas, God of Victory\nIsland\nJori En, Ruin Diver\nKalastria Highborn\nKarametra, God of Harvests\nKeranos, God of Storms\nKilling Wave\nKiora's Follower\nKruphix, God of Horizons\nLanguish\nLatch Seeker\nLavinia, Azorius Renegade\nLightning Bolt\nLightning Helix\nLiliana's Specter\nLiliana's Triumph\nLlanowar Elves\nMagmaquake\nMana Leak\nMana Tithe\nMardu Shadowspear\nMass of Ghouls\nMelek, Izzet Paragon\nMemnite\nMitotic Slime\nMogis, God of Slaughter\nMortify\nMountain\nMudhole\nMutavault\nMwonvuli Beast Tracker\nMycoid Shepherd\nMyr Superion\nNameless Inversion\nNegate\nNessian Courser\nNighthowler\nNightpack Ambusher\nNissa's Chosen\nNiv-Mizzet, the Firemind\nNylea, God of the Hunt\nOvergrown Tomb\nOxidize\nPain Seer\nPath to Exile\nPhalanx Leader\nPharika, God of Affliction\nPhenax, God of Deception\nPlains\nPonder\nPriest of Urabrask\nPsionic Blast\nPurphoros, God of the Forge\nPutrefy\nPyroclasm\nRadiant Flames\nRakdos Firewheeler\nRakdos Guildmage\nRampant Growth\nReciprocate\nReclamation Sage\nRecollect\nRemove Soul\nSacred Foundry\nScaleguard Sentinels\nSearing Blaze\nSerra Avenger\nSign in Blood\nSilvergill Adept\nSnow-Covered Forest\nSnow-Covered Island\nSnow-Covered Mountain\nSnow-Covered Plains\nSnow-Covered Swamp\nSol, Advocate Eternal\nSquelching Leeches\nStaggershock\nStasis Snare\nSteam Vents\nSteel Leaf Champion\nStomping Ground\nStorm Crow\nStormblood Berserker\nStrangleroot Geist\nSupplant Form\nSwamp\nTempered Steel\nTemple Garden\nTerminate\nTerror\nThassa, God of the Sea\nThunderbreak Regent\nTidings\nTime Wipe\nTreasure Hunt\nTreasure Mage\nTrophy Mage\nTrostani's Summoner\nTrueheart Duelist\nUnmake\nUnsubstantiate\nUrza's Factory\nUtter End\nVoidslime\nVolcanic Fallout\nWalk the Plank\nWastes\nWatery Grave\nWrath of God\nXenagos, God of Revels\nYahenni's Expertise\nZameck Guildmage\nZombie Apocalypse\nZombify", "result_hash": "3653ee0d8d1553d3e9ab823e8c73e2d5", "num_rows": 187}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT language FROM set_translations WHERE setCode = '174'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT DISTINCT T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.setCode = 'ALL'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.language FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.setCode INNER JOIN cards AS T3 ON T1.setCode = T3.setCode WHERE T3.name = 'A Pedra Fellwar'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.setCode FROM sets AS T1 WHERE T1.releaseDate = '2007-07-13'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.baseSetSize, T1.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block IN ('Masques', 'Mirage')": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.type = 'expansion'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T2.name, T2.types FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.watermark = 'boros'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.name", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.language, T1.translation, T4.flavorText, T4.type FROM set_translations AS T1 INNER JOIN sets AS T2 ON T2.setCode = T1.setCode INNER JOIN cards AS T3 ON T2.code = T3.setCode INNER JOIN foreign_data AS T4 ON T3.uuid = T4.uuid WHERE T4.watermark = 'color pie'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.watermark", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT (COUNT(CASE WHEN T1.name = 'Abyssal Horror' THEN 1 ELSE NULL END) * 100.0 / ( SELECT COUNT(*) FROM cards WHERE name = 'Abyssal Horror' OR name = 'community subset adoption in ag/tap: abyssal horror legacy festival solar strand counter')) AS percentage FROM sets AS T2 INNER JOIN set_translations AS T1 ON T1.setCode = T2.setCode WHERE T2.code = 10E AND T2ConvertedManaCost = 10": {"evaluation": "error: <error>", "result": "Execution error: unrecognized token: \"10E\"", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.code FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.type = 'expansion' AND T2.setCode IN ( SELECT T1.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.language = 'Commander' )": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT foreign_data.name, cards.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.watermark = 'set (ZEN)'": {"evaluation": "error: <error>", "result": "Execution error: no such column: foreign_data.watermark", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.language, T1.translation FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.setCode INNER JOIN cards AS T3 ON T2.code = T3.setCode WHERE T3.name = ( SELECT T.name FROM cards INNER JOIN watermarks ON T1.name = T2.name WHERE T1.watermark = 'set (AZR)' ) AND T3.watermark LIKE 'set (%AZR%)'": {"evaluation": "error: <error>", "result": "Execution error: no such table: watermarks", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(T2.uuid) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.artist = 'Aaron Miller' AND T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.uuid", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '1%'": {"evaluation": "pass: incorrect", "result": "9", "result_hash": "e2ca9b4a69bde08ad25f198b51916859", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT name FROM cards WHERE isTextless = 0": {"evaluation": "pass: correct", "result": "\"Ach! Hans, Run!\"\nAbundance\nAcidic Dagger\nAdvance Scout\nAether Adept\nAetherstream Leopard\nAhn-Crop Crasher\nAkki Drillmaster\nAlabaster Wall\nAlley Evasion\nAltar's Reap\nAn-Havva Inn\nAncient Kavu\nAngelic Ascension\nAnimate Land\nApathy\nAradara Express\nArcbound Bruiser\nArchmage's Charm\nArgentum Armor\nArmored Pegasus\nArtisan of Kozilek\nAshnod's Altar\nAtarka Efreet\nAura of Dominion\nAvalanche Caller\nAven Surveyor\nAxis of Mortality\nBack to Nature\nBaleful Strix\nBanners Raised\nBarony Vampire\nBasri's Lieutenant\nBattlefield Promotion\nBeast Hunt\nBellowing Elk\nBerserkers of Blood Ridge\nBishop of Binding\nBladeback Sliver\nBlessed Light\nBlind-Spot Giant\nBlood Celebrant\nBloodchief's Thirst\nBloodshed Fever\nBoartusk Liege\nBojuka Bog\nBone Shredder\nBorderland Behemoth\nBoulder Salvo\nBrallin, Skyshark Rider\nBreaking // Entering\nBrimaz, King of Oreskos\nBronze Tablet\nBubbling Muck\nBurning Sands\nCabal Evangel\nCall from the Grave\nCandelabra of Tawnos\nCaptivating Crew\nCarrion Call\nCatacomb Crocodile\nCavalier of Gales\nCenn's Enlistment\nCessation\nChampion's Drake\nChange of Heart\nCharging Slateback\nChild of Thorns\nChoose Your Champion\nCinder Seer\nCivic Wayfinder\nClergy of the Holy Nimbus\nClone Legion\nCoalition Honor Guard\nCold Storage\nCommand Beacon\nConclave Equenaut\nConservator\nContraband Kingpin\nCoralhelm Commander\nCosmic Larva\nCoveted Peacock\nCrashing Tide\nCrimson Hellkite\nCrown of Flames\nCrushing Pain\nCrystalline Nautilus\nCurious Pair // Treats to Share\nCustodi Soulbinders\nDaghatar the Adamant\nDarigaaz's Charm\nDarkbore Pathway // Slitherbore Pathway\nDauntless Cathar\nDaxos, Blessed by the Sun\nDeadly Insect\nDeath's-Head Buzzard\nDeception\nDeeptread Merrow\nDegavolver\nDemonic Hordes\nDescendant of Masumaro\nDespondency\nDevouring Strossus\nDimir Aqueduct\nDirty Rat\nDisorder\nDivergent Growth\nDogpile\nDosan the Falling Leaf\nDrag to the Underworld\nDragonrage\nDread Cacodemon\nDream Tides\nDromar's Attendant\nDrudge Spell\nDuneblast\nDutiful Return\nDynavolt Tower\nEbony Owl Netsuke\nEkundu Cyclops\nElectryte\nElspeth's Devotee\nElvish Pathcutter\nEmbodiment of Insight\nEmpyrial Storm\nEnduring Ideal\nEnraged Revolutionary\nEpic Downfall\nErstwhile Trooper\nEtali, Primal Storm\nEvanescent Intellect\nExcavation\nExperimental Overload\nEye of Ramos\nFaerie Dragon\nFallen Angel Avatar\nFarbog Explorer\nFathom Mage\nFeeding Grounds\nFeral Maaka\nFeudkiller's Verdict\nFight to the Death\nFire Imp\nFires of Yavimaya\nFlame Jet\nFlash\nFleshgrafter\nFlowstone Channeler\nFolk of the Pines\nForced March\nForm of the Dragon\nFountain of Renewal\nFresh Meat\nFrost Ogre\nFungal Reaches\nGaea's Avenger\nGang of Elk\nGatekeeper of Malakir\nGelatinous Genesis\nGeothermal Crevice\nGhitu Journeymage\nGhoulflesh\nGideon's Battle Cry\nGilder Bairn\nGlare of Subdual\nGlint Hawk Idol\nGluetius Maximus\nGoblin Balloon Brigade\nGoblin Firestarter\nGoblin Piker\nGoblin Tunneler\nGolden Demise\nGoliath Spider\nGraf Rats // Chittering Host\nGrave Defiler\nGray Merchant of Asphodel\nGreenweaver Druid\nGrimclaw Bats\nGrotag Bug-Catcher\nGruul Beastmaster\nGuardians' Pledge\nGutwrencher Oni\nHalf-Squirrel, Half-\nHand of Emrakul\nHarm's Way\nHaunted Angel\nHead to Head\nHeartstone\nHekma Sentinels\nHematite Golem\nHero's Blade\nHierophant's Chalice\nHisoka's Defiance\nHoly Light\nHope of Ghirapur\nHostile Desert\nHuatli, the Sun's Heart\nHunted Wumpus\nHymn of the Wilds\nIcebind Pillar\nIkiral Outrider\nImminent Doom\nImplements of Sacrifice\nIncreasing Ambition\nInfectious Host\nInga Rune-Eyes\nInscription of Abundance\nIntervene\nInvisible Stalker\nIronroot Warlord\nIvorytusk Fortress\nJace, Mirror Mage\nJasmine Seer\nJeweled Torque\nJoraga Invocation\nJungle Hollow\nKabuto Moth\nKami of the Honored Dead\nKarplusan Hound\nKazandu Blademaster\nKeiga, the Tide Star\nKetria Crystal\nKindle the Carnage\nKiss of the Amesha\nKjeldoran Skycaptain\nKnights of Thorn\nKor Blademaster\nKranioceros\nKrosan Vorine\nKydele, Chosen of Kruphix\nLambholt Elder // Silverpelt Werewolf\nLast Kiss\nLavalanche\nLeashling\nLeonin Snarecaster\nLiberating Combustion\nLifetap\nLightning Strike\nLim-Dûl's Vault\nLiving Tempest\nLocket of Yesterdays\nLord of the Unreal\nLoxodon Lifechanter\nLumengrid Warden\nLyev Skyknight\nMagebane Armor\nMagus of the Abyss\nMalachite Golem\nMana Maze\nManta Ray\nMardu Charm\nMarsh Crocodile\nMasked Gorgon\nMasterwork of Ingenuity\nMeadowboon\nMemory Jar\nMercurial Pretender\nMesmerizing Benthid\nMidnight Guard\nMinamo's Meddling\nMindleecher\nMinotaur Warrior\nMirror-Mad Phantasm\nMistbind Clique\nMnemonic Wall\nMolderhulk\nMongrel Pack\nMorale\nMortuary Mire\nMox Opal\nMurasa Ranger\nMy Laughter Echoes\nMystic Decree\nNacre Talisman\nNarnam Cobra\nNaughty // Nice\nNecropede\nNemesis Trap\nNeurok Familiar\nNicol Bolas, the Deceiver\nNightveil Predator\nNip Gwyllion\nNoble Elephant\nNotorious Throng\nNumot, the Devastator\nOasis Ritualist\nOboro Envoy\nOgre Marauder\nOlivia Voldaren\nOne with the Stars\nOphiomancer\nOrcish Cannoneers\nOreskos Swiftclaw\nOstiary Thrull\nOvermaster\nPain's Reward\nPanic\nPardic Dragon\nPatron of the Kitsune\nPelt Collector\nPersecute\nPhantom Centaur\nPhyrexian Broodlings\nPhyrexian Splicer\nPin to the Earth\nPitiless Pontiff\nPlaneswalker's Mischief\nPolis Crusher\nPostmortem Lunge\nPrecursor Golem\nPride Sovereign\nPrimeval Titan\nProclamation of Rebirth\nProtector of the Crown\nPsychic Symbiont\nPuppet Strings\nPygmy Troll\nQilin's Blessing\nQuicksilver Behemoth\nRadiant Essence\nRaging Swordtooth\nRakdos Ringleader\nRamirez DePietro\nRapid Fire\nRavenous Bloodseeker\nRazorjaw Oni\nReaping the Graves\nReclamation\nReflecting Pool\nRekindled Flame\nRemove Soul\nReprisal\nRestless Dead\nReveillark\nRhizome Lurcher\nRidged Kusite\nRing of Kalonia\nRise to the Challenge\nRivals' Duel\nRoc of Kher Ridges\nRona, Disciple of Gix\nRorix Bladewing\nRubble Reading\nRumbling Slum Avatar\nRupture Spire\nSabertooth Alley Cat\nSage of Epityr\nSalt Road Patrol\nSanctum of All\nSanguine Indulgence\nSarulf, Realm Eater\nSavannah Sage\nScare Tactics\nSchool of Piranha\nScourge of Skola Vale\nScroll Thief\nSea Serpent\nSeascape Aerialist\nSee the Unwritten\nSeize the Spoils\nSen Triplets\nSerene Heart\nSerum Powder\nShacklegeist\nShamanic Revelation\nShattered Angel\nShield Mate\nShinen of Flight's Wings\nShore Snapper\nShriveling Rot\nSiege Modification\nSilence the Believers\nSilver Wyvern\nSin Collector\nSix-y Beast\nSkirk Drill Sergeant\nSkullbriar, the Walking Grave\nSkyhunter Cub\nSkysnare Spider\nSleeper Dart\nSliver Queen\nSmoldering Werewolf // Erupting Dreadwolf\nSnowfield Sinkhole\nSolitary Camel\nSoratami Cloud Chariot\nSoul Net\nSoulblast\nSpark Reaper\nSpectral Cloak\nSpellkeeper Weird\nSphinx's Tutelage\nSpined Sliver\nSpirit of the Labyrinth\nSplit Decision\nSpringleaf Drum\nSquirrel Farm\nStampede Rider\nStatic Orb\nSteel Wall\nStingscourger\nStone Rain\nStorm Fleet Swashbuckler\nStrands of Undeath\nStrionic Resonator\nStunt Double\nSulfur Falls\nSunblade Angel\nSunscour\nSurgical Extraction\nSwamp\nSwooping Talon\nSylvan Yeti\nTah-Crop Elite\nTake into Custody\nTamiyo, Collector of Tales\nTaste of Blood\nTeferi's Ageless Insight\nTelim'Tor\nTemporal Mastery\nTerminate\nTeysa, Orzhov Scion Avatar\nThassa, God of the Sea\nThe Great Forest\nThe Wretched\nThistledown Duo\nThought Nibbler\nThran Weaponry\nThrone of Makindi\nThundering Tanadon\nTidespout Tyrant\nTimebender\nTithe\nTonic Peddler\nTorn Between Heads\nTower of Coireall\nTrained Orgg\nTraveler's Amulet\nTreetop Village\nTrigon of Thought\nTrue Love's Kiss\nTunneler Wurm\nTwinflame\nUktabi Efreet\nUncaged Fury\nUnderworld Charger\nUnleash Fury\nUnwind\nUrza's Avenger\nValeron Wardens\nVampiric Link\nVaultbreaker\nVenarian Glimmer\nVerdant Eidolon\nVeteran Swordsmith\nVicious Hunger\nVillainous Ogre\nVirulent Plague\nVivien's Crocodile\nVoid\nVolley of Boulders\nVow of Wildness\nWakestone Gargoyle\nWall of Limbs\nWandering Eye\nWard Sliver\nWarrior's Charge\nWaterspout Elemental\nWeatherlight\nWell of Life\nWhiptail Wurm\nWicked Pact\nWildcall\nWind Zendikon\nWingfold Pteron\nWit's End\nWojek Embermage\nWoodvine Elemental\nWormfang Manta\nWu Light Cavalry\nYasova Dragonclaw\nYosei, the Morning Star\nZedruu the Greathearted\nZodiac Horse\nZzzyxas's Abyss", "result_hash": "e1c36072e2420067927767781e624a3e", "num_rows": 21738}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.manaCost FROM cards AS T1 WHERE T1.name = 'Ancestor\\'s Chosen'": {"evaluation": "error: <error>", "result": "Execution error: near \"s\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN borders AS T2 ON T1.border_color = T2.color WHERE T1.power IN ('*', NULL)": {"evaluation": "error: <error>", "result": "Execution error: no such table: borders", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.setCode WHERE T1.isPromo = 1 AND T1.side IS NOT NULL": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT types FROM cards WHERE name = 'Molimo, Maro-Sorcerer'": {"evaluation": "pass: incorrect", "result": "Creature", "result_hash": "afd7b341a4bc8c5107197e25e098d778", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.purchaseUrls FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.setCode WHERE T1.promoTypes LIKE '%bundle%'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(DISTINCT T1.artist) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.setCode WHERE SUBSTR(T2.code, 1, 1) = 'M' AND T1.border_color = 'black' AND T1.availability LIKE '%arena,mtgo%'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.border_color", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT CASE WHEN ( SELECT COUNT(convertedManaCost) FROM cards WHERE name = 'Serra Angel' AND type IN ('Creature — Angel') ) > ( SELECT COUNT(convertedManaCost) FROM cards WHERE name = 'Shrine Keeper' AND type IN ('Creature — Human Cleric' ) ) THEN ( SELECT SUM(convertedManaCost) FROM cards WHERE name = 'Serra Angel' AND type IN ('Creature — Angel') ) ELSE ( SELECT SUM(convertedManaCost) FROM cards WHERE name = 'Shrine Keeper' AND type IN ('Creature — Human Cleric') ) END": {"evaluation": "pass: incorrect", "result": "220.000", "result_hash": "f2129e678bbbe59a66ec89b2a520bc23", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT DISTINCT T2.artist FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.flavorName = 'Battra, Dark Destroyer'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.artist", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT name FROM cards WHERE faceConvertedManaCost IN ( \n    SELECT faceConvertedManaCost FROM cards WHERE frameVersion = 2003 ORDER BY faceConvertedManaCost DESC LIMIT 3 \n)": {"evaluation": "pass: incorrect", "result": "Assure // Assemble\nBeanstalk Giant // Fertile Footsteps\nBeck // Call\nBedeck // Bedazzle\nBoom // Bust\nBreaking // Entering\nCatch // Release\nCommit // Memory\nElbrus, the Binding Blade // Withengar Unbound\nFind // Finality\nFlaxen Intruder // Welcome Home\nFlower // Flourish\nInvert // Invent\nNightmare Moon // Princess Luna\nRags // Riches\nRealm-Cloaked Giant // Cast Off\nReaper of Night // Harvest Fear\nRevival // Revenge\nRough // Tumble\nSmelt // Herd // Saw\nSpring // Mind\nTuinvale Treefolk // Oaken Boon", "result_hash": "6cb02811a3aca6f48718efc410669fe8", "num_rows": 22}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.translation FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Ancestor''s Chosen' AND T1.language = 'Italian'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(T3.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode INNER JOIN cards AS T3 ON T3.setCode = T2.setCode WHERE T3.name = 'Angel of Mercy'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T2.name FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.translation = 'Hauptset Zehnte Edition'": {"evaluation": "pass: incorrect", "result": "Tenth Edition", "result_hash": "7d225ce2dd618bf380aaeeedc2d954b3", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode INNER JOIN cards AS T3 ON T1.code = T3.setCode WHERE T3.name = 'Ancestor''s Chosen' AND T2.language = 'Korean'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(*) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN cards AS T3 ON T2.id = T3.mcmId WHERE T1.translation = 'Hauptset Zehnte Edition' AND T3.artist = 'Adam Rex'": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.translation FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Eighth Edition' AND T1.language = 'Chinese Simplified'": {"evaluation": "pass: correct", "result": "核心系列第八版", "result_hash": "62960c44c5ae699f3262508b79b8ea6c", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT CASE WHEN EXISTS ( SELECT 1 FROM cards WHERE name = 'Angel of Mercy' AND IFNULL(mtgoId, '') != '' ) THEN 1 ELSE 0 END": {"evaluation": "pass: incorrect", "result": "1", "result_hash": "40f1fb91cd3bfacd97c83113575324a9", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T2.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode INNER JOIN cards AS T3 ON T1.code = T3.setCode WHERE T3.name = 'Ancestor''s Chosen'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.releaseDate", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT type FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.setCode WHERE T1.translation = 'Hauptset Zehnte Edition'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(T1.setCode) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.block = 'Ice Age' AND T2.language = 'Italian' AND T2.translation IS NOT NULL": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(*) FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode WHERE T1.isForeignOnly = 1 AND T2.name = 'Adarkar Valkyrie'": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.language = 'Italian' AND T1.baseSetSize < 10": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(id) FROM cards INNER JOIN sets ON cards.setCode = sets.setCode WHERE sets.name = 'Coldsnap' AND cards.borderColor = 'black'": {"evaluation": "error: <error>", "result": "Execution error: ambiguous column name: id", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode INNER JOIN cards AS T3 ON T1.setCode = T3.setCode AND T1.id = T3.number WHERE T1.name = 'Coldsnap' ORDER BY T3.faceConvertedManaCost DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T2.artist FROM sets AS T1 INNER JOIN cards AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Coldsnap' AND T2.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy')": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T2.number FROM sets AS T1 INNER JOIN cards AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Coldsnap' AND T2.number = 4": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(T1.id) FROM sets AS T2 INNER JOIN cards AS T1 ON T1.setCode = T2.setCode WHERE T2.name = 'Coldsnap' AND T1.power IN ('*', NULL) AND T1.convertedManaCost > 5": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T4.flavorText FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid INNER JOIN set_translations AS T4 ON T3.uuid = T4.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.flavorText", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.language FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.setCode INNER JOIN cards AS T3 ON T2.code = T3.setCode WHERE T3.name = 'Ancestor''s Chosen' INTERSECT SELECT T1.language FROM foreign_data AS T1 WHERE T1.flavorText IS NOT NULL": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T2.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'German'": {"evaluation": "pass: incorrect", "result": "Kreatur — Kleriker\nKreatur — Mensch, Kleriker", "result_hash": "c0a7877eee753838d94920bce1b287ee", "num_rows": 2}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.text, T2.name AS SetName FROM rulings AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN set_translations AS T3 ON T3.setCode = T2.setCode WHERE T2.name = 'Coldsnap' AND T3.language = 'Italian'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T4.translation FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.setCode INNER JOIN cards AS T3 ON T2.code = T3.setCode JOIN foreign_data AS T4 ON T3.uuid = T4.uuid WHERE (T2.name = 'Coldsnap') AND (T1.language = 'Italian') AND (T3.convertedManaCost = ( SELECT MAX(convertedManaCost) FROM cards JOIN sets ON cards.setCode = sets.setCode WHERE sets.name = 'Coldsnap' ))": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.translation", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.date FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Reminisce'": {"evaluation": "pass: correct", "result": "2013-07-01", "result_hash": "3af3237ae361731c385f4cfbfa8b1a22", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T1.name = 'Coldsnap' AND T2.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.name = 'Coldsnap' THEN 1 ELSE 0 END) FROM sets AS T1 INNER JOIN cards AS T2 ON T1.setCode = T2.setCode": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT CAST(COUNT(CASE  WHEN T1.foilId IS NOT NULL AND T1.id IS NOT NULL THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.name = 'Coldsnap'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.foilId", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.code FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.releaseDate >= '2017-07-14' ORDER BY T1.releaseDate ASC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT sets.keyruneCode FROM sets WHERE sets.code = 'PKHC'": {"evaluation": "pass: correct", "result": "KHC", "result_hash": "e8dae00b7def992c63046475c8a3ba3c", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT MCMId FROM sets WHERE code = 'SS2'": {"evaluation": "pass: correct", "result": "2460", "result_hash": "d281fff03da1ecc5956ced7fa2906785", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.mcmName FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.releaseDate LIKE '2017-06-09%'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T2.type FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.translation LIKE '%From the Vault: Lore%'": {"evaluation": "pass: correct", "result": "from_the_vault", "result_hash": "f88315c8fb44748300d614da76c701f7", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.parentCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.name = 'Commander 2014 Oversized'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.name", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T3.text, CASE WHEN T1.hasContentWarning = 1 THEN 'yes' ELSE 'no' END FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN set_translations AS T3 ON T1.setCode = T3.setCode WHERE T1.artist = 'Jim Pavelec'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.text", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.translation = 'Evacuation'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T2.baseSetSize FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.translation = 'Rinascita di Alara'": {"evaluation": "pass: correct", "result": "145", "result_hash": "b54a8e74fe4777bcd0788c103aeb8442", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.translation = 'Huitième édition'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T3.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode INNER JOIN set_translations AS T3 ON T1.setCode = T3.setCode WHERE T3.translation = 'Tendo Ice Bridge' AND (T2.language = 'French')": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(*) FROM set_translations WHERE name = 'Tenth Edition' AND translation IS NOT NULL AND setCode = ( SELECT code FROM sets WHERE mcmName = 'Salvat 2011' )": {"evaluation": "error: <error>", "result": "Execution error: no such column: name", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T3.translation FROM cards AS T1 INNER JOIN sets AS T2 ON T1.code = T2.setCode INNER JOIN set_translations AS T3 ON T2.setCode = T3.setCode WHERE T1.name = 'Fellwar Stone' AND T3.language = 'Japanese'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.code", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T2.name FROM sets AS T1 INNER JOIN cards AS T2 ON T1.setCode = T2.setCode WHERE T1.name IS NULL AND T2.name = 'Journey into Nyx Hero''s Path' ORDER BY T2.faceConvertedManaCost DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT t2.releaseDate FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.translation = 'Ola de frío'": {"evaluation": "pass: correct", "result": "2006-07-21", "result_hash": "743fe250e558efef4586cd3a8fd25ae1", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode INNER JOIN cards AS T3 ON T3.setCode = T2.setCode WHERE T3.name = 'Samite Pilgrim'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(T2.id) FROM sets AS T1 INNER JOIN cards AS T2 ON T1.setCode = T2.setCode WHERE T2.convertedManaCost = 3 AND T1.mcmName = 'World Championship Decks 2004'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT S.translation FROM set_translations AS T1 INNER JOIN sets AS T2 ON T2.name = 'Mirrodin' INNER JOIN set_translations AS S ON T2.code = S.setCode WHERE T1.language = 'Chinese Simplified'": {"evaluation": "pass: incorrect", "result": "Mirrodin\nミラディン\n秘罗地\n秘羅地\n미로딘", "result_hash": "78c3d56b3d5c5881ab12aab598e1b34d", "num_rows": 5}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT CAST(SUM(IIF(T1.language = 'Japanese' AND T2.isNonFoilOnly = 1, 1, 0)) AS REAL) * 100 / COUNT(T1.id) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code": {"evaluation": "pass: incorrect", "result": "1.157", "result_hash": "5a5fd45668a693c206f87078721027a6", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT (CAST(SUM(CASE WHEN T1.language = 'Portuguese (Brazil)' THEN T2.isOnlineOnly ELSE 0 END) AS REAL) / COUNT(T1.uuid)) * 100 FROM set_translations AS T1 INNER JOIN cards AS T2 ON T1.setCode = T2.setCode WHERE T1.language = 'Portuguese (Brazil)'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.uuid", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT DISTINCT T1.availability FROM cards AS T1 INNER JOIN artists AS T2 ON T1.artist = T2.name WHERE T2.name = 'Aleksi Briclot' AND T1.isTextless = 1": {"evaluation": "error: <error>", "result": "Execution error: no such table: artists", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT id FROM sets WHERE baseSetSize = ( SELECT MAX(baseSetSize) FROM sets )": {"evaluation": "pass: correct", "result": "212", "result_hash": "d8f909b9b1b395392268d542042c0157", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.setCode WHERE T1.convertedManaCost = ( SELECT MAX(convertedManaCost) FROM cards WHERE side IS NULL ) GROUP BY T1.artist": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT MAX(T2.frameEffects) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.mtgjsonV4Id = T2.id WHERE T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.frameEffects", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(*) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.duelDeck = 'a' AND T1.hasFoil = 0 AND T1.power IS NULL": {"evaluation": "pass: correct", "result": "416", "result_hash": "f9c12761659ac3200aabfcdb6a4cb12d", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT id FROM sets WHERE type = 'commander' AND totalSetSize = (SELECT MAX(totalSetSize) FROM sets WHERE type = 'commander')": {"evaluation": "pass: correct", "result": "37", "result_hash": "08bf132b722854b0250976979d07018c", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT cards.name, cards.manaCost FROM cards WHERE cards.manaCost = ( SELECT MAX(manaCost) FROM cards WHERE format = 'duel' ) ORDER BY cards.manaCost DESC LIMIT 10": {"evaluation": "error: <error>", "result": "Execution error: no such column: format", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.name, T3.status, T3.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T2.status = 'Legal' AND T1.rarity = 'Mythic' ORDER BY T1.originalReleaseDate DESC LIMIT 1": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.multiverseId = T2.multiverseid WHERE T1.artist = 'Volkan Ba¿a' AND T2.language = 'French'": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(T1.name) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode INNER JOIN cards AS T3 ON T1.code = T3.setCode INNER JOIN legalities AS T4 ON T3.uuid = T4.uuid WHERE T3.name = 'Abundance' AND T3.rarity = 'rare' AND T1.type = 'expansion' AND T4.status = 'Legal'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.setCode", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.format, T3.name FROM legalities AS T3 INNER JOIN cards AS T2 ON T3.uuid = T2.uuid INNER JOIN legalities AS T1 ON T3.uuid = T1.uuid WHERE T1.status = 'Banned'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.name", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT translation FROM set_translations WHERE name = 'Battlebond' AND language='English'": {"evaluation": "error: <error>", "result": "Execution error: no such column: name", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.format, T3.artist FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid INNER JOIN ( SELECT artist, COUNT(*) as count FROM cards GROUP BY artist ) AS T3 ON T3.artist = T2.artist ORDER BY T3.count ASC LIMIT 1 GROUP BY T1.format": {"evaluation": "error: <error>", "result": "Execution error: near \"GROUP\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN set_translations AS T3 ON T1.setCode = T3.setCode WHERE T1.frameVersion = '1997' AND T1.artist = 'D. Alexander Gregory' AND T2.format = 'Legacy' AND T3.language IN ('English', 'Magic Card Scanner')": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.edhrecRank = 1": {"evaluation": "pass: incorrect", "result": "Sol Ring\tcommander\nSol Ring\tduel\nSol Ring\tlegacy\nSol Ring\toldschool\nSol Ring\tvintage", "result_hash": "1a09c0d162115d216e4daa804af86dbf", "num_rows": 5}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T2.releaseDate BETWEEN '2012-01-01' AND '2015-12-31' THEN 1 ELSE 0 END) AS REAL) / AVG(id) AS average_sets, T1.translation FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY T1.translation ORDER BY COUNT(T1.translation) DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: ambiguous column name: id", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1纸horiaModification = 'black' AND T1.availability = 'arena'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1纸horiaModification", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.uuid, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'oldschool' AND T2.status IN ('Banned', 'Restricted')": {"evaluation": "pass: incorrect", "result": "00460d79-3570-58b8-af87-7b89106eb48c\tBalance\n0242fe38-00c4-51e3-9f77-0d2407a6e5ab\tDemonic Attorney\n0440e3de-3b4f-5480-83f8-18576526ebc8\tJeweled Bird\n09ba97e8-43f1-5288-8703-b10f7c1afec9\tDemonic Tutor\n0b341db1-b11a-547f-a751-bbce37f4e652\tBalance\n0de59a71-9aef-5996-9670-84bf4605b28c\tMaze of Ith\n0fb905a4-2968-55c7-9750-0584055b8fa4\tWheel of Fortune\n173fc1fb-c465-5d62-b34e-60d76df02fee\tMox Jet\n1883bedf-2a7e-54b3-9d1d-4bb10ab6a148\tSol Ring\n1ad070b0-a4ab-5658-b599-1178c86a379e\tDemonic Attorney\n1c17ce18-bf3e-558b-9389-632588f93851\tAncestral Recall\n1d546e66-6a39-5488-afe5-1b41c6c29ed2\tDemonic Attorney\n1ef89b62-1763-5499-9d4c-8380fe3845bd\tTime Walk\n1f3fe3e1-f4b1-5b42-9f70-3bdf29a543dd\tBraingeyser\n22768213-dec8-5450-89b2-865bd07ccd52\tChaos Orb\n249e6587-885e-5fbc-8593-b13114de5e2b\tChaos Orb\n2755f7a3-5a55-54b0-97c0-ddc7c7027f5d\tMind Twist\n2773a227-9c92-5aa6-969b-3ef64bdc8c1f\tMox Emerald\n2cea6d13-c0a2-56f9-8434-e94408fc2fa5\tRecall\n32ca9987-b8ae-5582-9417-ac94889bef7d\tRegrowth\n352e85ba-b964-524e-8612-9b843684cf9e\tTimetwister\n36bf70e3-9a2d-55d5-8a08-2529058a522f\tRebirth\n37f19e38-a9ee-5d30-8d4c-2619a11ebd15\tMox Ruby\n3876cd4c-db88-534e-877c-307fa2e2b160\tMox Emerald\n3ce0b3f0-1c72-5d36-a9fb-82fc2b0aca19\tTime Vault\n43a2b50a-10e4-5e38-9923-214ff7c869ce\tBraingeyser\n46fede65-32ce-5398-80f4-e784bd7c2083\tMind Twist\n47a60b39-e13f-5741-a332-bab38681d506\tBronze Tablet\n4a102b79-3e73-5505-ada4-8f7038deae5b\tRegrowth\n4a94a818-169e-56d0-8940-11ba01014a2b\tTimetwister\n4e4b8e5a-eb6f-5cc8-ad5f-dc90786ce59e\tMox Sapphire\n51fa4a97-3e61-53e0-bb10-a0e19f09802e\tBalance\n5519d329-90ca-5fc0-896e-1f17a83a36df\tChannel\n570b9c70-eb8b-5c23-b952-01797b13164f\tSol Ring\n5887c378-5053-58fe-b60a-813773964d8c\tChannel\n5bbffa23-158c-5d91-9558-a3639b15227c\tWheel of Fortune\n5d6b2169-23af-52ec-b5f1-c0ab9b656ea9\tChannel\n5dd1158c-6210-5a8c-a9bb-63df7f25d10a\tMox Sapphire\n60124c14-dc29-5c80-af4e-620dc2020046\tContract from Below\n62ea0585-e70a-52b1-ac6b-d158f0b07ff2\tMox Sapphire\n63249fc5-9772-5ab6-aae1-6e9310dab473\tBalance\n6614c4a8-5ae6-502a-af01-6c35568ff5c0\tDarkpact\n67d70c16-209e-59df-b744-f439187420db\tMana Drain\n6cb2723e-f6eb-52b2-bc68-b53268ce4cdd\tWheel of Fortune\n712813d4-f8e9-5f17-8b1d-7de0f2c88d41\tRegrowth\n75579c49-8efe-5cc4-b645-5fff52736424\tMox Ruby\n7ce27226-84fd-56df-b637-933814529987\tMox Jet\n7fc5399f-5a7d-5502-a716-2da18df1a98e\tSol Ring\n82fd3e6e-9c58-575e-8afe-5f6132d07ec3\tRebirth\n869695f6-f327-5599-adfe-dcad1d3c6397\tRegrowth\n8a4f09ad-0398-50ba-9bab-55a5bb43f154\tDarkpact\n8d38b671-1951-552c-84d2-a38de5c731c7\tJeweled Bird\n91b1fc1a-bb11-55ff-bbc4-20fc7ee9c9c3\tBalance\n97d8bc45-cb2f-566b-87e5-3891ae11b30a\tWheel of Fortune\n9aa589ba-91e7-5122-a28a-b0b61cab578e\tBraingeyser\n9cb0236a-3949-5bd0-9aa6-c22b557115d2\tBalance\na50d26a8-53de-58e2-827d-2b74fdfcd6ea\tMind Twist\na78ca0fa-959b-5783-9dbd-515023519555\tWheel of Fortune\na9c94227-8f8e-5ea8-983b-23585ede2d54\tRecall\nac4202e5-116b-552f-a03a-c6023db2cfe5\tDemonic Attorney\naeabf547-404c-5b6b-8a82-504e834ee755\tMind Twist\nb4ab21b9-6bff-52b0-8d15-97ad3a084d4c\tSol Ring\nbc829d8c-8e49-5593-9f64-d1d318a6828d\tContract from Below\nbc924c9e-b4fc-5a05-9803-59c108546a3e\tMox Emerald\nbdbc1b80-5371-5af3-9c7c-6ec166c2cf5c\tMox Pearl\nbffdcbd9-13a2-5dcb-a74c-e32ec6c363cd\tContract from Below\nc395c80e-298a-5870-8877-cd0a7e273146\tLibrary of Alexandria\nc6d961c9-b5d8-5b77-a8f5-075d103fe7d9\tContract from Below\nc7cbcb30-c3d5-5916-bef7-d243bf6cc7c8\tDarkpact\ncee140cd-3ed0-536e-9a5e-aeb41cbb2f8c\tContract from Below\nd07d3e82-7560-5d33-81a5-ac98ac048f29\tChaos Orb\nd44e279c-1df8-5903-bf15-f44705e19945\tDemonic Attorney\nd55ebc7a-b2e7-5a5b-a2fe-56f30b700d00\tDarkpact\nd8516c39-4816-5033-8250-281b83a655b4\tRegrowth\nda8f86f9-f3f4-5ca2-b316-5e6be2acbbea\tDemonic Tutor\ndaae9119-9316-538f-b9ae-ba871f5cb185\tTime Walk\ndd7dc9be-25c6-50c3-bd57-d48dd024c52c\tRegrowth\ne5cc0323-44ee-5cdd-9860-f4d6338dbeee\tBalance\nea29f6b3-77b0-5359-858a-f279ea66cf57\tChannel\necfef046-ee24-54ca-9670-7fc2d09e09dc\tBlack Lotus\nf05a01b1-71d1-51b1-98bd-300759e513b0\tBronze Tablet\nf2105437-b5f7-5096-8014-ce2b100cd506\tDemonic Attorney\nf7c254d4-621b-5df2-bb8d-6020749f55be\tChaos Orb\nfa7907ce-3f80-5075-a9fc-874d8e27b6eb\tBalance\nfc1e04db-2186-5eec-b50c-d91b0d3dcf8f\tTimetwister\nfe19ba78-b922-5ce5-8ad9-276a3cfabf57\tSol Ring\nffd1619a-8b42-5615-83fa-4840d3cccf89\tChannel", "result_hash": "687578de9a31634145889666d34f2993", "num_rows": 173}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.artist = 'Matthew D. Wilson' AND T1.availability LIKE 'paper'": {"evaluation": "pass: incorrect", "result": "60", "result_hash": "d8f3de5632bcad6665cd0256b434d668", "num_rows": 1}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T3.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN set_translations AS T3 ON T1.setCode = T3.setCode WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.text", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.name, T4.format FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode INNER JOIN legalities AS T3 ON T3.uuid = T1.mcmId INNER JOIN cards AS T4 ON T1.id = T4.setID WHERE T1.name = 'Hour of Devastation' AND T3.status = 'Legal'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.format", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT T1.name FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.setCode WHERE T1.language NOT LIKE '%Japanese%' AND T1.language != '' AND T1.language LIKE '%Korean%'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.name", "result_hash": "", "num_rows": 0}, "data/test_databases/card_games/card_games.sqlite<$$|||$$>SELECT cards.frameVersion, cards.name FROM cards WHERE artist = 'Allen Williams' UNION SELECT cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned'": {"evaluation": "error: <error>", "result": "Execution error: SELECTs to the left and right of UNION do not have the same number of result columns", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT CASE \n    WHEN (SELECT MAX(Reputation) FROM users WHERE DisplayName = 'Harlan') > \n    (SELECT MAX(Reputation) FROM users WHERE DisplayName = 'Jarrod Dixon') \n    THEN (SELECT MAX(Reputation) FROM users WHERE DisplayName = 'Harlan')\n    ELSE \n    (SELECT MAX(Reputation) FROM users WHERE DisplayName = 'Jarrod Dixon') END": {"evaluation": "pass: incorrect", "result": "457", "result_hash": "abc3696388c3bb05381d927dc23a7b30", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT t1.DisplayName FROM users AS t1 WHERE strftime('%Y', t1.CreationDate) = '2011'": {"evaluation": "pass: correct", "result": "0101amt\n1osmi\n500\nA Lee\nABC\nASC\nAVB\nAarthi\nAbruzzo Forte e Gentile\nAdam Kane\nAdi Shavit\nAffine\nAidos\nAkhil Mathew\nAlan Forsythe\nAlbert Swart\nAlejandro\nAlex Miller\nAlexAtStack\nAlexander Galkin\nAlexandru Luchian\nAlistair Knock\nAllen Goodman\nAmaranta\nAmit Kumar Gupta\nAnamika\nAndre\nAndreas\nAndrei Freeman\nAndrew Aylett\nAndrew Jaffe\nAndrey Paramonov\nAndy \nAndyN\nAnindya Chatterjee\nAnne\nAnt's\nAnton\nAppleGrew\nAriel\nArnaud\nArthur B.\nArvin\nAshok\nAta\nAugusto\nAustin Moore\nAyse Ulgen\nB Seven\nBLAKE\nBadgerman\nBarry Wark\nBeasterfield\nBen Brocka\nBen Lauderdale\nBenjaLim\nBenoitParis\nBernardo Mendoza\nBhoom Suktitipat\nBill B\nBill White\nBioGeek\nBlaž Šnuderl\nBob Aman\nBob_Gneu\nBonoboticians\nBoston Bill\nBrad Langhorst\nBreadtruck\nBrett\nBrian Borchers\nBrown Limie\nBudric\nC.R.\nCaJa\nCandide\nCarl F.\nCarlos Rene Perez\nCarol Jaensch\nCarson\nCathy\nChadBDot\nChandu\nCharlie Epps\nChinasaur\nChords\nChris Drappier\nChris Haulk\nChrisL\nChristian Lindig\nChristopher Mahan\nClaire\nClint\nColin\nCraig T\nCruiZen\nCynthia\nD.A.\nDPS\nDadam\nDamien\nDan Dunn\nDanial\nDaniel Eliasson\nDaniel Lemire\nDanielOfTaebl\nDarren\nDarwy\nDav Weps\nDave Konopka\nDavid Alber\nDavid Ingram\nDavid M Kaplan\nDavid Wright\nDavidDong\nDaи\nDearLLove\nDehydratedSnowman\nDenise\nDerek Ploor\nDewey22\nDiggyF\nDimi_Pel\nDinesh\nDmitrii I.\nDon\nDoppelganger\nDov\nDr. Shadi HIJAZI\nDrahakar\nDrew Lake\nDude\nDzamo Norton\nEVK\nEd Johnston\nEdgar Glark\nEduardo León\nEgon\nElKamina\nElizabeth\nEmer\nEmma Rafferty\nEng.Fouad\nErad\nErik\nEsther\nEugeniy Bakin\nExcellll\nFMZ\nFabrice\nFalk\nFelix\nFergus Barker\nFinancial Economist\nFlavio Rodríguez\nFlying pig\nFossilizedCarlos\nFrank Martin\nFrançois Beausoleil\nFrederik\nFucitol\nGGG\nGabe Verzino\nGala\nGansu\nGaurav Jain\nGeert Litjens\nGeoSS\nGerald Senarclens de Grancy\nGiorgio Spedicato\nGokay\nGray\nGreg Snow\nGregor Gorjanc\nGriffin\nGuest\nGuillermo G.\nHFC\nHafsa Hina\nHans\nHao Wooi Lim\nHarold Cavendish\nHas Nickname\nHedgeMage\nHenry Fawkes\nHills\nHowie Fung\nI Like Raffles\nIan\nIdo Tamir\nIlik\nIlya Klyuchnikov\nInfinity\nIsaac Remuant\nIvan Sopov\nJ-_-L\nJBWhitmore\nJD.\nJK01\nJS01\nJack\nJack Tanner\nJacob Eggers\nJaime\nJakub\nJames Kingsbery\nJamesS\nJan-Henk\nJanne\nJason Davies\nJasonMond\nJavier Bermejo\nJay Levitt\nJean-Yves\nJeff Hall\nJeff Wolski\nJen\nJeremy Heiler\nJerogee\nJessica\nJim V\nJing\nJoao Figueiredo\nJoe Germuska\nJoey\nJohannes\nJohn Assymptoth\nJohn Crowell\nJohn Kane\nJohn Reed\nJohn St. John\nJohnGB\nJon Arts\nJonas\nJonathan Andrews\nJones\nJope\nJose\nJoshua D'Alton\nJosé\nJoyce Wang\nJubbles\nJules\nJunier\nJustin Cave\nJérôme Le Chatelier\nKMC\nKarl\nKarlP\nKatie Kirkpatrick\nKeith A. Lewis\nKeller Scholl\nKennyPeanuts\nKevin Burke\nKimmeke\nKiwi\nKonstantin Tenzin\nKristal\nKurt\nKyle Mathews\nLNA\nLaila\nLance Roberts\nLars Behrendt\nLauren Gundrum\nLe Hibou\nLeau\nLeif Carlsen\nLeo5188\nLevon\nLieven Keersmaekers\nLisa\nLockeCJ\nLouis Marascio\nLucas Kauffman\nLuke Braidwood\nLuís Marques\nM. May\nMCKelvin\nMYaseen208\nMacro\nMahesh\nMajed Hijazi\nManoel Galdino\nMarcel\nMarco K\nMarcus\nMarek\nMario Marín\nMark B\nMark Greenaway\nMark Lister\nMarkus\nMartin\nMartyn Plummer\nMassimo\nMatlabSorter\nMatt Dotson\nMatt Krause\nMattK\nMatthias\nMax Gordon\nMaysam\nMelisa\nMercer Traieste\nMichael\nMichael Dudalev\nMichael Krelin - hacker\nMichele\nMidnighter\nMike\nMike Furlender\nMike Sherrill 'Cat Recall'\nMikhail Glushenkov\nMilos\nMisha\nMithun Ashok\nMoh\nMohit Ranka\nMorae\nMortimer\nMr Chocolate Moose\nMr_Spock\nMurray\nN F\nNRH\nNana\nNathan Gossett\nNeal Fultz\nNeil Best\nNellius\nNestor\nNicholas\nNick Crawford\nNickC\nNicolas\nNikolaus\nNina Brandstack\nNixuz\nNoam Peled\nNot Durrett\nO_Devinyak\nOldTroll\nOliver Tomic\nOptimized Life\nOscar\nOsvaldo M.\nP auritus\nPPPPPP\nPalace Chan\nParbury\nPatrick\nPatrick from NDepend team\nPaul Hiemstra\nPaul Mason\nPaul Vogt\nPavel Savara\nPengOne\nPete Wilson\nPeter Kovac\nPeter Tomlins\nPhil Whittington\nPhill Pafford\nPierre\nPiyush\nPragya\nProbablePattern\nPtdstudent\nPyrrhus\nQin\nQuartz\nRBerteig\nRachel McIlroy\nRafael\nRaffael\nRaj\nRana\nRanjit\nRatzes\nRe-L\nRegressor\nRhama Arya Wibawa\nRich C\nRichard Povinelli\nRicky\nRinat Tainov\nRob Lachlan\nRobert\nRobert Kubrick\nRobin Green\nRodney Polkinghorne\nRohit Banga\nRollie\nRon Gejman\nRoss Bettinger\nRoundTower\nRudolf Cardinal\nRyan\nRyanDalton\nS4M\nSMW\nSadeghd\nSam Lee\nSamB\nSameh Kamal\nSandy Muspratt\nSara\nSatoshi Miyazawa\nScott\nScott Ritchie\nSe Norm\nSean Vikoren\nSebastian Paaske Tørholm\nSemen Podkorytov\nSergey\nSeth Rogers\nShane\nShatu\nSheldonCooper\nShluffer\nShrikant Sharat\nSigmaX\nSimplicity\nSkolnick\nSney\nSofia\nSoner Gönül\nSpencer Uresk\nSrikanth N\nStar Dust\nSteAp\nStefan Mai\nStephane Rolland\nSteve Bennett\nSteve P\nSteven D.\nStilltorik\nSubhani\nSunil\nSusan Jacobson\nSverre\nSylvain Defresne\nTCopple\nTadeck\nTamas Ferenci\nTapefreak\nTendayi Mawushe\nThe Doctor What\nTheImirOfGroofunkistan\nThies Heidecke\nThomas B\nThomas Eding\nThomasBayes\nThursdays Coming\nTim\nTim Reddy\nTizz\nTom\nTom Clarkson\nTom Reilly\nTommaso\nTony R\nTrayton White\nTrey\nTu.2\nTwo Cents\nTyr\nUltraCommit\nUser\nVadim Chekan\nVasil Dakov\nVenu Satuluri\nVictor L\nVictor Van Hee\nViktiglemma\nVincy Pyne\nVirtualStaticVoid\nVladimir Chupakhin\nWJG\nWaqar Muhammad Khan\nWern\nWh1T3h4Ck5\nWilli\nWillian Mitsuda\nWipa\nWookai\nXMX\nXenophiliusLovegood\nXiaochun\nY999\nYann Abraham\nYekver\nYuliaPro\nZarbouzou\nZev Chonoles\nZos\na11msp\naardvarkk\nablimit\naculich\nae0709\nahsan\nakaphenom\nakshayshah\nalex keil\nalexplanation\nalnesbit\naltblue\namair\namsorribes\nandrija\nanujk\nararoot\narmundle\nasaaki\nasjo\nat01\naudijenz\nb_erb\nbayesian\nbeach\nbehnam\nberkay\nbgbgh\nbinarysolo\nbjkdy\nblacky\nblubb\nbneil\nbooblick\nbpanulla\nbrandon\nbrews\nburuzaemon\nc0ldcrow\ncaelyx\ncameron.bracken\ncardinal\ncboettig\ncdeszaq\nchanakrogue\nche2cbs\nchet\nchris\ncjauvin\ncloudartisan\ncodegecko\ncoffee\nconfused\ncraniumonempty\ncschooley\ncybele\nd_ijk_stra\ndaniel savage\ndarlinton\ndavebowker\ndavsan\ndchandler\nddalo\ndeepsky\ndernier recours\ndgn\ndimbo\ndixi\ndlaliberte\ndmonner\ndon\ndoug helmers\ndr jimbob\ndrevicko\ndrstevok\ndubby\ndwatson\neat\necounysis\nedwardw\neinpoklum\nele\nemchristiansen\nen.\nennuikiller\nerik\netarion\neverybodyelse\nf1r3br4nd\nfangly\nffjkjio\nfinitud\nfletch\nfod\nfrancogrex\ngWaldo\ngawbul\ngenneth\ngilesc\ngizgok\ngok\ngpr\ngreyfade\ngung\ngyroidben\nhardboiled\nhawk\nhearn\nhiberbear\nhippietrail\nhotips\nhtr\nhypermush\nianbarker\nicobes\nikohut\nimbenzene\ninoyau\nisJustMe\nitzy\nj.w.r\njames\njarz\njb.\njclozano\njedfrancis\njerry_sjtu\njiggysoo\njkp\njoadoor\njohn sae\njoms\njonls\njoshstewart\njrand\njscott\njthetzel\njules\njwJung\nkanak\nkasterma\nkekekela\nkgarten\nkiamlaluno\nklonq\nkrike\nkrs\nkshep\nl.g\nlarsr\nleejy\nlewellen\nlisak\nlockedoff\nlouise\nluis\nlyuba\nmacarthy\nmala213\nmarcgg\nmarkk\nmassimo\nmathman\nmatthewh\nmaxTC\nmc10\nmdsumner\nmeklarian\nmetaforce\nmghandi\nmicans\nmihsathe\nmikl\nmitchus\nmlxa\nmonksy\nmoses\nmrlinx\nmsms\nmurgatroid99\nmyruki\nnIKUNJ\nnaufraghi\nnekomatic\nnibot\nniko\nnrabinowitz\nnzcoops\nobounaim\nogerard\nomatai\nosager\nosknows\nowlyph\npakmanaz\npatocardo\npazam\npedrosaurio\npersistence911\npfctdayelise\nphubaba\npingi\nplease delete me\npna\npootzko\npranshu k\nprogram247365\npttmc2\nqba73\nqntmfred\nqza\nr3st0r3\nrafalotufo\nraygozag\nregressor\nrguha\nricky197311\nrjack\nrm999\nrobbrit\nrobo\nroman m\nrosmir\nrstonehouse\nryan\nsalva\nsamridhi\nsantiagozky\nsaugust\nsciarp\nscreechOwl\nseanieb\nseptagram\nsev\nshelly\nshyamupa\nsimendsjo\nsirchristian\nskunk\nsmci\nsnoopy\nsopa\nspeciousfool\nsportsfan\nssi\nsteko\nstharward\nstud1\nsunkencity\nsush\nsyonghee\ntdc\ntel\ntg777\nthemirror\nthiton\ntiffiny\ntnotstar\ntom brown\ntony\ntrema\ntroutwine\ntrutheality\ntunnuz\nuid0owl\nurbansheep\nuser1033775\nuser1066366\nuser12290\nuser142360\nuser227290\nuser2643\nuser2755\nuser2918\nuser3125\nuser330214\nuser340202\nuser3509\nuser3683\nuser3897\nuser4055\nuser4262\nuser428900\nuser4346\nuser4528\nuser4594\nuser4629\nuser4775\nuser4911\nuser4959\nuser5199\nuser53565\nuser5518\nuser583690\nuser614\nuser6367\nuser643722\nuser66734\nuser6823\nuser7064\nuser721975\nuser7417\nuser7701\nuser8022\nuser807084\nuser915\nuser984041\nusr_ports\nuvts_cvs\nvaruman\nvigneswaran\nvitaut\nvonPetrushev\nwcairns\nweez13\nwf01\nwillieneis\nwizlog\nwoliveirajr\nwvguy8258\nxentoo\nxtian\nyanjost\nyayu\nyibe\nysawej\nzbicyclist\nzeitue\nziggystar\nzumalifeguard\nændrük", "result_hash": "97d35941c89488598967d23cc187c455", "num_rows": 4135}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(Id) FROM users WHERE LastAccessDate > '2014-09-01'": {"evaluation": "pass: incorrect", "result": "5146", "result_hash": "46d6d600a36c6cae550b75c44ccb707d", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1": {"evaluation": "pass: correct", "result": "whuber", "result_hash": "c818fe982fcea4c19be320b36071e5fe", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.UpVotes > 100 AND T2.UserId IN ( SELECT T1.UserId FROM votes AS T1 INNER JOIN votes AS T2 ON T1.UserId = T2.UserId WHERE T1.VoteTypeId = 2 AND T2.VoteTypeId = 3 GROUP BY T1.UserId, T2.UserId HAVING COUNT(*) > 1 )": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(*) FROM users WHERE Views > 10 AND (strftime('%J', CreationDate) > 736860)": {"evaluation": "pass: incorrect", "result": "3278", "result_hash": "609ccd7f4d3dc5c2033b545d0c9d4379", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'csgillespie'": {"evaluation": "pass: correct", "result": "121", "result_hash": "854474ae29d3fee32d70d2eec47311ed", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT Title FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')": {"evaluation": "pass: correct", "result": "Alternative graphics to \"handle bar\" plots\nChoosing a bandwidth for kernel density estimators\nEliciting priors from experts\nExamples for teaching: Correlation does not mean causation\nFree statistical textbooks\nHow to annoy a statistical referee?\nMetropolis-Hastings algorithms used in practice\nRandom numbers and the multicore package\nRemoving factors from a 3-way ANOVA table\nReviewing statistics in papers\nWhat statistical blogs would you recommend?\nWhat type of post-fit analysis of residuals do you use?\nNone", "result_hash": "39ec1c96cf0dc484eb3a4703a4528645", "num_rows": 13}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT DisplayName FROM posts WHERE Title = 'Eliciting priors from experts'": {"evaluation": "error: <error>", "result": "Execution error: no such column: DisplayName", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1": {"evaluation": "pass: correct", "result": "Examples for teaching: Correlation does not mean causation", "result_hash": "9351b5999e04e83e37bcf7020537c0d6", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.id = (SELECT Id FROM posts ORDER BY FavoriteCount DESC LIMIT 1)": {"evaluation": "pass: correct", "result": "Fabian Fagerholm", "result_hash": "88473ca5934d8da4dd73e4d24db4efff", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT SUM(T2.CommentCount) FROM users AS T1 INNER JOIN posts AS T2 ON T2.OwnerUserId = T1.Id WHERE T1.DisplayName = 'csgillespie'": {"evaluation": "pass: correct", "result": "256", "result_hash": "673c05b17685d654bf8cadc448d4f475", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT t2.AnswerCount FROM users AS t3 INNER JOIN posts AS t1 ON t3.Id = t1.OwnerUserId INNER JOIN users AS t4 ON t1.LastEditorUserId = t4.Id INNER JOIN comments AS t5 ON t1.Id = t5.PostId LEFT JOIN postHistory AS t6 ON t1.Id = t6.PostId LEFT JOIN votes AS t7 ON t1.Id = t7.PostId LEFT JOIN posts AS t2 ON t1.ParentId = t2.Id AND t2.PostTypeId = 2 WHERE t1.OwnerUserId IN ( SELECT T5.Id FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Enthusiast' AND T2.UserId = ( SELECT Id FROM users WHERE DisplayName = 'csgillespie' ))": {"evaluation": "error: timeout", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'": {"evaluation": "pass: correct", "result": "Abhilash", "result_hash": "31e21273dffdda3d2c38f2c2bd16d8ef", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL": {"evaluation": "pass: correct", "result": "12", "result_hash": "bee60442f34c47fe9de7e8b0e99e17dc", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T3.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id INNER JOIN votes AS T3 ON T2.Id = T3.UserId WHERE T1.ClosedDate IS NOT NULL": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.DisplayName", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(PostId) FROM posts AS T1 INNER JOIN users AS T2 ON T1 OwnerUserId = T2.Id WHERE CAST(T2.Age AS REAL) > 65 AND T1.Score >= 20": {"evaluation": "error: <error>", "result": "Execution error: near \"OwnerUserId\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T1.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.Id = T2.Id WHERE T2.OwnerUserId = ( SELECT T2.OwnerUserId FROM posts AS T2 WHERE T2.Title = 'Eliciting priors from experts' )": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.Location", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T1.Body FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Id = T2.ExcerptPostId WHERE T2.TagName = 'bayesian'": {"evaluation": "pass: correct", "result": "Bayesian inference is a method of statistical inference which uses Bayes' theorem to find probability estimates of parameters or hypotheses.", "result_hash": "f4fcf8ea024a26e5082dfdb018547cc0", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT t2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id WHERE T1.Count = ( SELECT MAX(Count) FROM tags )": {"evaluation": "pass: correct", "result": "Use this tag for any *on-topic* question that (a) involves `R` either as a critical part of the question or expected answer (b) is not *just* about how to program in `R`.", "result_hash": "6e44a4b79d6c81ed4fa35c7ea0ba7073", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(*) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'": {"evaluation": "pass: correct", "result": "95", "result_hash": "49e9f2fb61164c32acc86dd509d2768e", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.Userid = T2.Id WHERE T2.DisplayName = 'csgillespie'": {"evaluation": "pass: correct", "result": "Altruist\nAnnouncer\nAutobiographer\nBeta\nCaucus\nCitizen Patrol\nCivic Duty\nCommentator\nConstable\nConstituent\nConvention\nCritic\nCurious\nCustodian\nDisciplined\nEditor\nEnlightened\nEnthusiast\nFamous Question\nFanatic\nFavorite Question\nGood Answer\nGood Question\nInvestor\nNice Answer\nNice Question\nNotable Question\nOrganizer\nPopular Question\nPrecognitive\nQuorum\nScholar\nSelf-Learner\nStrunk & White\nStudent\nSuffrage\nSupporter\nSynonymizer\nTalkative\nTaxonomist\nTeacher\nYearling\nr", "result_hash": "8c05182a520cbe657f7ae28ee112104e", "num_rows": 43}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(T2.Id) \nFROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId \nWHERE T1.DisplayName = 'csgillespie' AND STRFTIME('%Y', T2.Date) = '2011'": {"evaluation": "pass: correct", "result": "15", "result_hash": "50d1c44f2aa9d695983c21af98fbde1f", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1": {"evaluation": "pass: correct", "result": "whuber", "result_hash": "c818fe982fcea4c19be320b36071e5fe", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'": {"evaluation": "pass: correct", "result": "9.000", "result_hash": "3bb214955440d30f56b7c656da5881d9", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T2.Views > 200 THEN 1 ELSE 0 END) AS REAL) * 1.0 / COUNT(T1.DisplayName) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.DisplayName", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT CAST(COUNT(CASE WHEN T2.Age > 65 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 5": {"evaluation": "pass: correct", "result": "0.169", "result_hash": "616a56066886455ef261c6165d7848da", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(*) \nFROM votes AS T1 \nINNER JOIN users AS T2 ON T1.UserId = T2.Id \nWHERE T1.CreationDate = '2010-07-19' AND T2.Id = 58": {"evaluation": "pass: correct", "result": "1", "result_hash": "40f1fb91cd3bfacd97c83113575324a9", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T1.CreationDate FROM votes AS T1 INNER JOIN ( SELECT Rowid, max(BountyAmount) AS max_BountyAmount, CreationDate FROM votes GROUP BY CreationDate ) AS T2 ON T2.rowid = T1.id": {"evaluation": "pass: incorrect", "result": "2010-07-19\n2010-07-20\n2010-07-21\n2010-07-22\n2010-07-23\n2010-07-24\n2010-07-25\n2010-07-26\n2010-07-27\n2010-07-28\n2010-07-29\n2010-07-30\n2010-07-31\n2010-08-01\n2010-08-02\n2010-08-03\n2010-08-04\n2010-08-05\n2010-08-06\n2010-08-07\n2010-08-08\n2010-08-09\n2010-08-10\n2010-08-11\n2010-08-12\n2010-08-13\n2010-08-14\n2010-08-15\n2010-08-16\n2010-08-17\n2010-08-18\n2010-08-19\n2010-08-20\n2010-08-21\n2010-08-22\n2010-08-23\n2010-08-24\n2010-08-25\n2010-08-26\n2010-08-27\n2010-08-28\n2010-08-29\n2010-08-30\n2010-08-31\n2010-09-01\n2010-09-02\n2010-09-03\n2010-09-04\n2010-09-05\n2010-09-06\n2010-09-07\n2010-09-08\n2010-09-09\n2010-09-10\n2010-09-11\n2010-09-12\n2010-09-13\n2010-09-14\n2010-09-15\n2010-09-16\n2010-09-17\n2010-09-18\n2010-09-19\n2010-09-20\n2010-09-21\n2010-09-22\n2010-09-23\n2010-09-24\n2010-09-25\n2010-09-26\n2010-09-27\n2010-09-28\n2010-09-29\n2010-09-30\n2010-10-01\n2010-10-02\n2010-10-03\n2010-10-04\n2010-10-05\n2010-10-06\n2010-10-07\n2010-10-08\n2010-10-09\n2010-10-10\n2010-10-11\n2010-10-12\n2010-10-13\n2010-10-14\n2010-10-15\n2010-10-16\n2010-10-17\n2010-10-18\n2010-10-19\n2010-10-20\n2010-10-21\n2010-10-22\n2010-10-23\n2010-10-24\n2010-10-25\n2010-10-26\n2010-10-27\n2010-10-28\n2010-10-29\n2010-10-30\n2010-10-31\n2010-11-01\n2010-11-02\n2010-11-03\n2010-11-04\n2010-11-05\n2010-11-06\n2010-11-07\n2010-11-08\n2010-11-09\n2010-11-10\n2010-11-11\n2010-11-12\n2010-11-13\n2010-11-14\n2010-11-15\n2010-11-16\n2010-11-17\n2010-11-18\n2010-11-19\n2010-11-20\n2010-11-21\n2010-11-22\n2010-11-23\n2010-11-24\n2010-11-25\n2010-11-26\n2010-11-27\n2010-11-28\n2010-11-29\n2010-11-30\n2010-12-01\n2010-12-02\n2010-12-03\n2010-12-04\n2010-12-05\n2010-12-06\n2010-12-07\n2010-12-08\n2010-12-09\n2010-12-10\n2010-12-11\n2010-12-12\n2010-12-13\n2010-12-14\n2010-12-15\n2010-12-16\n2010-12-17\n2010-12-18\n2010-12-19\n2010-12-20\n2010-12-21\n2010-12-22\n2010-12-23\n2010-12-24\n2010-12-25\n2010-12-26\n2010-12-27\n2010-12-28\n2010-12-29\n2010-12-30\n2010-12-31\n2011-01-01\n2011-01-02\n2011-01-03\n2011-01-04\n2011-01-05\n2011-01-06\n2011-01-07\n2011-01-08\n2011-01-09\n2011-01-10\n2011-01-11\n2011-01-12\n2011-01-13\n2011-01-14\n2011-01-15\n2011-01-16\n2011-01-17\n2011-01-18\n2011-01-19\n2011-01-20\n2011-01-21\n2011-01-22\n2011-01-23\n2011-01-24\n2011-01-25\n2011-01-26\n2011-01-27\n2011-01-28\n2011-01-29\n2011-01-30\n2011-01-31\n2011-02-01\n2011-02-02\n2011-02-03\n2011-02-04\n2011-02-05\n2011-02-06\n2011-02-07\n2011-02-08\n2011-02-09\n2011-02-10\n2011-02-11\n2011-02-12\n2011-02-13\n2011-02-14\n2011-02-15\n2011-02-16\n2011-02-17\n2011-02-18\n2011-02-19\n2011-02-20\n2011-02-21\n2011-02-22\n2011-02-23\n2011-02-24\n2011-02-25\n2011-02-26\n2011-02-27\n2011-02-28\n2011-03-01\n2011-03-02\n2011-03-03\n2011-03-04\n2011-03-05\n2011-03-06\n2011-03-07\n2011-03-08\n2011-03-09\n2011-03-10\n2011-03-11\n2011-03-12\n2011-03-13\n2011-03-14\n2011-03-15\n2011-03-16\n2011-03-17\n2011-03-18\n2011-03-19\n2011-03-20\n2011-03-21\n2011-03-22\n2011-03-23\n2011-03-24\n2011-03-25\n2011-03-26\n2011-03-27\n2011-03-28\n2011-03-29\n2011-03-30\n2011-03-31\n2011-04-01\n2011-04-02\n2011-04-03\n2011-04-04\n2011-04-05\n2011-04-06\n2011-04-07\n2011-04-08\n2011-04-09\n2011-04-10\n2011-04-11\n2011-04-12\n2011-04-13\n2011-04-14\n2011-04-15\n2011-04-16\n2011-04-17\n2011-04-18\n2011-04-19\n2011-04-20\n2011-04-21\n2011-04-22\n2011-04-23\n2011-04-24\n2011-04-25\n2011-04-26\n2011-04-27\n2011-04-28\n2011-04-29\n2011-04-30\n2011-05-01", "result_hash": "07b94b0c139c081dae268f801770ce96", "num_rows": 287}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(Id) FROM badges WHERE Name = 'Revival'": {"evaluation": "pass: correct", "result": "1018", "result_hash": "0979cd266da94b52e187ea448a5089d2", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T1.Title FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.Score = ( SELECT MAX(Score) FROM comments )": {"evaluation": "pass: correct", "result": "Detecting a given face in a database of facial images", "result_hash": "0e3034d196279f96bd6359aed656eb0e", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(*) FROM comments WHERE comments.PostId = ( SELECT posts.Id FROM posts WHERE posts.ViewCount = 1910 )": {"evaluation": "pass: correct", "result": "1", "result_hash": "40f1fb91cd3bfacd97c83113575324a9", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T2.FavoriteCount FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 3025 AND T1.CreationDate = '2014-04-23 20:29:39.0'": {"evaluation": "pass: correct", "result": "3", "result_hash": "1c4c4870852a93d3b7ec8dac8ad87b47", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT Text FROM comments WHERE PostId=( SELECT ParentId FROM posts WHERE Id = 107829 )": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT CASE WHEN T2.ClosedDate IS NULL THEN 'yes' ELSE 'no' END AS ClosedStatus \nFROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId \nWHERE T2.UserId = 23853 AND T2.CreationDate = '2013-07-12 09:08:18.0'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.ClosedDate", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT t2.Reputation FROM posts AS t1 INNER JOIN users AS t2 ON t1.OwnerUserId = t2.Id WHERE t1.Id = 65041": {"evaluation": "pass: correct", "result": "126", "result_hash": "fff4641b1a116066cb82fdd336e3af77", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Tiago Pasqualini'": {"evaluation": "pass: correct", "result": "2", "result_hash": "7c93d02a40ebc670ae8becd4afb910e0", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T2.DisplayName FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Id = 6347": {"evaluation": "pass: correct", "result": "George Dontas", "result_hash": "e4b20ec63fbc31ac1b76b35e491fe771", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(Id) FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE Title LIKE '%data visualization%')": {"evaluation": "pass: correct", "result": "83", "result_hash": "48045a0b5689fc4a07f31954bc348424", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'DatEpicCoderGuyWhoPrograms'": {"evaluation": "pass: correct", "result": "Autobiographer", "result_hash": "8792207c67e700e8e5fc726bfde5d4c4", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT CAST((SELECT COUNT(Id) FROM posts AS T1 WHERE OwnerUserId = 24) AS REAL) / (SELECT COUNT(Id) FROM votes AS T1 WHERE UserId = 24)": {"evaluation": "pass: incorrect", "result": "0.375", "result_hash": "e11684852ae9474c889366b2ca21a451", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'": {"evaluation": "pass: correct", "result": "60", "result_hash": "d8f3de5632bcad6665cd0256b434d668", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT postHistory.Text FROM comments as T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Score = 17": {"evaluation": "error: <error>", "result": "Execution error: no such column: postHistory.Text", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT Id FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'": {"evaluation": "pass: incorrect", "result": "10135\n10594\n12170\n13304\n2\n2570\n3\n330\n37433\n39990\n44568\n44939\n45877\n7837\n8378", "result_hash": "6a261f9e5217fa2558aa09c2d8d8afa2", "num_rows": 15}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT b.Name FROM badges AS b INNER JOIN users AS u ON b.UserId = u.Id WHERE u.DisplayName = 'SilentGhost'": {"evaluation": "pass: correct", "result": "Cleanup\nEditor\nFamous Question\nFavorite Question\nGood Question\nNice Question\nNotable Question\nPopular Question\nStudent\nSupporter\nTaxonomist", "result_hash": "0617a13f216efbf2c083840e9d3d467e", "num_rows": 11}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'thank you user93!'": {"evaluation": "pass: correct", "result": "Preets", "result_hash": "a24550578aeea84e8a91f0012e81ecb2", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT * FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'A Lion'": {"evaluation": "pass: incorrect", "result": "13\t20\t2\tWhat levels of kurtosis and skewdness are acceptable to meet the assumption of normality?\t2010-07-19 19:38:01.0\t24\tNone\t24\t344\t2010-07-19 19:09:32.0\tA Lion\t2011-12-06 04:21:56.0\tNone\tNone\tNone\t48\t36\t1\t85249\tNone\tNone\n15\t3\t2\tMaybe the focus shouldn't be on \"valuable\" but rather \"pros\" and \"cons\" of each project?\t2010-07-19 19:44:47.0\t24\tNone\t24\t344\t2010-07-19 19:09:32.0\tA Lion\t2011-12-06 04:21:56.0\tNone\tNone\tNone\t48\t36\t1\t85249\tNone\tNone\n183\t10\t2\t@drknexus - So, multiple items serve as a measurement triangulation for construct scales?  If yes, what are the criteria for determining that a researcher has enough relevant data points (i.e., items) to use the scale as an interval measurement?\t2010-07-20 15:06:18.0\t24\tNone\t24\t344\t2010-07-19 19:09:32.0\tA Lion\t2011-12-06 04:21:56.0\tNone\tNone\tNone\t48\t36\t1\t85249\tNone\tNone\n291\t348\t0\tThe way I wrote it up, specifically with the bayesian not knowing much about cat reproduction, at the beginning only the frequentist would bet on there being kittens.  The relevant points of my *very crude example* were mostly that the frequentist made his prediction based on the data at the beginning, then sat back without incorporating new supplementary data, while the bayesian didn't have much data to begin with, but continued to incorporate relevant data as it become available.\t2010-07-21 16:09:12.0\t24\tNone\t24\t344\t2010-07-19 19:09:32.0\tA Lion\t2011-12-06 04:21:56.0\tNone\tNone\tNone\t48\t36\t1\t85249\tNone\tNone", "result_hash": "4f0ff964185b91a50da643a4401338f3", "num_rows": 4}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT users.Reputation FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Understanding what Dassault iSight is doing?'": {"evaluation": "error: <error>", "result": "Execution error: no such column: users.Reputation", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT * FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE Title = 'How does gentle boosting differ from AdaBoost?' )": {"evaluation": "pass: incorrect", "result": "193\t321\t0\tWhat other variants?  It might be helpful to tighten up this question a little (more specificity).\t2010-07-20 16:03:59.0\t5\tNone\n209\t321\t0\tRight; it is just one variant among others.\t2010-07-20 17:11:25.0\t88\tNone\n217\t321\t0\tOK, I'll ask for comparison to adaboost since that is perhaps the best known.\t2010-07-20 19:24:06.0\t220\tNone\n2942\t321\t0\t@kwak: Could you please delete your comment and post it as an answer so it can be accepted?\t2010-09-08 14:18:02.0\t220\tNone", "result_hash": "ed61eb0c37530379d0694b66202ddc52", "num_rows": 4}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT Id FROM badges WHERE Name = 'Necromancer' LIMIT 10": {"evaluation": "pass: incorrect", "result": "2611\n3018\n3049\n3097\n3111\n3222\n3614\n3702\n4780\n4801", "result_hash": "002bd23154ebe1fc0ea6c4b37fd53c09", "num_rows": 10}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T3.DisplayName FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T2.UserId = T3.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data' ORDER BY T2.CreationDate DESC LIMIT 1": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T1.Title FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T3.DisplayName = 'Vebjorn Ljosa'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.LastEditorUserId", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT SUM(T2.Score), T1.WebsiteUrl FROM users AS T1 INNER JOIN posts AS T2 ON T2.LastEditorUserId = T1.Id WHERE T1.DisplayName = 'Yevgeny'": {"evaluation": "pass: correct", "result": "34\thttp://www.cquotient.com", "result_hash": "2f52773067f9f6655fcba0fcd2d2c9a6", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId INNER JOIN postHistory AS T3 ON T1.Id = T3.PostId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?' AND T3.PostHistoryTypeId = 1": {"evaluation": "pass: incorrect", "result": "*\"the absolute-value method will be smaller\"*, actually, it'll be bigger for small variances - it'll always be closer to 1 though (unless it is 1 or 0)\n+1 @whuber: Thanks for pointing this out, which was bothering me as well.  Now, though, have to go and read up on the Central Limit Theorem!  Oh well. ;-)\nDespite the antiquity of this question, I've posted a new answer, which says something that I think is worth knowing about.\nDo you think the term standard means this is THE standard today ? Isn't it like asking why principal component are \"principal\" and not secondary ?\nEvery answer offered so far is circular. They focus on ease of mathematical calculations (which is nice but by no means fundamental) or on properties of the Gaussian (Normal) distribution and OLS. Around 1800 Gauss *started* with least squares and variance and from those *derived* the Normal distribution--there's the circularity. A truly fundamental reason that has not been invoked in any answer yet is the *unique* role played by the variance in the [Central Limit Theorem](http://stats.stackexchange.com/questions/3734). Another is the importance in decision theory of minimizing quadratic loss.\nIn a way, the measurement you proposed is widely used in case of error (model quality) analysis -- then it is called MAE, \"mean absolute error\".\nIn accepting an answer it seems important to me that we pay attention to whether the answer is circular.  The normal distribution is based on these measurements of variance from squared error terms, but that isn't in and of itself a justification for using (X-M)^2 over |X-M|.\nMy understanding of this question is that it could be shorter just be something like: what is the difference between the MAE and the RMSE ? otherwise it is difficult to deal with.\nRelated question: http://stats.stackexchange.com/q/354/919 (\"Bias towards natural numbers in the case of least squares.\")\nSee http://www.graphpad.com/curvefit/linear_regression.htm See Minimizing sum-of-squares section\nThis following article has the pictorial & easy-to-understand explanation. [http://www.mathsisfun.com/data/standard-deviation.html](http://www.mathsisfun.com/data/standard-deviation.html) Thanks,\nRajesh.", "result_hash": "c0ee30a1112c40291f7549569dceeb00", "num_rows": 11}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT SUM(T1.BountyAmount) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title LIKE '%about data%'": {"evaluation": "pass: incorrect", "result": "None", "result_hash": "378dd0ad02a5c6549ef615f96ac265eb", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT DISTINCT T2.DisplayName \nFROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id INNER JOIN posts AS T3 ON T1.PostId = T3.Id \nWHERE T3.Title LIKE '%variance%' AND T1.BountyAmount = 50": {"evaluation": "pass: incorrect", "result": "chl\nshabbychef", "result_hash": "2356a763472e09c15a3b4999827058bd", "num_rows": 2}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT AVG(T3.ViewCount), T1.Title, T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId INNER JOIN tags AS T3 ON T1.Id = T3.ExcerptPostId WHERE T3.TagName = 'humor'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.ViewCount", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(T2.Id) FROM comments AS T1 INNER JOIN users AS T2 ON T2.Id = T1.UserId WHERE T2.Id = 13": {"evaluation": "pass: correct", "result": "25", "result_hash": "c01c75eeec614d28b11506046466dc1e", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT MAX(Reputation) FROM users": {"evaluation": "pass: incorrect", "result": "87393", "result_hash": "dc39b53e5e22e3390219d5124c2ae2ed", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT id FROM users ORDER BY Views ASC LIMIT 1": {"evaluation": "pass: incorrect", "result": "-1", "result_hash": "9b9b3979f5f1958c8f53fc27659c39e2", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(DISTINCT T3.UserId) FROM badges AS T1 INNER JOIN Users AS T2 ON T1.UserId = T2.Id WHERE T1.Date >= '2011-01-01' AND T1.Date <= '2011-12-31' AND T1.Name = 'Supporter'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.UserId", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(T3.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id INNER JOIN comments AS T3 ON T2.Id = T3.UserId": {"evaluation": "pass: incorrect", "result": "15898615", "result_hash": "34b219fb10b595b2a42c2ccf11e50e00", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name IN ('Teacher', 'Supporter') AND T1.Location = 'New York'": {"evaluation": "pass: correct", "result": "9", "result_hash": "e2ca9b4a69bde08ad25f198b51916859", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T1.OwnerUserId, T2.Reputation FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id = 1": {"evaluation": "pass: correct", "result": "8\t6764", "result_hash": "439472b71949d109e1e12a563ac5b778", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT DISTINCT T1.Id AS Userid FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.OwnerUserId = T3.Id INNER JOIN postHistory AS T4 ON T2.Id = T4.PostId WHERE T3.Views >= 1000 AND T2.ViewCount = 1 AND T1.PostId = T4.PostId": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T1.DisplayName, T3.Name FROM users AS T1 \nJOIN comments AS T2 ON T1.Id = T2.UserId \nJOIN badges AS T3 ON T1.Id = T3.UserId GROUP BY T2.UserId ORDER BY COUNT(T2.Id) DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "whuber\tAltruist", "result_hash": "765fd89cc79e01c9c30ed4da3a673853", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(*) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'India' AND T1.Name = 'Teacher'": {"evaluation": "pass: correct", "result": "18", "result_hash": "6c0ca1c11f193c6ba9ef0daa1c494f1e", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT CAST((SELECT COUNT(Name) FROM badges WHERE Name = 'Student' AND Year(Date) = 2010 - (SELECT COUNT(Name) FROM badges WHERE Name = 'Student' AND Year(Date) = 2011) / (SELECT COUNT(Name) FROM badges WHERE Name = 'Student')) * 100)": {"evaluation": "error: <error>", "result": "Execution error: near \")\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT pc.PHID, COUNT(DISTINCT c.Id) FROM postHistory AS PH JOIN comments AS c ON PH.PostId = c.PostId WHERE PH.PostId = 3720 GROUP BY pc.PHID": {"evaluation": "error: <error>", "result": "Execution error: no such column: pc.PHID", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT p.*, pl.RelatedPostId, pl.PostId FROM posts AS p INNER JOIN postLinks AS pl ON p.Id = pl.PostId WHERE pl.RelatedPostId = 61217": {"evaluation": "pass: incorrect", "result": "61514\t1\tNone\t2013-06-12 03:45:30.0\t1\t183\t<p>I have 30 features in my self-collected dataset where I want to build a regression model. When I look at my data, most of the attributes (95% of the data points) are skewed on a very small range. Out of 30 features, only 2 features has sort-of normal distribution and other features are ranged within a majority range. Here is a graph of the distribution of some of the attributes:</p>\n\n<p><img src=\"http://i.stack.imgur.com/MPVGG.png\" alt=\"Distribution\"></p>\n\n<p>My question is: is it safe/normal to work with such data? Or should I treat the 5% of the data as outliers and remove them, so that the rest of the 95% will have a normal-like distribution?</p>\n\n<p>Intuitively, since majority of the attributes have very similar values, I am afraid that they won't have a distinguishing effect in the prediction. But I might be wrong, so I would like to ask here.</p>\n\t26774\t2013-07-13 10:12:40.0\tSkewed data for regression analysis\t<regression><machine-learning><data-mining>\t3\t6\tNone\t21054\t2013-06-12 09:07:03.0\tNone\tNone\tNone\tNone\tNone\t61217\t61514\n62524\t1\t62534\t2013-06-25 08:39:21.0\t5\t586\t<p>I'm interested in predicting <code>Y</code> and am studying different two measurement techniques <code>X1</code> and <code>X2</code>. It could be for instance that I want to predict the tastiness of a banana, either by measuring how long it has been lying on the table, or by measuring the number of brown spots on the banana.</p>\n\n<p>I want to know which one of the measuring techniques is better, should I choose to perform only one.</p>\n\n<p>I can create a linear model in R:</p>\n\n<pre><code>m1 = lm(Y ~ X1)\nm2 = lm(Y ~ X2)\n</code></pre>\n\n<p>Now let's say <code>X1</code> is a superior predictor of banana tastiness than <code>X2</code>. When calculating the $R^2$ of the two models, the $R^2$ of model <code>m1</code> is clearly higher than model <code>m2</code>. Before writing a paper on how method <code>X1</code> is better than <code>X2</code>, I want to have some sort of indication that the difference is not by chance, possibly in the form of a p-value.</p>\n\n<p>How would one go about this? How to do it when I'm using different brands of bananas and move to a Linear Mixed Effect model that incoporates banana brand as a random effect?</p>\n\t11956\t2013-06-25 15:17:00.0\tLinear model: comparing predictive power of two different measurement methods\t<regression><linear-model><mixed-effect>\t3\t3\t2\t21054\t2013-06-25 08:42:20.0\tNone\tNone\tNone\tNone\tNone\t61217\t62524", "result_hash": "fa941c68729af51e9b90ee698cbf9486", "num_rows": 6}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T1.Score, T2.LinkTypeId FROM posts AS T1 LEFT JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 395": {"evaluation": "pass: correct", "result": "4\t1", "result_hash": "af8d0661737703c102edc8a57e965d6c", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT p.Id AS PostId, p.OwnerUserId FROM posts p WHERE p.Score > 60": {"evaluation": "pass: incorrect", "result": "11659\t199\n11669\t919\n118\t83\n121\t61\n125\t5\n12745\t686\n1280\t553\n13314\t1106\n13317\t919\n1333\t521\n1337\t521\n1346\t287\n138\t142\n1388\tNone\n1423\t749\n14356\t5836\n1444\t159\n1576\t776\n1595\t890\n1632\t251\n16921\t1005\n16961\t30\n17148\t919\n18200\t919\n20523\t4278\n20856\t7290\n22\t66\n2217\t5\n2272\t71\n2287\t1122\n23117\t4426\n23130\t2970\n23814\t401\n2492\t795\n2498\t1124\n2501\t25\n25672\t1118\n25813\t29\n26088\t52\n26300\t10543\n2641\t386\n26450\t364\n2691\t851\n2700\t29\n2910\t930\n3035\t253\n30909\t7290\n31\t13\n3191\t930\n33780\t11634\n33781\t7290\n3814\t8\n3954\t88\n423\t5\n424\t88\n425\t13\n432\t8\n435\t88\n4551\t364\n4567\t1679\n47771\t3305\n47782\t8373\n5\t23\n5026\t2199\n5117\t1118\n5135\t2091\n5138\t1390\n51753\t805\n5581\t1670\n577\t196\n6\t5\n607\t30\n656\t25\n694\t74\n7\t38\n7224\t21466\n726\t223\n727\t223\n729\t159\n730\t159\n739\tNone\n744\t319\n753\t127\n767\t447\n7747\t3488\n7815\t3026\n7933\t919\n8225\t3376\n8230\t2116\n83136\t37729\n83162\t37741\n83262\t5836\n86015\t37418\n86016\t35917\n86017\t39797\n9254\t442", "result_hash": "21710ac08ccaac4cd9705662fe3c9fc6", "num_rows": 96}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT SUM(T2.FavoriteCount) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Id = 686 AND SUBSTR(T2.CreationDate, 1, 4) = '2011'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.CreationDate", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT CAST(SUM(T4.UpVotes) AS REAL) / COUNT(T2.Id), CAST(SUM(T5.Age) AS REAL) / COUNT(T5.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id INNER JOIN posts AS T3 ON T2.Id = T3.OwnerUserId AND T3.PostTypeId = 2 INNER JOIN tags AS T4 ON T3.Id = T4.ExcerptPostId INNER JOIN users AS T5 ON T5.Id = T2.Id WHERE T3.Id IN (SELECT Id FROM posts GROUP BY OwnerUserId HAVING Count(*) > 10)": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.UpVotes", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(*) FROM badges WHERE name = 'Announcer'": {"evaluation": "pass: correct", "result": "207", "result_hash": "acd653aa37339142389573e21a87c951", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT t2.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Date >= '2010-07-19 19:39:08'": {"evaluation": "error: <error>", "result": "Execution error: no such column: t2.Name", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(PostId) FROM comments WHERE Score > 60": {"evaluation": "pass: correct", "result": "1", "result_hash": "40f1fb91cd3bfacd97c83113575324a9", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T2.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:25:47.0'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.Text", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(T1.Id) FROM posts AS T1 WHERE T1.Score = 10": {"evaluation": "pass: correct", "result": "741", "result_hash": "5098b24f195e88adf39a555ea11c1367", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T3.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId ORDER BY T1.Reputation DESC LIMIT 1 INNER JOIN badges AS T3 ON T1.Id = T3.UserId ORDER BY T1.Reputation DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: near \"INNER\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T1.Reputation FROM badges AS T2 INNER JOIN users AS T1 ON T2.UserId = T1.Id WHERE T2.Date = '2010-07-19 19:39:08.0'": {"evaluation": "pass: correct", "result": "101\n128\n211\n308\n321\n344\n402\n457\n530\n614\n817", "result_hash": "cb73c76430837e7e213e6a11bfdbdec4", "num_rows": 11}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T1.Name FROM users AS T2 INNER JOIN badges AS T1 ON T2.Id = T1.UserId WHERE T2.DisplayName = 'Pierre'": {"evaluation": "pass: correct", "result": "Autobiographer\nEditor\nStudent\nSupporter\nTeacher", "result_hash": "422de3775b1bc15acefab65b55337e8b", "num_rows": 5}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT Date FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'Rochester, NY'": {"evaluation": "pass: correct", "result": "2010-09-13 17:16:24.0\n2010-09-15 08:26:00.0\n2010-09-23 13:28:22.0\n2011-01-15 15:01:19.0\n2011-01-15 19:56:20.0\n2011-01-16 10:26:24.0\n2011-02-01 15:02:28.0\n2011-04-16 17:41:11.0\n2011-05-07 15:07:29.0\n2011-05-07 19:47:30.0\n2011-05-09 17:52:47.0\n2011-07-15 19:27:50.0\n2011-07-18 00:25:12.0\n2011-07-20 01:17:13.0\n2011-07-22 17:40:38.0\n2011-10-16 02:27:36.0\n2011-12-14 17:06:05.0\n2012-02-03 18:37:22.0\n2012-03-01 13:33:09.0\n2012-09-20 14:17:42.0\n2013-04-16 13:47:00.0\n2013-05-28 16:58:56.0\n2013-07-25 16:43:16.0\n2013-08-26 10:10:00.0\n2013-08-28 14:48:46.0\n2014-07-14 23:47:45.0\n2014-07-15 06:27:05.0\n2014-07-15 13:52:53.0\n2014-07-15 18:39:30.0\n2014-07-31 21:06:45.0\n2014-08-20 17:58:39.0\n2014-08-21 23:26:10.0\n2014-08-27 02:56:52.0\n2014-08-27 04:08:32.0", "result_hash": "0982da2afb77b9890b5b0dba6f75e6fc", "num_rows": 34}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T1.Name = 'Teacher' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id": {"evaluation": "pass: incorrect", "result": "5.860", "result_hash": "57e8f88ebabb3b2d021cf2dfc5f88b39", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT CAST(COUNT(CASE WHEN T4.Name = 'Organizer' THEN T1.Id ELSE NULL END) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId INNER JOIN postHistory AS T3 ON T1.Id = T3.UserId INNER JOIN tags AS T4 ON T1.id IS NOT NULL LEFT JOIN postHistory AS T5 ON  T1.Id = T5.UserId WHERE T1.Age BETWEEN 13 AND 18": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.Name", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T2.Score FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE SUBSTR(T1.CreationDate, 1, 10) = '2010-07-19'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.CreationDate", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T3.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId INNER JOIN postHistory AS T3 ON T1.Id = T3.PostId WHERE T3.CreationDate = '2010-07-19 19:37:33.0'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T2.UserId = T1.Id WHERE T1.Location = 'Vienna, Austria'": {"evaluation": "pass: correct", "result": "22\n23\n28\n29\n33\n34\n35\n36\n40\nNone", "result_hash": "ffec0163fa47e01c522a1b5f9196605d", "num_rows": 10}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(DISTINCT T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Supporter' AND T1.Age BETWEEN 19 AND 65": {"evaluation": "pass: correct", "result": "3024", "result_hash": "288506c759326c12f6b6738f53718eec", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T2.Views, COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Date = '2010-07-19 19:39:08.0'": {"evaluation": "pass: incorrect", "result": "178\t13", "result_hash": "0fe0d75fa9118ba9c44e323eb19cbad2", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT DISTINCT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Reputation = (SELECT MIN(Reputation) FROM users)": {"evaluation": "pass: correct", "result": "Analytical\nAnnouncer\nAutobiographer\nCitizen Patrol\nCleanup\nCommentator\nCurious\nCustodian\nDisciplined\nEditor\nEnthusiast\nGood Answer\nGood Question\nInformed\nInvestor\nNecromancer\nNice Answer\nNice Question\nNotable Question\nOrganizer\nPeer Pressure\nPopular Question\nPrecognitive\nPromoter\nQuorum\nRevival\nScholar\nStudent\nSupporter\nTeacher\nTumbleweed\nYearling", "result_hash": "4470edfaf76b519935b673529b782796", "num_rows": 32}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Sharpie'": {"evaluation": "pass: correct", "result": "Autobiographer\nBeta\nCommentator\nCritic\nEditor\nExcavator\nFamous Question\nFavorite Question\nGood Answer\nGood Question\nNice Answer\nNice Question\nNotable Question\nOrganizer\nPopular Question\nQuorum\nStudent\nSupporter\nTaxonomist\nTeacher\nYearling", "result_hash": "f33eb4d0265c4c10689438b6535e84a6", "num_rows": 21}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(t1.Id) FROM badges AS t1 INNER JOIN users AS t2 ON t1.UserId = t2.Id WHERE t2.Age > 65 AND t1.Name = 'Supporter'": {"evaluation": "pass: correct", "result": "37", "result_hash": "08bf132b722854b0250976979d07018c", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT DisplayName FROM users WHERE Id = 30": {"evaluation": "pass: correct", "result": "gappy", "result_hash": "07e01edbf0196d241fdc3ce7f5f9c963", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(Id) FROM users WHERE Location = 'New York, NY'": {"evaluation": "pass: incorrect", "result": "116", "result_hash": "95ee8f08b1bf5c6e6c0eba6c56ade9ba", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(VoteTypeId) FROM votes WHERE STRFTIME('%Y', CreationDate) = '2010'": {"evaluation": "pass: correct", "result": "22056", "result_hash": "094123d9ac7be2f0a22a7596c8913ebf", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65": {"evaluation": "pass: correct", "result": "8168", "result_hash": "9c7c566249a4b17499d255d4cb30fd08", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users)": {"evaluation": "pass: incorrect", "result": "whuber", "result_hash": "c818fe982fcea4c19be320b36071e5fe", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT AVG((strftime('%Y', CreationDate) = '2010') + 0.0) / (strftime('%Y', CreationDate) = '2011' + 0.0) FROM votes": {"evaluation": "pass: incorrect", "result": "None", "result_hash": "378dd0ad02a5c6549ef615f96ac265eb", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT t1.TagName FROM tags AS t1 INNER JOIN posts AS t2 ON t1.ExcerptPostId = t2.Id INNER JOIN postHistory AS t3 ON t2.Id = t3.PostId INNER JOIN users AS t4 ON t3.UserId = t4.Id WHERE t4.DisplayName = 'John Salvatier'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(Id) FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Daniel Vassallo'": {"evaluation": "error: <error>", "result": "Execution error: ambiguous column name: Id", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(VoteTypeId) FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harlan'": {"evaluation": "pass: incorrect", "result": "2", "result_hash": "7c93d02a40ebc670ae8becd4afb910e0", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT MIN(T2.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'slashnick' GROUP BY T2.Id ORDER BY MAX(T2.AnswerCount) DESC LIMIT 1": {"evaluation": "pass: correct", "result": "351", "result_hash": "95c9cf1dc228474cf76707f723094636", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT SUM(CASE WHEN T2.DisplayName = 'Harvey Motulsky' THEN T1.ViewCount ELSE 0 END) AS Harvey, SUM(CASE WHEN T2.DisplayName = 'Noah Snyder' THEN T1.ViewCount ELSE 0 END) AS Noah FROM posts AS T1 INNER JOIN users AS T2 ON T2.Id = T1.OwnerUserId": {"evaluation": "pass: incorrect", "result": "23065\t0", "result_hash": "4d05be773c2df5eb6bd2607696066a90", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(T2.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T2.OwnerUserId = T1.Id WHERE T1.DisplayName = 'Matt Parker' AND T2.Id IN ( SELECT T3.PostId FROM votes AS T3 GROUP BY T3.PostId HAVING COUNT(T3.PostId) > 4 )": {"evaluation": "pass: incorrect", "result": "11", "result_hash": "567055e8f8934c26aa9d56d5a34b091a", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(T3.Id) FROM Users AS T1 INNER JOIN posts AS T2 ON T2.OwnerUserId = T1.Id INNER JOIN comments AS T3 ON T3.PostId = T2.Id WHERE T1.DisplayName = 'Neil McGuigan' AND T3.Score < 60": {"evaluation": "pass: correct", "result": "136", "result_hash": "515adc0948f7e4851069b2924c382d36", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T1.tagName FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title LIKE '%Mark Meckes%' AND T3.CommentCount = 0": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.CommentCount", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT DISTINCT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Organizer'": {"evaluation": "pass: correct", "result": "404Dreamer_ML\nA Lion\nACD\nAaron\nAdam Bailey\nAdamO\nAffine\nAkavall\nAksakal\nAlecos Papadopoulos\nAlex\nAlexander\nAlexis\nAlpha\nAndre Silva\nAndreaZ\nAndrew\nAndy\nAndy W\nAniko\nAnony-Mousse\nAntoine Vernet\nArgha\nArtem Kaznatcheev\nArthur Small\nAssad Ebrahim\nAtilla Ozgur\nAvraham\nAzeem\nBCLC\nBGreene\nBaltimark\nBehacad\nBen Bolker\nBernd Weiss\nBill\nBill the Lizard\nBitwise\nBlankUsername\nBogdanovist\nBossykena\nBrandon Bertelsen\nBrett Magill\nBrett Wolfington\nBrian Diggs\nC. Ross\nCOOLSerdash\nCam.Davidson.Pilon\nCharlie\nChase\nCheatboy2\nChris Ferrie\nChristopher Aden\nChristopher Brown\nChuNan\nComp_Warrior\nCorone\nCsislander\nCurious\nDWin\nDaniel Johnson\nDaniel Vassallo\nDason\nDavid\nDavid J. Harris\nDavid Marx\nDavid Robinson\nDavide Giraudo\nDeathkill14\nDeer Hunter\nDennis Jaheruddin\nDerek Ploor\nDimitriy V. Masterov\nDmitrij Celov\nDuke of Lizards\nEDi\nEd Dean\nEduardo\nElvis\nEmre\nEnKei\nEric Peterson\nErik\nEtiennebr\nEvgeniy\nExclusive92\nFXQuantTrader\nFabian Steeg\nFeral Oink\nFinal Litiu\nFirefeather\nFlounderer\nFomite\nFr.\nFranck Dernoncourt\nFrank Harrell\nFreya Harrison\nGaBorgulya\nGala\nGavin Simpson\nGilbert\nGilles\nGlen_b\nGordimer\nGraeme Walsh\nGreg Snow\nGregor\nGryphoenix\nGschneider\nHFBrowning\nHar\nHarlan\nHarvey Motulsky\nHenrik\nHenry\nHibernating\nHong Ooi\nHorst Grünbusch\nIterator\nJMS\nJaap\nJack Tanner\nJake Westfall\nJames Stanley\nJason Punyon\nJeff\nJeremy Heiler\nJeremy Miles\nJeromy Anglim\nJoel Reyes Noche\nJohn\nJohn \nJohn Colby\nJohn Doucette\nJohn L. Taylor\nJohnK\nJohnRos\nJonathan\nJonathan Christensen\nJonathan Thiele\nJoris Meys\nJosh Hemann\nKarl\nKarl Ove Hufthammer\nKen\nKen Williams\nKiudee\nKyle Brandt\nKyle.\nLadislav Nado\nLeo\nLost in transcription\nM. Tibbits\nMaarten Buis\nMacro\nMannyG\nManoel Galdino\nMarc Claesen\nMarc in the box\nMark T Patterson\nMartin O'Leary\nMatt Krause\nMatt Parker\nMattBagg\nMatthew Plourde\nMax\nMax Gordon\nMeadowlark Bradsher\nMehper C. Palavuzlar\nMemming\nMerovingian\nMetrics\nMichael Bishop\nMichael Chernick\nMichael McGowan\nMichelle\nMiguel de Cervantes\nMike John\nMike T\nMike Wierzbicki\nMikkel N. Schmidt\nMing-Chih Kao\nMomo\nMånsT\nNaN\nNabla\nNameless\nNathaniel Payne\nNeil G\nNick Cox\nNick Sabbe\nNick Stauner\nNicolas Kaiser\nOwe Jessen\nPatrick Coulombe\nPatrick McCann\nPatrick S. Forscher\nPaul Hiemstra\nPenguin_Knight\nPeter Ellis\nPeter Flom\nPeter Mortensen\nPeter Smit\nQuantIbex\nQuartz\nQueops\nRaffael\nRalph Winters\nRam Sharma\nRandel\nRasmus Bååth\nRet\nRich\nRichard D\nRioRaider\nRob Hyndman\nRobert Long\nRockScience\nRoland\nRoman Luštrik\nRossXV\nSRJ\nSam Roberts\nScortchi\nSeb\nSeth Rogers\nShane\nSharpie\nSheldonCooper\nSimon Byrne\nSimon Hayward\nSrishti M\nStasK\nStat\nStat-R\nStephan Kolassa\nSteve\nSteve S\nStuart\nStéphane Laurent\nSuresh Venkatasubramanian\nSven Hohenstein\nTal Galili\nTeco\nTharindu Rusira\nTheta30\nThomas Levine\nThylacoleo\nTooTone\nTristan\nTumbledown\nTwitch_City\nV.C.\nVara\nWaldir Leoncio\nWaterman\nWayne\nWolfgang\nWolv\nXi'an\nZach\nZen\nZhubarb\nadunaic\namoeba\namphibient\nanxoestevez\natiretoo\natrichornis\nb70568b5\nbartektartanus\nbayerj\nbeginneR\nbjou\nboscovich\nbrotchie\ncaracal\ncardinal\ncbeleites\ncharles\ncharles.y.zheng\nchl\nclyfe\nconjugateprior\ncsgillespie\ncurious_cat\ndardisco\ndav\ndeps_stats\ndjhurio\ndmckee\ndwstu\nentropy\neqperes\nezbentley\nfabians\nfeetwet\nfg nu\nfgregg\nfileunderwater\nfmark\nforecaster\nfredrikhs\ngisol\ngjabel\ngov\ngpoo\ngregmacfarlane\ngrokus\nguest\ngui11aume\ngung\niliasfl\njbowman\njilles de wit\njokel\njona\njonsca\njsk\njthetzel\njuampa\nkamaci\nkaybenleroll\nkjetil b halvorsen\nkousu\nkrlmlr\nlandroni\nlejlot\nlennon310\nleonbloy\nlmjohns3\nlmsasu\nmarshall\nmbq\nmemilanuk\nmicans\nmmyers\nmpiktas\nmrgloom\nmugen\nnadya\nnaught101\nniandra82\nnico\nnon-numeric_argument\nnsw\nnzcoops\nocram\nonestop\npavid\nphilchalmers\npneumatics\nradek\nrandom_user\nrcs\nredraiders10\nrichiemorrisroe\nrobin girard\nrocinante\nrolando2\nrpierce\nsashkello\nsenshin\nshabbychef\nsjm.majewski\nslhck\nsmci\nsmillig\nssdecontrol\nstackovergio\nsteadyfish\nsteffen\nsubhash c. davar\nsuncoolsu\ntdc\nthias\ntony\ntree\nttnphns\nuser023472\nuser12202013\nuser163\nuser22410\nuser2779\nuser41593\nuser42615\nuser44903\nuser45086\nuser45843\nuser45913\nuser568458\nuser603\nuser695652\nuser777\nusεr11852\nvasili111\nvinux\nwalkytalky\nwcairns\nwcampbell\nwhuber\nwolf.rauch\nxan\nzbicyclist\nziyuang\nŁukasz Lew\nＪ. Ｍ.", "result_hash": "85d4b58879d4ef43d93b279eb097a671", "num_rows": 407}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T1.Tags LIKE '%<r><%>' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.Id) * 100 FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Id = T2.ExcerptPostId  WHERE T1.OwnerDisplayName = 'Community'": {"evaluation": "pass: incorrect", "result": "None", "result_hash": "378dd0ad02a5c6549ef615f96ac265eb", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT SUM(CASE WHEN posts.OwnerDisplayName = 'Mornington' THEN posts.ViewCount ELSE 0 END) - SUM(CASE WHEN posts.OwnerDisplayName = 'Amos' THEN posts.ViewCount ELSE 0 END) AS calculation FROM posts": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(users.Id) \nFROM badges \nINNER JOIN users ON badges.UserId = users.Id \nWHERE badges.Name = 'Commentator' AND DATE(YEAR(badges.Date)) = 2014": {"evaluation": "error: <error>", "result": "Execution error: no such function: YEAR", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(*) FROM posts WHERE strftime('%Y-%m-%d', CreationDate) = '2010-07-21'": {"evaluation": "error: <error>", "result": "Execution error: no such column: CreationDate", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T1.DisplayName, T1.Age FROM users AS T1 WHERE T1.Views = ( SELECT MAX(Views) FROM users )": {"evaluation": "pass: correct", "result": "whuber\t14", "result_hash": "d39452d5a8f18d8be89458a5febad468", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T2.LastEditDate, T2.LastEditorUserId FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Detecting a given face in a database of facial images' ORDER BY T2.CreationDate DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.LastEditDate", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(*) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score < 60 AND T1.UserId = 13": {"evaluation": "pass: correct", "result": "25", "result_hash": "c01c75eeec614d28b11506046466dc1e", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T2.Title, T3.UserDisplayName AS Commenter, T3.UserDisplayName AS OwnerUl, T2.OwnerDisplayName FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T2.UserId = T3.Id WHERE T2.Score > 60": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.Title", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'the North Pole' AND strftime('%Y', T1.Date) = '2011'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T4.DisplayName, T4.WebsiteUrl FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T2.UserId = T3.Id INNER JOIN users AS T4 ON T4.Id = T1.OwnerUserId WHERE T1.FavoriteCount > 150": {"evaluation": "pass: correct", "result": "Fabian Fagerholm\thttp://www.cs.helsinki.fi/fabian.fagerholm/\nclaws\tNone", "result_hash": "330915268a5e222b640597193bdab65e", "num_rows": 2}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(*), T2.LastEditDate FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T2.PostHistoryTypeId = 1 AND T1.Title = 'What is the best introductory Bayesian statistics textbook?' GROUP BY T2.LastEditDate": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.LastEditDate", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT LASTAccessDate, Location FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Outliers' ORDER BY users.LastAccessDate DESC LIMIT 1": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T2.Title \nFROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId \nINNER JOIN posts AS T3 ON T2.RelatedPostId = T3.Id \nWHERE T3.Title = 'How to tell if something happened in a data set which monitors a value over time'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.Title", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T2.Id, T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Samuel' AND STRFTIME('%Y', T1.Date) = '2013'": {"evaluation": "pass: incorrect", "result": "25428\tCustodian\n25428\tEditor\n25428\tStudent\n25428\tSupporter\n32181\tStudent", "result_hash": "3fc57e32b498f1d5ece7fdf061d767c0", "num_rows": 5}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T1.OwnerDisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T1.ViewCount DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "None", "result_hash": "378dd0ad02a5c6549ef615f96ac265eb", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T3.DisplayName, T3.Location FROM posts AS T1 INNER JOIN tags AS T2 ON T2.ExcerptPostId = T1.Id WHERE T2.TagName = 'hypothesis-testing' INNER JOIN users AS T3 ON T1.OwnerUserId = T3.Id": {"evaluation": "error: <error>", "result": "Execution error: near \"INNER\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T1.Title, T3.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId INNER JOIN postLinks AS T3 ON T2.RelatedPostId = T3.PostId WHERE T1.Title = 'What are principal component scores?'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT DISTINCT T2.OwnerDisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.ParentId IS NOT NULL": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.OwnerDisplayName", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T4.DisplayName, T4.WebsiteUrl FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id INNER JOIN votes AS T3 ON T2.Id = T3.UserId INNER JOIN users AS T4 ON T3.Id = T4.Id WHERE T1.VoteTypeId = 8 AND T1.BountyAmount = ( SELECT MAX(BountyAmount) FROM votes )": {"evaluation": "pass: incorrect", "result": "Dimitri B\tNone\nJan Brewington\tNone\nMax M.\tNone", "result_hash": "c851697a2923cdb6f8c35ee0ca663b18", "num_rows": 3}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5": {"evaluation": "pass: correct", "result": "How do I get the number of rows of a data.frame in R?\nHow to choose between Pearson and Spearman correlation?\nHow to interpret F- and p-value in ANOVA?\nHow to interpret and report  eta squared / partial eta squared in statistically significant and non-significant analyses?\nWhat is the meaning of p values and t values in statistical tests?", "result_hash": "e207e73550f4c7907f94e47044340a2c", "num_rows": 5}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(T2.TagName) FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Id = T2.ExcerptPostId WHERE T2.Count BETWEEN 5000 AND 7000": {"evaluation": "pass: correct", "result": "1", "result_hash": "40f1fb91cd3bfacd97c83113575324a9", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T2.OwnerUserId FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T1.FavoriteCount DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.OwnerUserId", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T2.Age FROM users AS T1 INNER JOIN badges AS T2 ON T2.UserId = T1.Id ORDER BY T1.Reputation DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.Age", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE YEAR(T1.CreationDate) = 2011 AND T2.BountyAmount = 50": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.CreationDate", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT Id FROM users WHERE Age = ( SELECT MIN(Age) FROM users )": {"evaluation": "pass: correct", "result": "805", "result_hash": "44576c663634447a298643d4f58b6a90", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT SUM(Score) FROM posts WHERE LasActivityDate LIKE '2010-07-19%'": {"evaluation": "pass: correct", "result": "899", "result_hash": "892e3efdeea6494ac3ddb4f7f023094f", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN strftime('%Y', CreationDate) = '2010' THEN 1 ELSE 0 END) AS REAL) / 12 AS calculation FROM postLinks WHERE PostId IN ( SELECT Id FROM posts WHERE YEAR(CreationDate) = 2010 AND AnswerCount <= 2 GROUP BY Id )": {"evaluation": "error: <error>", "result": "Execution error: no such function: YEAR", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T1.Id FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 1465 ORDER BY T2.FavoriteCount DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "11796", "result_hash": "c6e0fb0b38f90bf0e21e04464280ab05", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate ASC LIMIT 1": {"evaluation": "pass: incorrect", "result": "How to tell if something happened in a data set which monitors a value over time", "result_hash": "86d868f220f552963ad7d4b406d6fe57", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT U.DisplayName FROM users AS U INNER JOIN badges AS B ON U.Id = B.UserId ORDER BY COUNT(B.Name) DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: misuse of aggregate: COUNT()", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT MIN(T1.CreationDate) FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'chl'": {"evaluation": "pass: correct", "result": "2010-08-13", "result_hash": "329c0e45d37cf312563a745cc08fa4e5", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT MIN(T2.CreationDate) FROM Users AS T1 INNER JOIN Posts AS T2 ON T1.Id = T2.OwnerUserId ORDER BY T1.Age ASC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.CreationDate", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Autobiographer' ORDER BY T1.Date ASC LIMIT 1": {"evaluation": "pass: correct", "result": "Geoff Dalgas", "result_hash": "b0ccc77b74039053db268ef2d450d65d", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(T3.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id INNER JOIN comments AS T3 ON T1.Id = T3.PostId WHERE T2.Location = 'United Kingdom' AND T1.Id IN ( SELECT T4.PostId FROM posts AS T4 WHERE T4.FavoriteCount >= 4 GROUP BY T4.PostId HAVING SUM(T4.FavoriteCount) >= 4 )": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.PostId", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT CAST(SUM(T1.PostId) AS REAL) / COUNT(DISTINCT T2.Id) FROM votes T1 INNER JOIN users T2 ON T1.UserId = T2.Id WHERE T2.Age = (SELECT MAX(Age) FROM users)": {"evaluation": "pass: correct", "result": "170.000", "result_hash": "cb1130a3fa0f326f7ce9c16f8a7e1d68", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT DisplayName FROM users WHERE Id = ( SELECT UserId FROM badges WHERE Name = 'Teacher' LIMIT 1 )": {"evaluation": "pass: incorrect", "result": "Shane", "result_hash": "ae832e78071f549eb99d77f585f9b700", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(T1.Id) FROM users AS T1 WHERE T1.Reputation > 2000 AND T1.Views > 1000": {"evaluation": "pass: correct", "result": "44", "result_hash": "b11f1ffaaecc930138c4890ad61ea919", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT DISTINCT DisplayName FROM users WHERE Location NOT LIKE '% NY' AND Age BETWEEN 19 AND 65": {"evaluation": "pass: incorrect", "result": "0605002\n0xc0de\n40two\nA.J.\nARUL\nAaron Kurtzhals\nAbhilash\nAbhishek Gupta\nAdam Bailey\nAdam Liter\nAditya Singh\nAgent1891\nAhmed M. Farrag\nAjmal M Sali\nAlBahnsen\nAlastair\nAlec\nAlex Buckles\nAlex Ott\nAlex V\nAlexander Farber\nAlexandre\nAli\nAlin Draghia\nAllendar\nAmbarish Hazarnis\nAmit Kumar Gupta\nAmy Glen\nAnastasios Ventouris\nAndrea Spadaccini\nAndrei V\nAndrew Aylett\nAndrew Flowers\nAndrew Mao\nAndrey Adamovich\nAndré Laszlo\nAndyN\nAnkit\nAnnamalai N\nAnthony Gatlin\nAnton K\nAnurag Priyadarshi\nArcheg\nArlen\nArt Taylor\nArthur Ward\nArunDhaJ\nAshish Ranjan\nAshwin Balamohan\nAtif Abdul-Rahman\nAustin\nAwokeKnowing\nBGreene\nBaltimark\nBarry Wark\nBas Bossink\nBell Mans\nBen Farmer\nBen Parsons\nBenjamin\nBerZ Jackson\nBertrand R\nBiagio Chirico\nBishan\nBlam\nBob Jansen\nBogdan Verbenets\nBorn2BeMild\nBrad Rhoads\nBranson\nBrennan\nBrian Brown\nBrian Paden\nBrooke\nBryce Cutt\nC. Pieters\nCL.\nCaleb\nCanadian Luke\nCarl Morris\nCarlos Said\nCarson Myers\nCedric H.\nChad Keck\nChansik Im\nCharlie Epps\nChib\nChords\nChris Burt-Brown\nChris K\nChris Wilson\nChristian Bueno\nChristian Wilkie\nChristopher DuBois\nCiaanh\nClint\nCollin Estes\nCorentin S.\nCosu\nCrazyIITian\nCristol.GdM\nCurt\nDAC\nDL10x\nDabblernl\nDamien Roche\nDan Carew\nDan Hook\nDanS\nDaniel Excinsky\nDaniel Moskovich\nDaniel Wessel\nDanny D'Amours\nDarwy\nDave DuPlantis\nDaveH\nDavid Chouinard\nDavid Kilimanjaro\nDavid Nehme\nDavid W\nDawid\nDeepak Tiwari\nDenis\nDev\nDez\nDiego\nDimitar Vouldjeff\nDinl\nDivinenephron\nDmitry Bychenko\nDon Reba\nDoresoom\nDoust\nDragonwalker\nDror Atariah\nDustin Tran\nEOL\nEdd Turner\nEduardo León\nEhsan Abd\nEldar Agalarov\nElijah Wright\nEmilie\nEng.Fouad\nEponymous\nEric Green\nErick Robertson\nErolgo\nEthan Post\nEvgeny Benediktov\nF.X.\nFabio F.\nFan Fei Chong\nFbrufino\nFelix Dombek\nFigaro\nFlappy Bird\nFolkert van Heusden\nFran\nFrank\nFrederik\nFu86\nGShenanigan\nGabriel\nGansu\nGaurav Kumar\nGeoff\nGeorge Redinger\nGerard de Ruig\nGianluca\nGivi\nGolo Roden\nGraDea\nGreg Snow\nGriGrim\nGrzenio\nGuillochon\nGustav Delius\nHadas\nHam\nHans Westerbeek\nHarrison Powers\nHas Nickname\nHatef\nHeidar\nHenry Helgen\nHigherAbstraction\nHoffmann\nHotloo Xiranood\nHuseyin\nINElutTabile\nIan Howson\nIdo Tamir\nIhor Kaharlichenko\nImAlsoGreg\nInoryy\nIsaac Moses\nIvan Cherevko\nIvanhoe123\nJ. Winchester\nJDong\nJRMGarcia\nJack Ryan\nJacques Tardie\nJakub Czaplicki\nJames Heneghan\nJames Webster\nJan Hlavacek\nJarrod Nettles\nJason Huntley\nJasper van den Bosch\nJay Haase\nJean-Baptiste Camps\nJeff Bradberry\nJeff Strunk\nJeffrey04\nJens\nJeremy_Miller\nJiang Xiang\nJim Rubenstein\nJishnu Ray\nJoe\nJoe W\nJoel Rondeau\nJohannes\nJohn Hoover\nJohn Moeller\nJohn Wickerson\nJohnJohnGa\nJoje\nJon McAuliffe\nJonas Elfström\nJonathan Gleason\nJonhnny Weslley\nJordan Foreman\nJoris Bierkens\nJoseph Szymborski\nJoshAdel\nJosiah\nJoão Melo\nJuan Carlos Coto\nJulian\nJulio Diaz\nJuri\nJustinJDavies\nKahWee Teng\nKamal Hothi\nKarol S\nKatti\nKeith G\nKen Gee\nKermit\nKevin McMahon\nKilo\nKiran K.\nKitchi\nKoba\nKonstantin Tenzin\nKrishna Aradhi\nKumar Vaibhav\nKyle\nKylin Yi\nL_D\nLance Pollard\nLars D\nLavaboom\nLegend\nLeonardo Situmorang\nLester Peabody\nLiamGu\nLisa\nLost1\nLucent\nLukas Vermeer\nLèse majesté\nM.Rez\nMSalters\nMadhavanRP\nMahesh Velaga\nMalc\nMankarse\nManuel\nMarcel\nMarco Mariani\nMarek\nMariano Suárez-Alvarez\nMark Davidson\nMark Mikofski\nMarkus Schepke\nMartin Duys\nMartin P. Holt\nMarvin Ward Jr\nMatchu\nMathias Lykkegaard Lorenzen\nMatt Ball\nMatt Mizumi\nMatteo Italia\nMatthew Rathbone\nMatthias Valvekens\nMaurice Reeves\nMax David\nMaxim Kornienko\nMaza89\nMeisenBar\nMert Nuhoglu\nMichael Alexander\nMichael Greinecker\nMichael Narinsky\nMichaelT\nMickMack\nMihai Limbășan\nMike Boers\nMike Keller\nMike T\nMikeyB\nMilky ways patterns\nMisha Gale\nMohamed Kamal\nMohammad Gharehyazie\nMojo\nMoron\nMostafa Shahverdy\nMrSmith42\nMukesh Chapagain\nMyHeadHurts\nNG_21\nNageswara Rao\nNarthring\nNathan Farrington\nNavid Farhadi\nNeil\nNestorghh\nNicholas McCarthy\nNick Clark\nNick Haslam\nNicky\nNiederee\nNikita Barsukov\nNirone Rome\nNoah Watkins\nNoldorin\nNya\nOctavio\nOlaf Dietsche\nOliver G\nOmer Gertel\nOri Folger\nOvidiu Latcu\nPIM Geek\nPaddy\nPaperjam\nPat Keough\nPatrick Li\nPaul D. Waite\nPaul M\nPaul Tyng\nPavel Belousov\nPedro Cattori\nPeter\nPeter L.\nPeter Ritchie\nPetr Misan\nPhil MacCavity\nPhilipp Burckhardt\nPhradion\nPiers Myers\nPiperoman\nPrakash Gautam\nPratik Poddar\nPridkett\nPunam Sapkota\nQF_Developer\nQuestion Overflow\nRMuzy\nRadek\nRaffael\nRahul\nRajib Singh\nRamesh\nRandomDownVoteVictim\nRasmus Faber\nRe Captcha\nReid\nRené Nyffenegger\nRichard\nRichard Le Mesurier\nRick Hoving\nRishee\nRob Di Marco\nRobV\nRobert Roos\nRobson\nRohit\nRoman Kagan\nRorick\nRudolf Vavruch\nRussell Troywest\nRyan Muller\nRyanmt\nSPN\nSaeed Hashemi\nSake\nSam Brightman\nSamarth\nSandro Munda\nSarah  \nSatoshi Miyazawa\nSayak Kolay\nScott Morrison\nSeamus\nSean Lynch\nSebastian Raschka\nSeldom\nSergio Tulentsev\nSeverinka\nShannon Wagner\nShelwien\nShisoft\nShrey\nSiegeX\nSimon Dugré\nSimon O'Hanlon\nSkiminok\nSmi\nSnow Blind\nSonOfTheEARTh\nSpaceghost\nSri Ten\nStan\nSte\nStefan Seemayer\nStennie\nStephen Cox\nSteve Horn\nSteven Jeuris\nStipe Galić\nStrikeR\nStéphane Bruckert\nSun Liwen\nSusanne Oberhauser\nSylvain Defresne\nT Srinivasa Chaitanya\nTR_\nTambet\nTatVic\nTendayi Mawushe\nTharlinn\nThe SpaceApache\nTheMentor\nTheolodis\nThierry Silbermann\nThomas Hunter\nThomas W-B\nThéo T\nTim Dumol\nTim S. Van Haren\nTimtico\nToenex\nTom H\nTomato\nTonven\nTormod \nTreyA\nTronicZomB\nTuradg\nTyler\nUmber Ferrule\nUnwisdom\nVP.\nValko Sipuli\nVarna\nVeky\nVictor\nViennaMike\nVinayak Pathak\nVinod Dalvi\nVitomir Kovanovic\nVlad Firoiu\nVyga\nWR10\nWaqar Hameed\nWebMonster\nWes Sayeed\nWildfire\nWilli\nWinston Chen\nXGreen\nXiangxiang Xu\nXyzodiac\nYann Sagon\nYehoshaphat Schellekens\nYin Zhang\nYuan Gao\nZJR\nZane Beckwith\nZev Chonoles\nZloy Smiertniy\nZuzanna Kowalska\naagaard\nabhinavvv\nactivescott\nadiego73\nagarie\naioobe\nakira\naldo\nalexmuller\nali\nalnesbit\namarillion\namirouche\nanand\nandybega\nantonio irpino\narathorn\nartuhfakt\naseem\naso118\natomicules\navik_pram\nbalpha\nbarkmadley\nbdargan\nbenvds\nbigbadonk420\nbinkyhorse\nblue and grey\nbob\nbquast\nbrotchie\nburgersmoke\nc69\ncampeterson\ncbrandolino\nceretullis\nchase\nchhh\nchrisbunney\nchucknelson\nckarras\ncmjohns\ncodypo\ncornelb\ncrftr\nctwardy\nd0ct0r\ndagorym\ndaniellopez46\ndaroczig\ndavebowker\ndcalacci\ndeemeetree\nderigel\ndieend\ndisinter\ndmcnelis\ndonshikin\ndperetin\ndrfrogsplat\ndumbledad\neamo\necounysis\negor-k8n\neldo\nelriba\nerandac\nerrno.h\neulerfx\nf3lix\nfede1024\nfinitud\nfloodfreQuer\nfrancesco stablum\nfuriadhaval\ngabrielpbzr\ngct\ngeraldgreen\ngjvdkamp\ngotgenes\ngrinnbearit\nguru\nhakank\nhatter\nhelios\nhiba hussein\nhmmmm\nhpduy17\nhwlau\niamstelios\niantrich\nidober\nilia choly\nimport this\niouraich\nitzy\nizb\njagguli\njaranda\njbaums\njchevali\njdmichal\njeremyjjbrown\njibounet\njjnguy\njm3\njnns\njogloran\njohny\njorpppp\njparcede\njruizaranguren\njuanthologist\njustgrimes\nkairavichahal\nkatahdin\nkepler\nkiamlaluno\nkkaosninja\nkobrien\nkostja\nkrike\nkunal\nladiesMan217\nleemachin\nletsgoduke\nlindes\nllasram\nlovekesh\nlukas.pukenis\nm3rLinEz\nmalkhor\nmarabutt\nmarkbruns\nmarshall.ward\nmasteusz\nmatt b\nmaxTC\nmbq\nmech\nmellamokb\nmetasj\nmga\nmiguelmalvarez\nmiles82\nmisza222\nmkk\nmmocny\nmoose\nmpiktas\nmsp\nmusically_ut\nnKandel\nnathan hayfield\nndsmyter\nnevero\nnickflees\nnikeee\nninjaproger\nnograpes\nnuclearsandwich\nobvio171\noggmonster\noluies\noob\nothercriteria\npQB\npanos\npatrickmdnet\npconcepcion\nperegrine\nphantom.omaga\nphs\npkvprakash\npna\npoulter7\nprikha\npsjinx\npuri\nqegal\nr00fus\nrainbowgoblin\nrandomforests\nrbrito\nren\nrishiehari\nrmaehara\nrobertsy\nrodrigorgs\nrosh\nrsman\nrusvdw\ns093294\nsalt.racer\nsanmiguel\nsblom\nscs217\nsebschub\nserengeti12\nsfuj\nshellenberg\nshoelzer\nsieste\nsinhnhn\nskeryl\nslf\nsnakile\nsoulmachine\nsravan kamidi\nssobczak\nsteve_ash\nstimpy77\nsudipto\nsurban\nt.pimentel\ntayf\ntentaclenorm\ntheWanderer4865\nthekidder\nthetitan\nthomasfedb\ntimgluz\ntmm1\ntomaszsobczak\ntosonb1\ntrembl\ntroyaner\ntxwikinger\numesh acharya\nuser1275515\nuser25287\nuser29975\nuser3559655\nuser45367\nuser6367\nutdiscant\nvanja\nvertoe\nvishnu\nvonjd\nwagin\nwannymahoots\nwelowkey\nwhile\nwipeout\nwoodlumhoodlum\nxboard\nxhochy\nyangyang\nyashgarg1232\nymihere\nyuji\nzbicyclist\nzengr\nzneak\nzwerdlds\nŁukaszBachman", "result_hash": "df4b13685420605aca0c24e26b219a5d", "num_rows": 6799}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Jay Stevens' AND STRFTIME('%Y', T2.CreationDate) = '2010'": {"evaluation": "error: <error>", "result": "Execution error: ambiguous column name: Id", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T1.Id, T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky' ORDER BY T1.ViewCount DESC LIMIT 1": {"evaluation": "pass: correct", "result": "109\tPower of Holm's multiple comparison testing compared to others", "result_hash": "369b8765dbec06569ee1164c066dcbb5", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT Id, Title FROM posts WHERE Score = (SELECT MAX(Score) FROM posts)": {"evaluation": "pass: incorrect", "result": "1595\tPython as a statistics workbench", "result_hash": "4ae65890cf92f221933db84e0d0255a6", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT CAST(SUM(T2.Score) AS REAL) / COUNT(T2.Score) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Stephen Turner'": {"evaluation": "pass: correct", "result": "10.414", "result_hash": "36c0c0f5bd4faaaabc21f41c593866cb", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.OwnerUserId = T3.Id WHERE T3.DisplayName IS NOT NULL AND T2.ViewCount > 20000 AND YEAR(T2.CreationDate) = 2011": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.CreationDate", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T1.Id, T1.OwnerDisplayName FROM Posts AS T1 INNER JOIN Users AS T2 ON T1.OwnerUserId = T2.Id WHERE strftime('%Y', T1.CreationDate) = '2010' ORDER BY T1.FavoriteCount DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.CreationDate", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T3.Reputation > 1000 AND STRFTIME('%Y', T1.CreationDate) = '2011' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.Reputation", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T1.age BETWEEN 13 AND 18 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Id) FROM users AS T1": {"evaluation": "pass: correct", "result": "0.156", "result_hash": "62e6ed9db76d452b009327d536be99ca", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT posts.ViewCount, users.DisplayName FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Body LIKE '%Computer Game Datasets%' ORDER BY posts.CreationDate DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: posts.CreationDate", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT SUM(CASE WHEN T2.ViewCount > ( SELECT AVG(ViewCount) FROM posts ) THEN 1 ELSE 0 END) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.ViewCount", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(T3.Id) FROM posts AS T1 INNER JOIN Comments AS T2 ON T1.Id = T2.PostId INNER JOIN postHistory AS T3 ON T1.Id = T3.PostId WHERE T1.Score = ( SELECT MAX(Score) FROM posts )": {"evaluation": "pass: incorrect", "result": "27", "result_hash": "f6840c550a89a6af824c67e6acb56a4e", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount > 35000 AND T2.CommentCount = 0": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.CommentCount", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T3.DisplayName, T3.Location FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T2.UserId = T3.Id WHERE T1.Id = 183 ORDER BY T2.LastEditDate DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.LastEditDate", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT name FROM badges WHERE user_id IN ( SELECT id FROM users WHERE displayname = 'Emmett' ) AND date = ( SELECT MAX(date) FROM badges )": {"evaluation": "error: <error>", "result": "Execution error: no such column: user_id", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000": {"evaluation": "pass: correct", "result": "2", "result_hash": "7c93d02a40ebc670ae8becd4afb910e0", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT DATEDIFF(CreationDate, (  SELECT MIN(Date) FROM badges WHERE Name IN ((SELECT Name FROM badges WHERE UserDisplayName = 'Zolomon'))) FROM badges WHERE UserDisplayName = 'Zolomon'": {"evaluation": "error: <error>", "result": "Execution error: near \"FROM\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(T1.PostId), COUNT(T3.PostId) \nFROM comments AS T3 INNER JOIN posts AS T1 ON T3.PostId = T1.Id INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T2.CreationDate DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.PostId", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT UTC(T4.Comment, T4.UserDisplayName) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T2.UserId = T3.Id INNER JOIN ( SELECT PostId, MAX(CreationDate) AS CreationDate FROM comments GROUP BY PostId ) AS T4 ON T2.Postid = T4.PostId AND T2.CreationDate = T4.CreationDate WHERE T1.Title = 'Analysing wind data with R'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.Comment", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Citizen Patrol'": {"evaluation": "pass: correct", "result": "656", "result_hash": "70b044a57ae8d5815bc2579fd877eaea", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(T2.Id) FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id WHERE T1.TagName = 'careers'": {"evaluation": "pass: correct", "result": "1", "result_hash": "40f1fb91cd3bfacd97c83113575324a9", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T1.Reputation, T1.Views FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Jarrod Dixon'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(T1.Id) FROM posts AS T2 INNER JOIN comments AS T3 ON T2.Id = T3.PostId INNER JOIN users AS T4 ON T3.UserId = T4.Id WHERE T3.ParentId = T2.Id INNER JOIN badges AS T5 ON T4.Id = T5.UserId WHERE T5.Name IN ('reviewer', 'strunker') INTERSECT SELECT COUNT(T1.Id) FROM posts AS T2 INNER JOIN comments AS T3 ON T2.Id = T3.PostId INNER JOIN users AS T4 ON T3.UserId = T4.Id WHERE T3.Text LIKE '%Clustering 1D data%' INTERSECT SELECT COUNT(T1.Id) FROM posts AS T2 INNER JOIN tags AS T3 ON T2.Id = T3.ExcerptPostId.T1>)": {"evaluation": "error: <error>", "result": "Execution error: near \"INNER\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T2.CreationDate FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'IrishStat'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.CreationDate", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.BountyAmount >= 30": {"evaluation": "pass: correct", "result": "87", "result_hash": "06a65a006bdfcf28bfd073fd78587abf", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT CAST((COUNT(CASE WHEN P.Score > 50 THEN 1 END) * 100.0) / COUNT(Q.Id)) / ((SELECT COUNT(DISTINCT Id) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users)) OR 1) AS decimal FROM posts P JOIN users U ON P.OwnerUserId = U.Id JOIN badges B ON U.Id = B.UserId WHERE B.Id IN (SELECT UserId FROM badges GROUP BY UserId HAVING COUNT(*) = (SELECT MAX(COUNT()) FROM badges GROUP BY UserId))": {"evaluation": "error: <error>", "result": "Execution error: near \")\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(T1.Id) FROM posts AS T1 WHERE T1.Score < 20": {"evaluation": "pass: correct", "result": "90977", "result_hash": "4df401412ec778a8162f4dfc8d8280d9", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(T2.Id) FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id WHERE T2.Id < 15 AND T1.Count <= 20": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT WikiPostId, ExcerptPostId FROM tags WHERE TagName = 'sample'": {"evaluation": "pass: incorrect", "result": "28275\t28276", "result_hash": "b4d030d7e8509348ba91d23b800c1c73", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T1.Reputation, T1.UpVotes FROM users AS T1 INNER JOIN comments AS T2 ON T2.UserId = T1.Id WHERE T2.Text = 'fine, you win :)'": {"evaluation": "pass: correct", "result": "2316\t74", "result_hash": "627501ef37a9c2d66b97a754dab4979f", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T1.Text \nFROM comments AS T1 \nJOIN posts AS T2 ON T1.PostId = T2.Id \nWHERE T2.Title LIKE '%linear regression%'": {"evaluation": "pass: correct", "result": "\"*I am told both regression coefficients cannot exceed 1.*\" -- don't believe everything you're told. Were they perhaps talking about standardized coefficients?\n@AdamO I have included the whole Monte Carlo experiment I have used. But more importantly I found a mistake in my assumptions (see the answer).\n@Glen_b Since the correlation coefficient is not 1, there are values which are not showing direct relationship. Is there a way to figure out such values.\n@NickCox the first two questions in the body of the post -- \"*How can I diagnose the normality assumption about time? Should I need to perform a linear regression to measure the dependency of time on age and karno?*\" seem completely on topic to me. They're not directly questions about syntax but about statistical issues.\n@Zen What is so strange?  The OP meant the sample means.  The are expected values for the empiricla distribution.  I would not have chosen that notation but I didn't want to go about changing that too.\n@mp You're right; I should have more carefully stated that $Y_i - \\\\mathbf{X}_i\\\\beta$ are iid.\n@whuber Maybe I'm rusty on this, but isn't there a single standard error of estimate that applies to all data points, and thus a single width for all points' prediction intervals at a given confidence level?  CodeNoob seems to want or need intervals of different widths for different points, which I don't think is possible.\nAdditionally, you can look at the code behind `effect` to se how they are calculated.\nAre you referring to the intercept of your model being nonzero?\nCLRM: curiously labelled rebarbative model? You shouldn't assume your own private abbreviations are universal, so please explain. Whatever model you are talking about, there won't be a single command that will \"correct\" violations of assumptions.\nCould you please provide context, details, and an explanation of what you mean by \"diverging\" and \"significantly different\" regression models?\nFair enough.  I probably will learn to do this in R first and then figure out how to translate that into python.  I did find this R tutorial which seems to cover what I want: http://www.gardenersown.co.uk/Education/Lectures/R/regression.htm\nHi, can you show us the scatterplot of your two velocity variables?\nI am referring to the first part of his answer. I believe the reference to $R^2$ is there only because he was trying to get clarification of your original question: with your edits, it is evident that $R^2$ is not relevant (and may even give results you find to be erroneous.)  You are asking about the *size* and amount of *trend* and that is measured by the slope term: it's that simple.\nI guess my question is the follows, if my null hypothesis is that a particular beta is zero. How do I do it? Do I have to figure out the marginal distribution of that beta from the joint normal distribution?\nI think this Q is on-topic, then. Is there any specific model diagnostic you are interested in? Are you just interested in a lack of fit test, or what all of the diagnostics that should be standard are?\nI'm including a burn in because I don't want my answer to depend on the initialization of the AR(1) process. I've used fairly big sets of simulations (> 10000), and the bias can be around 0.1 if the sample size is small (N = 20). The bias progressively disappears as N increases.\nIf you condense the information of seven points to a two-parameter function, it would be mere chance to end up with exactly the same values. I don't know if this already answers your question though.\nIs dose categorical or continuous?\nIt might help to give details of the \"linear regression.\"  Important aspects include whether you include a constant and how you encode the groups.  For your second question, investigate [power](http://stats.stackexchange.com/questions/tagged/power) related threads.\nLook into Box-Cox transformations, that should be at least a good start.\nNo. If I denote $y=X'\\\\beta+\\\\epsilon$, then for example if   $\\\\beta=0_p$ you have $y=\\\\epsilon$.\nOne thing people have found with such *errors-in-variables* regressions is that the ratio of variances (of the y errors to the x errors) determines whether you should care much about errors in the x variables. If I correctly understand the ellipses in your picture to represent the joint error distributions, then those ratios are very large--perhaps 15:1 or more--indicating you could just as well apply ordinary least squares to your data.\nRegarding degrees of freedom, look at [this CV Q&A](http://stats.stackexchange.com/questions/884/what-are-degrees-of-freedom) or [this nice explanation](http://www.jerrydallal.com/LHSP/dof.htm) referred to in one of the answers.\nSome very rough rules of thumb: you should investigate collinearity *before* you do any fitting. If you find it is present, you should either (a) use a method that handles collinearity, (b) remove collinear features, or (c) transform your features (eg using PCA). Once you have fitted a model, you can look for heteroscedasticity in the residuals. In general, if you are making a predictive model you should not remove outliers. Instead, use a method which is robust to the presence of outliers.\nThanks for editing it. Equation is correct by the way. I was expecting different answers. One answer would be If one fits a linear reg instead then predicted response might be <0 or >1 which is clearly nonsensical as a response probability. I want to know your understanding to this. Is there any other difference?\nThe **parameters to be estimated** are (multi-)linear. If you were *estimating* the values of the exponents, the estimation problem would not be linear; but squaring a predictor fixes that exponent at precisely 2.\nThe negatives are a result of the positive correlation between an observation and its fitted value, which reduces the variance of the difference.\nThey don't test the same thing at all. The regression could indicate how much more sensitive the paired t-test would be compared to an independent one but the coefficient can be substantial with absolutely no paired t-test effect (and vice versa).\nThis website is for questions of mathematical research. I don't see a research angle in your question.\nWell, logistic regression is used when the dependent variable is binary so, to use that, you'd need the game-level data, not the winning percentage (which is binary data averaged over the season). Unless the diagnostics really don't check out, I don't see any problem using linear regression where winning percentage is the dependent variable. If they don't, use logistic regression on the game-level data. Either way, the results should be pretty similar.\nWhat makes this a non linear model?\nWolfgang: I am aware of these points, but it never hurts to point them out anyway, as they are important! :) [also in case others who read this thread weren't aware]\nYou are right.  The band does cross into the negative territory.  However, I am not interested in the values of the bands themselves, but rather in the EC50 values corresponding to the band limits.  Is there an alternative to constructing the bands this way?\nYou should only have two dummy variables for the three shops.\ndollar signs make you enter an equation environment and is why things are randomly getting italicized.\nthank you - please see my edit above.", "result_hash": "febab7b8c196060e380ec5f0bfd22850", "num_rows": 1883}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT TEXT FROM comments WHERE Score = ( SELECT MAX(Score) FROM comments )": {"evaluation": "pass: incorrect", "result": "+1 for filtering out justin bieber", "result_hash": "031da203dcb9b7208eac46dfa594c8d8", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT DISTINCT T4.CreationDate, T1.Age FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId INNER JOIN postLinks AS T3 ON T2.Id = T3.PostId INNER JOIN posts AS T4 ON T3.RelatedPostId = T4.Id WHERE T2.Text LIKE '%http://%'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.CreationDate", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(T3.Id) \nFROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN votes AS T3 ON T2.Id = T3.PostId \nWHERE T1.Score = 0 AND T2.ViewCount < 5 AND T3.VoteTypeId = 2 AND T3.CreationDate IS NULL": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(*) FROM comments WHERE Score = 0 AND PostId IN ( SELECT Id FROM posts WHERE CommentCount = 1 )": {"evaluation": "pass: incorrect", "result": "10997", "result_hash": "9f53bd54653aa4e20f8d7341ced224e8", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN Users AS T2 ON T1.UserId = T2.Id WHERE T2.Age = 40 AND T1.Score = 0": {"evaluation": "pass: correct", "result": "1975", "result_hash": "6cc9447c6bf1a9949dadf29d08619337", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T1.Id, T2.Text \nFROM comments AS T2 \nINNER JOIN posts AS T1 \nON T2.PostId = T1.Id \nWHERE T1.Title = 'Group differences on a five point Likert item'": {"evaluation": "pass: correct", "result": "203\tA related question: People often use the nonparametric Mann-Whitney test for this kind of data. Since there are only five possible values, there will be lots of tied ranks. The Mann-Whitney test adjusts for tied ranks, but does this adjustment work when there are a huge number of ties?\n203\tYou may be interested in this recent article published in PARE, *Five-Point Likert Items: t test versus Mann-Whitney-Wilcoxon*, http://j.mp/biLWrA.", "result_hash": "b547e7f99db3e5d06a48021d45a2483f", "num_rows": 2}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'R is also lazy evaluated.'": {"evaluation": "pass: correct", "result": "4235", "result_hash": "f7738833567809648da2f02e8daf394f", "num_rows": 1}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT DISTINCT T1.Id, T1.PostId, T1.Score, T1.Text, T1.CreationDate, T1.UserId, T1.UserDisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky'": {"evaluation": "pass: incorrect", "result": "100735\t51472\t0\t@StasK: Thanks. I updated the answer accordingly.\t2013-03-06 15:27:22.0\t25\tNone\n10437\t6618\t0\tI edited my answer a bit to take into account the comments of Dikran and probabilityislogic. Thanks.\t2011-01-28 14:52:12.0\t25\tNone\n124965\t64710\t5\tNo one will be able to answer this without more detail. If you show the calculation that leads to the answer of 35%, we'll will be able to help you understand what that means.\t2013-07-18 14:19:45.0\t25\tNone\n126839\t65354\t0\tClever. Maybe this is enough, and avoids the need to explain likelihood calculations.... Thanks.\t2013-07-26 18:44:52.0\t25\tNone\n132090\t68328\t1\tAre you sure about dividing by the square root of n? I don't think that will be helpful here. What he wants is a SD to use (with the log(OR) as the mean) to simulate odd's ratios. I think the top part of your equation (without the division by sqrt[n]) answers that.\t2013-08-26 14:37:18.0\t25\tNone\n133679\t69188\t0\tHow are you defining \"correlates with\"? My guess is that you mean the corresponding P value is less than an arbitrary cutoff. As Peter said, this question really can't be answered without knowing what the variable are and the actual value of the correlation coefficients.\t2013-09-04 17:53:05.0\t25\tNone\n150749\t73312\t1\tIn fact, the results are not statistically significant. The P value with Fisher's exact test is 0.26, and 0.38 with a chi-square test (with Yate's correction).\t2013-11-20 01:21:11.0\t25\tNone\n164534\t83881\t0\tNow you switched from 85% confidence interval to 95%, which is more typical. You can be 95% confident that the range you computed includes the true population value. I say \"value\" which is vague, because your question is vague. Are you computing a confidence interval for a mean, a median, a proportion, a percent survival....?\t2014-01-30 16:55:59.0\t25\tNone\n167428\t85521\t0\tIf you use the GraphPad Prism demo, you can fit data to any model you want, and view the covariance matrix (an optional result chosen in the Diagnostics tab) and the confidence or prediction bands (as both numbers and a graph; also choose in Diagnostics tab). That isn't quite a good as a worked example, but at least you can compare the covariance matrix and see if the problem is before or after...\t2014-02-07 23:40:52.0\t25\tNone\n176363\t81552\t0\tI removed \"low\" from the title and first sentence of the box, for the reasons that @hibernating pointed out.\t2014-03-15 13:04:27.0\t25\tNone\n17819\t10380\t0\tIt seems to me that the SE values computed in the first paragraph must be the standard errors of the logarithm of the odds ratio, not the standard errors of the odds ratio itself.\t2011-05-06 13:35:47.0\t25\tNone\n193098\t99690\t2\tPlease improve the title of your question, so it will be meaningful to people who browse lists of questions here.\t2014-05-22 13:51:03.0\t25\tNone\n201391\t104201\t0\tYou use the variables \"p\" and \"p0\" to denote the response rates. To avoid the possibility that some people will see this as a P value, I'd suggest using a different variable name.\t2014-06-21 16:13:48.0\t25\tNone\n213064\t108868\t0\tNot 85/1618! That would be very misleading, implying that everyone who didn't send back the questionairre would have answered no.  85/217 is the fraction of those answering yes or no who answered yes. 85/220 is the fraction of those answering yes, no or don't-know who answered yes.\t2014-08-07 15:42:32.0\t25\tNone\n216553\t112675\t1\t@ChrisC Thanks. It is become more clear, but I still don't really grasp what this assumption means. The whole point of knowing about the assumption behind the method is to know when you are likely to be violating it. So it would help to list some scenarios where the assumption is not true. When would a lower P value not be associated with a higher probability of the null hypothesis being false?\t2014-08-23 14:19:50.0\t25\tNone\n220198\t114770\t1\tPeter: I agree. That is why I have always used \"Gaussian\". But a comment from a reviewer on the new (concise) edition, strongly pushed \"normal\".\t2014-09-09 00:58:23.0\t25\tNone\n22961\t12991\t0\t@anne. With linear regression with no constraints, R2 cannot be negative. I can't understand why the results you show include a negative R2. It might help to include your data file and screen captures of all the SPSS options, so that others (who know SPSS well) can figure out what happened.\t2011-07-18 14:25:40.0\t25\tNone\n27914\t15439\t0\t@Charlie. Thanks. I've added a sentence to our GraphPad Prism FAQ explaining that we use cov to mean the normalized covariance matrix (each value ranges from -1 to 1). I've also added a link to this page, which is great for anyone seeking mathematical details.\t2011-09-13 17:49:55.0\t25\tNone\n55201\t29158\t0\tWhy do I care? I don't! Why do I ask? One of our customers asked. Our program (GraphPad Prism), it turns out, uses the $p \\\\leq \\\\alpha$ rule, and I wondered how standard that was.\t2012-05-25 16:26:54.0\t25\tNone\n599\t673\t1\tI don't see any distinction.\t2010-07-26 21:39:17.0\t25\tNone\n64213\t32651\t3\tWait. Or rather Weight! Is the question about the number of each types of nuts in the bag (in which case the chi-square will do the job as Macro explains) or about the weights (as the original question seems to imply)?\t2012-07-19 21:54:46.0\t25\tNone\n7375\t4945\t5\tI think you'll get more useful help if you take a few steps back, and ask us what scientific question  you are trying to answer. Why are you looking for the smallest normalized SD?\t2010-11-26 16:42:55.0\t25\tNone\n86682\t32385\t0\tWith large samples, the sample variance will be quite close to the population variance, so the sample SD will be close to the population SD. With smaller samples, the sample variance will equal the population variance on average, but the discrepancies will be larger. If symmetrical as variances, they will be asymmetrical as SD. Example: Population variance is 100. Two sample variances are 80 or 120 (symmetrical). The sample SD ought to be 10, but will be 8.94 or 10.95. Average sample SDs from a symmetrical distribution around the population variance, and the mean SD will be low, with low N.\t2012-11-29 03:32:34.0\t25\tNone\n90307\t810\t0\tThanks Daren. I updated the link as you suggest.\t2012-12-23 06:12:27.0\t25\tNone", "result_hash": "be7f55258bf6ff33c18fd78ae5b86c8c", "num_rows": 118}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT T2.UserDisplayName AS UserDisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE Score BETWEEN 1 AND 5 AND T2.DownVotes = 0": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.UserDisplayName", "result_hash": "", "num_rows": 0}, "data/test_databases/codebase_community/codebase_community.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T2.UpVotes = 0 THEN 1 ELSE 0 END) AS REAL)/COUNT(T2.Id) * 100 FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 5 AND 10": {"evaluation": "pass: correct", "result": "1.325", "result_hash": "8ceeb467dc72b7e4b815ac7741b17d53", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'": {"evaluation": "pass: correct", "result": "Agility\nStamina\nSuper Speed\nSuper Strength", "result_hash": "fa844f49d1f6766b4953ea344f27ead3", "num_rows": 4}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT COUNT(T1.id) FROM superpower AS T2 INNER JOIN hero_power AS T3 ON T2.id = T3.power_id INNER JOIN superhero AS T1 ON T3.hero_id = T1.id WHERE T2.power_name = 'Super Strength'": {"evaluation": "pass: correct", "result": "358", "result_hash": "8d9791f5506af2182a92dbb24c60469d", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200": {"evaluation": "pass: correct", "result": "56", "result_hash": "029ea0378a7245a6cd1c58ed189b2f57", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name IN (SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15)": {"evaluation": "pass: incorrect", "result": "-\nAbraham Sapien\nAl Simmons\nAlexander J. Mercer\nAnakin Skywalker\nAnthony Edward Stark\nBarbara Ann Minerva\nBartholomew Allen II\nBizarro\nBruce Wayne\nClark Joseph Kent (Kal-El)\nCyberdyne Systems Series 1000 Terminator\nCyberdyne Systems Series 800 Terminator Model 101\nCyberdyne Systems Series 850 Terminator\nCyberdyne Systems Series X Terminator\nDaniel Thomas Rand-K'ai\nDiana of Themyscira\nDoomsday\nDr. Nathaniel Essex\nDru-Zod\nEdward Charles Allan Brock\nEn Sabah Nur\nErik Stephan Josten\nFaora Hu-Ul\nFranklin Benjamin Richards\nGwendolyne Stacy\nHenry Henshaw\nJ'onn J'onzz\nJac-jack Parr\nJames Howlett\nJames Rupert Rhodes\nJason Rusch\nJean Grey-Summers\nJonathan Osterman\nKakarot\nKal-El\nKara Zor-El\nKara Zor-L\nKent Nelson\nLaura Kinney\nLiam\nLuke Skywalker\nM'gann M'orzz\nMacDonald Gargan\nMari Jiwe McCabe\nMichael Jon Carter\nMortimer Toynbee\nMr. Mxyzptlk\nNathan Christopher Charles Summers Dayspring\nNathaniel Christopher Adam\nNorrin Radd\nOnslaught\nOrin\nPeter Benjamin Parker\nRaymond C. Terrill\nRichard John Grayson\nRichard Rider\nRobert Bruce Banner\nRobert Louis Drake\nRobert Reynolds\nStephen Vincent Strange\nThanos\nThor Odinson\nTodd Arliss\nUatu\nUxas\nVictor Creed\nWallace Rudolph West\nYautja\nYoda", "result_hash": "fc91b6abda66fa4a3c916049ecd54c07", "num_rows": 70}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT COUNT(id) FROM superhero WHERE eye_colour_id IN ( SELECT id FROM colour WHERE colour = 'Blue' )": {"evaluation": "pass: correct", "result": "234", "result_hash": "50db2d77452b81f54d4a431d898834ca", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'": {"evaluation": "pass: correct", "result": "Grey", "result_hash": "ba74e2c0b542c691ddb6c198144b9213", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT COUNT(T2.power_id) FROM colour AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.eye_colour_id INNER JOIN hero_power AS T3 ON T2.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T1.colour = 'Blue' AND T4.power_name = 'Agility'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.power_id", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' AND T1.hair_colour_id = (SELECT id FROM colour WHERE colour = 'Blond')": {"evaluation": "pass: correct", "result": "Adam Monroe\nAdam Strange\nAgent 13\nAlan Scott\nAngel\nAnimal Man\nAnt-Man\nAnt-Man II\nAnti-Venom\nAquababy\nAquaman\nArachne\nArchangel\nBatgirl VI\nBinary\nBlack Canary\nBlack Canary II\nBlack Widow II\nBoom-Boom\nBooster Gold\nBox III\nBullseye\nCannonball\nCaptain America\nCaptain Britain\nCaptain Mar-vell\nCaptain Marvel\nCat\nClaire Bennet\nCypher\nDagger\nDash\nDazzler\nDoctor Fate\nElle Bishop\nEmma Frost\nEnchantress\nFlash II\nFranklin Richards\nGenesis\nGreen Lantern\nHarley Quinn\nHavok\nHawkeye\nHuman Torch\nHusk\nInvisible Woman\nIron Fist\nJames Bond\nJames Bond (Craig)\nJennifer Kale\nJohn Constantine\nKick-Ass\nKiller Frost\nLongshot\nLuke Skywalker\nMagog\nMeltdown\nMister Zsasz\nMockingbird\nMoonstone\nMr Immortal\nMr Incredible\nNamora\nNamorita\nNiki Sanders\nOzymandias\nPenance II\nPower Girl\nPyro\nQuestion\nRip Hunter\nRonin\nSaturn Girl\nScarlet Spider\nSentry\nSpider-Gwen\nStar-Lord\nStargirl\nSupergirl\nThor\nThor Girl\nThunderstrike\nTrickster\nUltragirl\nValkyrie\nWarbird\nWhite Queen\nWonder Girl\nYellowjacket", "result_hash": "1ea379f79fa5ebc058216905ec6ab8c9", "num_rows": 90}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT COUNT(T2.id) FROM publisher AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.publisher_id WHERE T1.publisher_name = 'Marvel Comics'": {"evaluation": "pass: correct", "result": "387", "result_hash": "2c919b15a170875e798643df5a9761cc", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 3": {"evaluation": "pass: incorrect", "result": "Godzilla\nSurtur\nYmir", "result_hash": "4f6d1262dc0b4b8497afd11fbc300348", "num_rows": 3}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.publisher_name FROM publisher AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.publisher_id WHERE T2.superhero_name = 'Sauron'": {"evaluation": "pass: correct", "result": "J. R. R. Tolkien", "result_hash": "5dfa71fbd8038898a1c0061e2daaebcd", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT colour.colour, COUNT(T3.eye_colour_id) AS count FROM colour INNER JOIN superhero AS T3 ON T3.eye_colour_id = colour.id INNER JOIN publisher AS T4 ON T4.id = T3.publisher_id INNER JOIN hero_power AS T5 ON T3.id = T5.hero_id INNER JOIN superpower AS T6 ON T6.id = T5.power_id WHERE T4.publisher_name = 'Marvel Comics' GROUP BY T3.eye_colour_id ORDER BY COUNT(T3.eye_colour_id) DESC": {"evaluation": "pass: incorrect", "result": "Amber\t18\nBlack\t92\nBlue\t1019\nBlue/White\t10\nBrown\t584\nGold\t24\nGreen\t312\nGreen/Blue\t26\nGrey\t63\nHazel\t35\nNo Colour\t188\nPurple\t7\nRed\t328\nSilver\t9\nViolet\t4\nWhite\t128\nWhite/Red\t7\nYellow\t111\nYellow/Blue\t8", "result_hash": "281f8fcca16ba1c4210e6351e1fdfed7", "num_rows": 19}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT AVG(T2.height_cm) \nFROM publisher AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.publisher_id WHERE T1.publisher_name = 'Marvel Comics'": {"evaluation": "pass: correct", "result": "347.959", "result_hash": "34ae9f640c1fba6366266c6aa1565b0a", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T2.superhero_name FROM publisher AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.publisher_id INNER JOIN hero_power AS T3 ON T2.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T1.publisher_name = 'Marvel Comics' AND T4.power_name = 'Super Strength'": {"evaluation": "pass: correct", "result": "3-D Man\nA-Bomb\nAbomination\nAbraxas\nAbsorbing Man\nAgent Zero\nAir-Walker\nAjax\nAngel\nAngel Dust\nAnnihilus\nAnt-Man II\nAnti-Venom\nApocalypse\nArachne\nArchangel\nArclight\nArdina\nAres\nArmor\nAtlas\nBantam\nBattlestar\nBeast\nBeta Ray Bill\nBeyonder\nBinary\nBird-Man\nBishop\nBlack Bolt\nBlack Cat\nBlackout\nBlackwulf\nBlade\nBlob\nBloodaxe\nBloodwraith\nCable\nCallisto\nCaptain Britain\nCaptain Marvel\nCaptain Planet\nCarnage\nCat\nColossus\nCottonmouth\nCrimson Dynamo\nCrystal\nDeathlok\nDemogoblin\nDestroyer\nDoc Samson\nDoctor Doom\nDoctor Doom II\nDoctor Octopus\nDoppelganger\nDormammu\nDrax the Destroyer\nEgo\nEmma Frost\nEvilhawk\nFallen One II\nFeral\nFin Fang Foom\nFranklin Richards\nFrenzy\nFrigga\nGalactus\nGamora\nGhost Rider\nGhost Rider II\nGladiator\nGoliath IV\nGreen Goblin\nGreen Goblin II\nGreen Goblin III\nGreen Goblin IV\nGroot\nHela\nHellcat\nHercules\nHobgoblin\nHulk\nHusk\nHybrid\nHyperion\nIceman\nInk\nIron Fist\nIron Man\nIron Monger\nJack of Hearts\nJessica Jones\nJolt\nJuggernaut\nJunkpile\nKang\nKlaw\nKraven II\nKraven the Hunter\nLady Deathstrike\nLegion\nLiving Brain\nLiving Tribunal\nLizard\nLoki\nLuke Cage\nMach-IV\nMachine Man\nMagneto\nMagus\nMan-Thing\nMan-Wolf\nMedusa\nMephisto\nMimic\nMister Sinister\nMockingbird\nMolten Man\nMoon Knight\nMoonstone\nMorlun\nMs Marvel II\nMystique\nNamor\nNamora\nNamorita\nNebula\nNova\nOdin\nOne-Above-All\nOnslaught\nPlantman\nProto-Goblin\nPsylocke\nQuicksilver\nRed Hulk\nRhino\nSabretooth\nSandman\nSasquatch\nScarlet Spider\nScarlet Spider II\nScorpia\nScorpion\nSebastian Shaw\nSentry\nShatterstar\nShe-Hulk\nShe-Thing\nSif\nSilk\nSilver Surfer\nSilverclaw\nSkaar\nSnowbird\nSongbird\nSpider-Girl\nSpider-Gwen\nSpider-Man\nSpider-Woman\nSpider-Woman III\nSpider-Woman IV\nStardust\nSunspot\nSwarm\nThanos\nThing\nThor\nThor Girl\nThunderbird\nThunderstrike\nThundra\nTiger Shark\nTigra\nToad\nToxin\nTriton\nUltragirl\nUltron\nUtgard-Loki\nValkyrie\nVenom\nVenom II\nVenom III\nVenompool\nVision\nVulture\nWalrus\nWar Machine\nWarlock\nWarpath\nWasp\nWeapon XI\nWinter Soldier\nWolfsbane\nWolverine\nWonder Man\nX-23\nYmir", "result_hash": "ff305769300aa0008befcedeb6cbca7e", "num_rows": 200}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT COUNT(superhero.superhero_name) FROM publisher AS T1 INNER JOIN superhero AS T2 ON T2.publisher_id = T1.id WHERE T1.publisher_name = 'DC Comics'": {"evaluation": "error: <error>", "result": "Execution error: no such column: superhero.superhero_name", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T5.publisher_name FROM attribute AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.attribute_id INNER JOIN superhero AS T3 ON T2.hero_id = T3.id INNER JOIN publisher AS T4 ON T3.publisher_id = T4.id INNER JOIN superpower AS T5 ON T1.attribute_name = 'Speed' WHERE T2.attribute_value = ( SELECT MIN(attribute_value) FROM hero_attribute WHERE attribute_id = ( SELECT id FROM attribute WHERE attribute_name = 'Speed' ) )": {"evaluation": "error: <error>", "result": "Execution error: no such column: T5.publisher_name", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT COUNT(T4.eye_colour_id) FROM publisher AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.publisher_id INNER JOIN colour AS T3 ON T3.id = T2.eye_colour_id INNER JOIN race AS T4 ON T4.id = T2.race_id WHERE T1.publisher_name = 'Marvel Comics' AND T3.colour = 'Gold'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.eye_colour_id", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'": {"evaluation": "pass: correct", "result": "DC Comics", "result_hash": "1abe788aaab7cce2d24312e10e955f43", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT COUNT(T4.superhero_id) FROM colour AS T4 INNER JOIN superhero AS T2 ON T4.id = T2.hair_colour_id WHERE T4.colour = 'Blond'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.superhero_id", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T FROM ( SELECT T1.superhero_name, T1.full_name, MIN(T2.attribute_value) AS T FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' GROUP BY T1.id ) WHERE T = ( SELECT T1.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value ASC LIMIT 1 )": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.attribute_value", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T3.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T1.superhero_name = 'Copycat'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.race", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.id = 1 AND T1.id = T2.hero_id AND T3.attribute_value < 50": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.attribute_value", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T3.superhero_name FROM superpower AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.power_id INNER JOIN superhero AS T3 ON T2.hero_id = T3.id WHERE T1.power_name = 'Death Touch'": {"evaluation": "pass: correct", "result": "Black Flash\nBlackwulf\nHela\nLiving Tribunal\nOne-Above-All\nPoison Ivy\nSpectre", "result_hash": "a0ca8b6d1fa1be92e05deca8ffc2a287", "num_rows": 7}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT COUNT(T2.id) FROM attribute AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.attribute_id INNER JOIN superhero AS T3 ON T2.hero_id = T3.id INNER JOIN gender AS T4 ON T3.gender_id = T4.id WHERE T3.gender_id = 2 AND T1.attribute_name = 'Strength' AND T2.attribute_value = 100": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.id", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T6.superhero_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.hero_id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id INNER JOIN colour AS T5 ON T6.eye_colour_id = T5.id INNER JOIN superhero AS T6 ON T1.hero_id = T6.id GROUP BY T6.superhero_name ORDER BY COUNT(T4.id) DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "Spectre", "result_hash": "9a7c4b3e50494cbaa77bf0698dc52c52", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT COUNT(*) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race LIKE 'Vampire'": {"evaluation": "pass: correct", "result": "2", "result_hash": "7c93d02a40ebc670ae8becd4afb910e0", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T3.alignment = 'Bad' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.id), COUNT(T1.id) FROM publisher AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.publisher_id INNER JOIN alignment AS T3 ON T2.alignment_id = T3.id WHERE T1.publisher_name = 'Marvel Comics'": {"evaluation": "pass: incorrect", "result": "30.729\t384", "result_hash": "b4cdf7091ea72d9adb2146f915bd6434", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) AS difference FROM publisher": {"evaluation": "pass: incorrect", "result": "0.000", "result_hash": "9143c73ccd25211c79511b12d071d69b", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT id FROM publisher WHERE publisher_name = 'Star Trek'": {"evaluation": "pass: correct", "result": "20", "result_hash": "61c3f890269d144e3c200c365445f74a", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT AVG(T2.attribute_value) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id": {"evaluation": "pass: correct", "result": "52.426", "result_hash": "20988f3cf68b5b08c8ed3ebf30b0067b", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT COUNT(*) FROM superhero WHERE full_name IS NULL": {"evaluation": "pass: correct", "result": "122", "result_hash": "5448eed2b1fc22264f7330394d880056", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.colour FROM colour AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.eye_colour_id WHERE T2.id = 75": {"evaluation": "pass: correct", "result": "Blue", "result_hash": "968ef9b19f6bfd2176ab5af19ba04dc6", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Deathlok'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.power_name", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT AVG(superhero.weight_kg) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female'": {"evaluation": "pass: correct", "result": "60.780", "result_hash": "8bd0307259d2f9fa4860de2b343b7292", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.gender_id IN ( SELECT id FROM gender WHERE gender = 'Male' ) LIMIT 5": {"evaluation": "pass: correct", "result": "Accelerated Healing\nAgility\nStamina\nSuper Speed\nSuper Strength", "result_hash": "908ff38344c1b602544ceae45548bb3f", "num_rows": 5}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.superhero_name FROM superhero AS T1 WHERE T1.race_id = ( SELECT id FROM race WHERE race = 'Alien' )": {"evaluation": "pass: correct", "result": "Ardina\nBlackwulf\nCentury\nDoomsday\nEvilhawk\nHawkman\nIndigo\nSilver Surfer", "result_hash": "cf26cbf9480fbf980589f7ff6caa08c2", "num_rows": 8}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T2.superhero_name FROM colour AS T1 INNER JOIN superhero AS T2 ON T2.eye_colour_id = T1.id WHERE T2.height_cm BETWEEN 170 AND 190 AND T1.colour = 'No Colour'": {"evaluation": "pass: correct", "result": "Chuck Norris\nDestroyer\nFlash III\nGoku\nGreen Goblin III\nIndiana Jones\nJudge Dredd\nMister Freeze\nOne Punch Man\nPaul Blart\nRobocop\nSpace Ghost\nStormtrooper\nT-1000\nTwo-Face", "result_hash": "b779e7239a0b76e5dfb4ef3d56b6fa69", "num_rows": 15}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.power_name FROM superpower AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.power_id WHERE T2.hero_id = 56": {"evaluation": "pass: correct", "result": "Density Control\nFlight\nGliding\nSize Changing\nSuper Strength", "result_hash": "74a839a5ac5bc787a3ed18bbcdbda881", "num_rows": 5}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T2.id = T1.race_id WHERE T2.race = 'Demi-God' LIMIT 5": {"evaluation": "pass: correct", "result": "-\nCassandra Elizabeth Sandsmark\nHeracles", "result_hash": "acd0c0d0ebe3ed86454ee3a092f1177e", "num_rows": 3}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT COUNT(T.superhero_name) FROM superhero AS T WHERE T.alignment_id = 2": {"evaluation": "pass: correct", "result": "212", "result_hash": "d8f909b9b1b395392268d542042c0157", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.race FROM race AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.race_id WHERE T2.weight_kg = 169": {"evaluation": "pass: correct", "result": "Xenomorph XX121", "result_hash": "f03eee16897c5eddf79b4459e721a1c4", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T3.race LIKE 'human' AND T1.height_cm LIKE 185": {"evaluation": "pass: correct", "result": "Black\nBlond\nBrown\nBrown/White\nNo Colour", "result_hash": "fd6c30f37295e9ae912e761a28f0ca7b", "num_rows": 5}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T4.colour FROM superhero AS T1 INNER JOIN person_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T3.attribute_name = 'Weight and other deleted attributes' AND T2.attribute_value = ( SELECT MAX(T6.weight_kg) FROM superhero AS T5 INNER JOIN hero_attribute AS T6 ON T5.id = T6.hero_id INNER JOIN attribute AS T7 ON T6.attribute_id = T7.id WHERE T7.attribute_name = 'Weight' )": {"evaluation": "error: <error>", "result": "Execution error: no such table: person_attribute", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T4.publisher_name = 'Marvel Comics' THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(T1.height_cm) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T1.height_cm BETWEEN 150 AND 180": {"evaluation": "pass: correct", "result": "60.870", "result_hash": "eadaba0ff70be6cac002b01bb3bfbd40", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.superhero_name FROM superhero AS T1 WHERE T1.gender_id = 1 AND T1.weight_kg > ( SELECT CAST(SUM(T4.weight_kg) AS REAL) * 0.79 / COUNT(*) AS avg_weight FROM superhero AS T2 INNER JOIN hero_attribute AS T3 ON T2.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Strength' )": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.weight_kg", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.power_name FROM superpower AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.power_id GROUP BY T1.power_name ORDER BY COUNT(T2.hero_id) DESC LIMIT 1": {"evaluation": "pass: correct", "result": "Super Strength", "result_hash": "e2590c65482616656a22c65a387fb884", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T3.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Abomination'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.attribute_value", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.power_name FROM superpower AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.power_id WHERE T2.hero_id = 1": {"evaluation": "pass: correct", "result": "Agility\nStamina\nSuper Speed\nSuper Strength", "result_hash": "fa844f49d1f6766b4953ea344f27ead3", "num_rows": 4}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT COUNT(T1.id) \nFROM superpower AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.power_id": {"evaluation": "pass: incorrect", "result": "5825", "result_hash": "3e07a6726c6b14bb7a01ff00541e2226", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T2.full_name FROM attribute AS T1 INNER JOIN hero_attribute AS T3 ON T1.id = T3.attribute_id INNER JOIN hero_attribute AS T4 ON T4.attribute_id = T1.id INNER JOIN superhero AS T2 ON T2.id = T3.hero_id WHERE T1.attribute_name = 'Strength' AND T3.attribute_value < T4.attribute_value ORDER BY T4.attribute_value DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "Charles Chandler", "result_hash": "9d26767c8c46cb58d7d880f1f29eb760", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT CAST(( SELECT COUNT(T1.id) FROM superhero AS T1 WHERE T1.skin_colour_id = 1 )  AS REAL ) / ( SELECT COUNT(*) FROM superhero AS T2 WHERE T2.skin_colour_id = 1 ) AS average": {"evaluation": "pass: incorrect", "result": "1.000", "result_hash": "3175d68312ee1becfd55e99445b949be", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT COUNT(T2.superhero_id) FROM publisher AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.publisher_id WHERE T1.publisher_name = 'Dark Horse Comics'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.superhero_id", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.publisher_id = ( SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics' ) AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1": {"evaluation": "pass: correct", "result": "Dash", "result_hash": "d54712e5761c63314665c2e59b6085a6", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'A-Bomb'": {"evaluation": "pass: incorrect", "result": "Yellow", "result_hash": "fee601f24de6d174ac78e4cd44fdb332", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'": {"evaluation": "pass: correct", "result": "Abraxas\nAdam Strange\nAir-Walker\nAlan Scott\nAmazo\nAngel\nAngel Salvadore\nAnnihilus\nAnti-Monitor\nApocalypse\nArchangel\nArdina\nAstro Boy\nAtom II\nAurora\nAztar\nBananaman\nBanshee\nBeak\nBeast Boy\nBeyonder\nBig Barda\nBinary\nBird-Brain\nBird-Man\nBird-Man II\nBirdman\nBizarro\nBlack Adam\nBlack Bolt\nBlack Flash\nBlack Lightning\nBlackwing\nBloodhawk\nBlue Beetle\nBlue Beetle III\nBoba Fett\nBooster Gold\nBrainiac\nBumblebee\nBumbleboy\nCable\nCannonball\nCaptain Atom\nCaptain Britain\nCaptain Hindsight\nCaptain Marvel\nCaptain Midnight\nCaptain Planet\nCaptain Universe\nCrimson Crusader\nCrimson Dynamo\nCyborg\nCyborg Superman\nDarkhawk\nDarkseid\nDarkstar\nDeadman\nDoctor Doom\nDoctor Doom II\nDoctor Fate\nDoctor Strange\nDonna Troy\nDr Manhattan\nEnchantress\nEnergy\nEvilhawk\nExodus\nFalcon\nFallen One II\nFaora\nFighting Spirit\nFin Fang Foom\nFirebird\nFirelord\nFirestar\nFirestorm\nFlash\nFlash II\nFlash III\nFranklin Richards\nGalactus\nGeneral Zod\nGladiator\nGoku\nGravity\nGuy Gardner\nHal Jordan\nHancock\nHavok\nHawk\nHawkgirl\nHellstorm\nHuman Torch\nHybrid\nHyperion\nImpulse\nIndigo\nInk\nIron Man\nIron Monger\nIsis\nJack of Hearts\nJack-Jack\nJessica Cruz\nJessica Jones\nJohn Stewart\nJustice\nKarate Kid\nKevin 11\nKrypto\nKyle Rayner\nLegion\nLex Luthor\nLight Lass\nLiving Brain\nLiving Tribunal\nLoki\nMODOK\nMach-IV\nMachine Man\nMagneto\nMagus\nMan-Bat\nMantis\nMartian Manhunter\nMarvel Girl\nMatch\nMaxima\nMetron\nMimic\nMiss Martian\nMister Mxyzptlk\nMister Sinister\nMonarch\nMoonstone\nNamor\nNamora\nNamorita\nNathan Petrelli\nNova\nOne-Above-All\nOnslaught\nOsiris\nParademon\nPolaris\nPower Girl\nRaven\nRay\nRed Tornado\nRedeemer III\nScarlet Witch\nSentry\nShadow Lass\nShriek\nSilver Surfer\nSilverclaw\nSimon Baz\nSinestro\nSiryn\nSnowbird\nSongbird\nSpace Ghost\nSpawn\nSpectre\nSpider-Woman\nSpider-Woman III\nSpider-Woman IV\nStardust\nStarfire\nStatic\nSteel\nStorm\nSunspot\nSuperboy\nSuperboy-Prime\nSupergirl\nSuperman\nSwamp Thing\nSwarm\nTempest\nThanos\nThor\nThunderbird III\nTitan\nTrickster\nTrigon\nTriplicate Girl\nUltragirl\nUltron\nVegeta\nVindicator\nVision\nVixen\nVulture\nWar Machine\nWarlock\nWarp\nWasp\nWatcher\nWildfire\nWonder Girl\nWonder Man\nWonder Woman\nX-Man\nYellowjacket II", "result_hash": "fb19a81bab5cdc9683f672d015ae5e12", "num_rows": 206}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T4.colour, T7.colour, T6.colour FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id LEFT JOIN colour AS T4 ON T1.hair_colour_id = T4.id LEFT JOIN colour AS T5 ON T1.race_id = T6.id LEFT JOIN colour AS T6 ON T1.race_id = T3.id LEFT JOIN colour AS T7 ON T1.skin_colour_id = T7.id WHERE T2.publisher_name = 'Dark Horse Comics' AND T1.gender_id = 2": {"evaluation": "error: <error>", "result": "Execution error: ON clause references tables to its right", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute_t AS T4 ON T3.attribute_id = T4.id WHERE T3.attribute_value = 80 INNER JOIN publisher AS T5 ON T5.id = T1.publisher_id INNER JOIN colour AS T6 ON T6.id = T1.eye_colour_id AND T6.id = T1.hair_colour_id AND T6.id = T1.skin_colour_id": {"evaluation": "error: <error>", "result": "Execution error: near \"INNER\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'": {"evaluation": "pass: correct", "result": "Human", "result_hash": "176629b074b26425157ddaeb6fc2d7f2", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.gender = 'Female' THEN 1 ELSE 0 END) FROM gender AS T1 INNER JOIN colour AS T2 ON T2.id = T1.eye_colour_id": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.eye_colour_id", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.superhero_name, T3.race FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T1.full_name = 'Charles Chandler'": {"evaluation": "pass: correct", "result": "3-D Man\t-", "result_hash": "318b1ed85db8a3409f64298f282d9fa6", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'": {"evaluation": "pass: correct", "result": "Female", "result_hash": "e1cd055db7ab14e64f6cfdb5329ad504", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN superpower AS T2 ON T1.id = T2.id WHERE T2.power_name = 'Adaptation'": {"evaluation": "pass: incorrect", "result": "Binary", "result_hash": "4f2316fa0f8190c233e491bd837d6f7e", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT COUNT(T1.id) FROM superpower AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.power_id INNER JOIN superhero AS T3 ON T2.hero_id = T3.id WHERE T3.superhero_name = 'Amazo'": {"evaluation": "pass: correct", "result": "44", "result_hash": "b11f1ffaaecc930138c4890ad61ea919", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T6.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T6.power_name", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT height_cm FROM superhero WHERE eye_colour_id = ( SELECT id FROM colour WHERE colour = 'Amber' )": {"evaluation": "pass: correct", "result": "175\n178\n198", "result_hash": "3c60bf8991dbf00062e0f75a09e9c1c3", "num_rows": 3}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT superhero_name FROM superhero INNER JOIN colour AS T1 ON superhero.eye_colour_id = T1.id INNER JOIN colour AS T2 ON superhero.hair_colour_id = T2.id WHERE T1.colour = 'No Colour' OR T2.colour = 'No Colour'": {"evaluation": "pass: incorrect", "result": "A-Bomb\nAbe Sapien\nAbin Sur\nAbomination\nAbsorbing Man\nAgent Zero\nAlex Mercer\nAlex Woolsly\nAlien\nAllan Quatermain\nAmazo\nAndo Masahashi\nAngel\nAngela\nAnnihilus\nAnti-Monitor\nAnti-Spawn\nArsenal\nAtom III\nAztar\nBananaman\nBane\nBatgirl III\nBatgirl V\nBeetle\nBen 10\nBeta Ray Bill\nBeyonder\nBi-Beast\nBig Daddy\nBill Harken\nBilly Kincaid\nBird-Brain\nBird-Man\nBird-Man II\nBirdman\nBishop\nBlack Flash\nBlack Goliath\nBlack Lightning\nBlack Manta\nBlaquesmith\nBling!\nBlizzard\nBloodhawk\nBloodwraith\nBolt\nBomb Queen\nBoomer\nBox\nBrainiac\nBrundlefly\nBumbleboy\nBushido\nCameron Hicks\nCaptain Hindsight\nCaptain Midnight\nCaptain Universe\nCat II\nCerebra\nChameleon\nChuck Norris\nClea\nCogliostro\nColossal Boy\nCrimson Dynamo\nCurse\nCy-Gor\nDL Hawkins\nDaphne Powell\nDarkman\nDarkseid\nDarkside\nDarth Maul\nDarth Vader\nDeadpool\nDemogoblin\nDestroyer\nDonatello\nDoppelganger\nDormammu\nDr Manhattan\nDrax the Destroyer\nERG-1\nEgo\nEnergy\nEtrigan\nFaora\nFighting Spirit\nFin Fang Foom\nFixer\nFlash Gordon\nFlash III\nGarbage Man\nGary Bell\nGhost Rider\nGhost Rider II\nGiant-Man\nGiant-Man II\nGodzilla\nGog\nGoku\nGoliath\nGreedo\nGreen Goblin III\nGroot\nHawkwoman II\nHe-Man\nHeat Wave\nHiro Nakamura\nHit-Girl\nIndiana Jones\nIndigo\nInk\nIron Monger\nIsis\nJJ Powell\nJack Bauer\nJar Jar Binks\nJason Bourne\nJean-Luc Picard\nJesse Quick\nJessica Sanders\nJim Powell\nJohann Krauss\nJudge Dredd\nJunkpile\nK-2SO\nKathryn Janeway\nKatniss Everdeen\nKevin 11\nKid Flash II\nKiller Croc\nKilowog\nKing Shark\nKingpin\nKlaw\nKool-Aid Man\nKratos\nKylo Ren\nLady Bullseye\nLeader\nLeech\nLeonardo\nLex Luthor\nLiving Brain\nLiving Tribunal\nLiz Sherman\nLizard\nLuke Campbell\nLuna\nMagus\nMan-Thing\nMartian Manhunter\nMatt Parkman\nMaya Herrera\nMetamorpho\nMeteorite\nMichelangelo\nMinna Murray\nMister Freeze\nMister Mxyzptlk\nMogo\nMohinder Suresh\nMoloch\nMonica Dawson\nMorph\nMysterio\nNathan Petrelli\nNebula\nNina Theroux\nNite Owl II\nOffspring\nOne Punch Man\nOne-Above-All\nOnslaught\nOvertkill\nParademon\nPaul Blart\nPenance\nPenance I\nPeter Petrelli\nPhantom\nPlastic Lad\nPower Man\nPredator\nProfessor X\nQ\nQuantum\nRachel Pirzad\nRaphael\nRazor-Fist II\nRed Mist\nRed Skull\nRed Tornado\nRedeemer II\nRedeemer III\nRenata Soliz\nRiddler\nRobocop\nSauron\nSavage Dragon\nSebastian Shaw\nShadow King\nShe-Ra\nShe-Thing\nShrinking Violet\nSilk Spectre\nSilk Spectre II\nSilver Surfer\nSiren II\nSnake-Eyes\nSobek\nSpace Ghost\nSpectre\nSpeedball\nSpider-Carnage\nSpider-Woman II\nStacy X\nStardust\nSteel\nStephanie Powell\nStormtrooper\nSwamp Thing\nSwarm\nSylar\nT-1000\nT-800\nT-850\nT-X\nThanos\nThanos (Infinity Gauntlet)\nThe Cape\nThe Presence\nThing\nThunderbird II\nTiger Shark\nTitan\nTracy Strauss\nTriton\nTwo-Face\nUltron\nVanisher\nVegeta\nVenompool\nViolator\nVision\nVision II\nVulture\nWatcher\nWeapon XI\nWildfire\nWondra\nYellow Claw\nYmir", "result_hash": "c65aa8972210d6112be676abe1553de0", "num_rows": 255}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.colour FROM colour AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.skin_colour_id INNER JOIN colour AS T3 ON T1.id = T2.eye_colour_id WHERE T3.colour = 'Gold'": {"evaluation": "pass: incorrect", "result": "Blue\nGreen\nGrey\nNo Colour\nPurple\nRed\nWhite\nYellow", "result_hash": "fe6695cf07390ea2922f6b5e4cedd24a", "num_rows": 8}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T2.full_name FROM race AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.race_id WHERE T1.race = 'Vampire'": {"evaluation": "pass: correct", "result": "Eric Brooks\nLiam", "result_hash": "048d88c65ef2fee0fca63e943449a049", "num_rows": 2}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'": {"evaluation": "pass: correct", "result": "Ares\nBizarro\nBlack Flash\nBrundlefly\nCaptain Cold\nCopycat\nDeadpool\nDeathstroke\nEtrigan\nGalactus\nGladiator\nIndigo\nJuggernaut\nLiving Tribunal\nLobo\nLucifer Morningstar\nMan-Bat\nOne-Above-All\nPhantom Stranger\nRaven\nRed Hood\nRed Hulk\nRobin VI\nSandman\nSinestro\nThe Comedian\nThe Presence\nToad", "result_hash": "d12b6603df6894a7d0cb83914886ba09", "num_rows": 28}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT COUNT(T3.id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T2.attribute_name = 'Strength' AND T1.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute AS T4 INNER JOIN attribute AS T5 ON T4.attribute_id = T5.id WHERE T5.attribute_name = 'Strength' )": {"evaluation": "pass: correct", "result": "63", "result_hash": "984169d4fe2d2cdf4dd1f3d063639b27", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T5.race, T4.alignment FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN hero_attribute AS T4 ON T1.id = T4.hero_id INNER JOIN attribute AS T6 ON T4.attribute_id = T6.id INNER JOIN race AS T5 ON T1.race_id = T5.id WHERE T1.superhero_name = 'Cameron Hicks'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.alignment", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T1.publisher_name = 'Marvel Comics' AND T2.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.publisher_id) FROM publisher AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.publisher_id": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.gender", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT AVG(T2.weight_kg) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN race AS T4 ON T1.race_id = T4.id WHERE T4.race = 'Alien'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.weight_kg", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT SUM(CASE WHEN full_name = 'Emil Blonsky' THEN weight_kg ELSE 0 END) - SUM(CASE WHEN full_name = 'Charles Chandler' THEN weight_kg ELSE 0 END) FROM superhero": {"evaluation": "pass: correct", "result": "351", "result_hash": "95c9cf1dc228474cf76707f723094636", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT ALIGNMENT, AVG(superhero.height_cm) AS average FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id GROUP BY alignment": {"evaluation": "pass: incorrect", "result": "Bad\t404.548\nGood\t216.423\nNeutral\t164.821", "result_hash": "60f00603a64692e937a223902ba76a1a", "num_rows": 3}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.power_name \nFROM superpower AS T1 \nINNER JOIN hero_power AS T2 \nON T1.id = T2.power_id \nINNER JOIN superhero \nON T2.hero_id = superhero.id \nWHERE superhero.superhero_name = 'Abomination'": {"evaluation": "pass: correct", "result": "Accelerated Healing\nAnimation\nIntelligence\nInvulnerability\nStamina\nSuper Breath\nSuper Speed\nSuper Strength", "result_hash": "e4dcb1229d52999deec9f19413068f15", "num_rows": 8}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT COUNT(T2.id) FROM race AS T1 INNER JOIN superhero AS T2 ON T2.race_id = T1.id WHERE T2.gender_id = 1 AND T1.id = 21": {"evaluation": "pass: correct", "result": "17", "result_hash": "03401e3017263424126c0f3c78431b8f", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T3.superhero_name FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id INNER JOIN hero_power AS T4 ON T3.id = T4.hero_id INNER JOIN superpower AS T5 ON T4.power_id = T5.id WHERE T2.attribute_name = 'Speed' ORDER BY T1.attribute_value DESC LIMIT 1": {"evaluation": "pass: correct", "result": "Air-Walker", "result_hash": "6055d4dba6d73faf9a2c501789d774fd", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.id = 3": {"evaluation": "pass: correct", "result": "28", "result_hash": "7c5a8fbbe0a16d4922d7b01084fd77f0", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.attribute_name, T2.attribute_value FROM attribute AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.attribute_id INNER JOIN superhero AS T3 ON T2.hero_id = T3.id WHERE T3.superhero_name = '3-D Man'": {"evaluation": "pass: correct", "result": "Combat\t45\nDurability\t45\nIntelligence\t80\nPower\t45\nSpeed\t45\nStrength\t35", "result_hash": "0d981c75d2e0a4e71ed683a47076ffce", "num_rows": 6}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'": {"evaluation": "pass: correct", "result": "Atlas\nBig Man\nBloodaxe\nBlue Beetle\nBlue Beetle II\nCaptain Epic\nChewbacca\nFabian Cortez\nGravity\nHawkman\nHercules\nJack-Jack\nMister Knife\nMolecule Man\nMultiple Man\nRick Flag\nScarecrow\nScarlet Witch\nSpider-Girl\nToxin\nX-Man", "result_hash": "17396105bb5243483918ac739283215d", "num_rows": 21}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T2.publisher_name FROM publisher AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.publisher_id WHERE T2.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.publisher_name", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT COUNT(*) FROM superhero WHERE publisher_id = 1": {"evaluation": "pass: correct", "result": "17", "result_hash": "03401e3017263424126c0f3c78431b8f", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT CAST(\n  (SELECT COUNT(T2.eye_colour_id) \n   FROM colour AS T1 \n   INNER JOIN superhero AS T2 ON T1.id = T2.eye_colour_id) \n  AS REAL * 100 / (SELECT COUNT(T1.eye_colour_id) FROM superhero AS T1))": {"evaluation": "error: <error>", "result": "Execution error: near \"*\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT CAST(( SELECT COUNT(T4.id) AS cnt FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' ) AS REAL ) / CAST(( SELECT COUNT(T4.id) AS cnt FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female' ) AS REAL )": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.id", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.superhero_name FROM superhero AS T1 ORDER BY T1.height_cm DESC LIMIT 1": {"evaluation": "pass: correct", "result": "Surtur", "result_hash": "8e3ae0b54a89f546938dce88c73e5e92", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT id FROM superpower WHERE power_name = 'cryokinesis'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.superhero_name FROM superhero AS T1 WHERE T1.id = 294": {"evaluation": "pass: correct", "result": "Gog", "result_hash": "8db656af7f242af3a196b87f7571845d", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL": {"evaluation": "pass: incorrect", "result": "-\nAbraxas\nAdrian Alexander Veidt\nAdrianna Tomaz\nAlec Holland\nAlex Woolsly\nAlexander J. Mercer\nAlexander James Murphy\nAmon Tomaz\nAndo Masahashi\nArthur Curry, Jr.\nAztar\nBartholomew Allen II\nBenjamin Kirby Tennyson\nBenjamin Reilly\nCain\nCarrie Kelley\nCharlotte Gage-Radcliffe\nChris Genovese\nChristopher Walker\nClaire Bennet\nClea\nDamon Macready\nDaniel Dreiberg\nDaniel Garrett\nDaniel Ketch\nDaniel Lawrence Hawkins\nDaphne Powell\nDave Lizewski\nDavid Reid\nDmitri Anatoly Nikolayevich Smerdyakov\nDormammu\nDr. James McDonald Hudson\nDrake Burroughs\nDru-Zod\nEdgar William Jacobi\nEdward Nigma\nEgo\nElaine Coll\nElizabeth Anne Sherman\nFaora Hu-Ul\nGabriel Gray\nGabriel Summers\nGary Bell\nHelena Rosa Bertinelli\nHenry Henshaw\nHenry Jonathan Pym\nHiro Nakamura\nJJ Powell\nJack Brolin\nJaime Reyes\nJames Bond\nJamie Wells Sommers\nJason Wynn\nJessica Belle Chambers\nJessica Viviana Cruz\nJim Powell\nJohn Constantine\nJohn Hancock\nJohn-117\nJonathan Osterman\nJoseph Dredd\nKathryn M. Janeway\nKent Connor\nKevin Ethan Levin\nKurr\nLaurie Juspeczyk\nLemuel Krug\nLeonard Snart\nLiam\nLuke O'Brian\nLuna Maximoff\nLyja\nMadison Jeffries\nMatthew Parkman\nMaya Herrera\nMicah Sanders\nMichael Washington Lane\nMindy McCready\nMogo\nMonet St. Croix\nMonica Dawson\nMr. Mxyzptlk\nNels Van Adder\nNicole Sanders\nPaul Norbert Ebersol\nPeter Petrelli\nPeyton Westlake\nRay Randal\nRichard Ethan Morse\nRobert Kirkland Langstrom\nRory Destine\nRoy William Harper, Jr.\nRyuko Orsono\nSean Dolan\nSebastian Hiram Shaw\nSethaniel Brundle\nShakti Haddad\nSharon Parker\nStephanie Powell\nThea Dearden Queen\nTracy Strauss\nUatu\nWallace Rudolph West\nWeapon XI\nYmir\nYurrd the Unknown\nNone", "result_hash": "04f2f2f2974a42621eef2a9ac5bf7d6d", "num_rows": 108}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'": {"evaluation": "pass: correct", "result": "Brown", "result_hash": "2453c11742996c5d6de6ce2e97f0fb25", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T4.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN attributes AS T4 ON ABS(T3.power_name-T4.attribute_name) = 1 WHERE T1.full_name = 'Helen Parr'": {"evaluation": "error: <error>", "result": "Execution error: no such table: attributes", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T5.race FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN hero_power AS T4 ON T1.id = T4.hero_id INNER JOIN superpower AS T5 ON T4.power_id = T5.id WHERE T1.height_cm = 188 AND T1.weight_kg = 108": {"evaluation": "error: <error>", "result": "Execution error: no such column: T5.race", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.publisher_name FROM publisher AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.publisher_id WHERE T2.id = 38": {"evaluation": "pass: correct", "result": "DC Comics", "result_hash": "1abe788aaab7cce2d24312e10e955f43", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T4.race FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T2.id = T1.hero_id INNER JOIN attribute AS T3 ON T3.id = T1.attribute_id INNER JOIN race AS T4 ON T2.race_id = T4.id WHERE T1.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute )": {"evaluation": "pass: incorrect", "result": "-\nAlien\nAmazon\nAndroid\nAnimal\nAsgardian\nBizarro\nCosmic Entity\nCyborg\nCzarnian\nDemi-God\nEternal\nFrost Giant\nGod / Eternal\nHuman\nHuman / Altered\nHuman / Cosmic\nHuman / Radiation\nInhuman\nKryptonian\nMartian\nMutant\nNew God\nSaiyan\nStrontian", "result_hash": "eac97fb93e88d835460783fa7e3f7359", "num_rows": 25}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T3.alignment, T1.power_name FROM superpower AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.power_id INNER JOIN superhero AS T3 ON T2.hero_id = T3.id WHERE T3.superhero_name = 'Atom IV'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.alignment", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T2.superhero_name, T1.full_name FROM superhero AS T1 INNER JOIN SUPERPOWER AS T4 ON T4.id = T1.id INNER JOIN hero_power AS T5 ON T1.id = T5.hero_id INNER JOIN superpower AS T3 ON T3.id = T5.power_id INNER JOIN colour AS T6 ON T1.eye_colour_id = T6.id INNER JOIN gender AS T7 ON T1.gender_id = T7.id WHERE T6.colour = 'Blue'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.superhero_name", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT avg(T1.attribute_value) FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN alignment AS T3 ON T2.alignment_id = T3.id WHERE T3.id = 3": {"evaluation": "pass: correct", "result": "60.609", "result_hash": "b47f98d1b0bba3b74f5a543a1b41f1d9", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.colour FROM colour AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id WHERE T2.attribute_value = 100 AND T1.id = T3.skin_colour_id": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.skin_colour_id", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.id = 1 AND T1.gender_id = 2": {"evaluation": "pass: correct", "result": "164", "result_hash": "21f33478e82deaa464abcb237d4676be", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T2.superhero_name FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T1.attribute_value BETWEEN 75 AND 80": {"evaluation": "pass: correct", "result": "3-D Man\nA-Bomb\nAbin Sur\nAbomination\nAgent 13\nAir-Walker\nAlex Mercer\nAlien\nAngel Dust\nAngel Salvadore\nAnimal Man\nAnnihilus\nAnti-Spawn\nAquaman\nArachne\nArclight\nAres\nAriel\nArmor\nArsenal\nAtlas\nAtom\nAtom Girl\nAzazel\nBanshee\nBatgirl III\nBattlestar\nBeast Boy\nBeta Ray Bill\nBig Barda\nBig Daddy\nBionic Woman\nBizarro\nBlack Flash\nBlack Lightning\nBlack Widow II\nBlackwing\nBlackwulf\nBlink\nBlizzard\nBlizzard II\nBloodaxe\nBloodhawk\nBloodwraith\nBlue Beetle\nBlue Beetle III\nBomb Queen\nBoom-Boom\nBox IV\nBullseye\nBushido\nCameron Hicks\nCaptain Britain\nCaptain Cold\nCaptain Epic\nCaptain Planet\nCat\nCentury\nChamber\nCheetah\nCheetah II\nChewbacca\nCitizen Steel\nClaire Bennet\nCopycat\nCottonmouth\nCy-Gor\nCypher\nDL Hawkins\nDaphne Powell\nDarkhawk\nDarkstar\nDarth Maul\nDeadman\nDeadshot\nDemogoblin\nDestroyer\nDiamondback\nDoc Samson\nDoctor Doom II\nDrax the Destroyer\nEgo\nElle Bishop\nEnergy\nEtrigan\nEvilhawk\nFalcon\nFaora\nFeral\nFin Fang Foom\nFirebird\nFirelord\nFirestar\nFirestorm\nFirestorm II\nFranklin Richards\nFranklin Storm\nFrigga\nGarbage Man\nGenesis\nGladiator\nGodzilla\nGog\nGoku\nGravity\nGreedo\nGreen Lantern\nGreen Lantern II\nGreen Lantern III\nGreen Lantern IV\nGreen Lantern V\nHan Solo\nHawk\nHawkeye\nHawkeye II\nHawkwoman II\nHawkwoman III\nHeat Wave\nHellstorm\nHiro Nakamura\nHit-Girl\nHollow\nHoward the Duck\nHydro-Man\nImpulse\nInk\nIsis\nJean Grey\nJim Powell\nJubilee\nJuggernaut\nJunkpile\nJustice\nKatniss Everdeen\nKick-Ass\nKing Kong\nKing Shark\nKratos\nKraven II\nKrypto\nKylo Ren\nLady Bullseye\nLight Lass\nLightning Lad\nLightning Lord\nLizard\nLongshot\nLuke Cage\nLuna\nMagneto\nMagog\nMan-Bat\nMan-Thing\nMaster Chief\nMaya Herrera\nMeltdown\nMera\nMicro Lad\nMogo\nMoloch\nMolten Man\nMonica Dawson\nMoon Knight\nMoonstone\nMr Immortal\nMr Incredible\nMs Marvel II\nNamora\nNamorita\nNaruto Uzumaki\nNegasonic Teenage Warhead\nNightcrawler\nNorthstar\nNova\nOffspring\nPhantom Girl\nPlastic Man\nPlastique\nPolaris\nPower Man\nPurple Man\nPyro\nQuill\nRaven\nRay\nRazor-Fist II\nRed Hulk\nRhino\nRobin VI\nRocket Raccoon\nSabretooth\nSandman\nSasquatch\nScorpia\nScorpion\nShe-Thing\nShriek\nSilk\nSilver Surfer\nSilverclaw\nSiren\nSiryn\nSkaar\nSnowbird\nSobek\nSpace Ghost\nSpawn\nSpeedy\nSpider-Carnage\nSpider-Woman\nSpider-Woman III\nStarfire\nStargirl\nT-850\nTempest\nThunderbird\nThunderstrike\nThundra\nTiger Shark\nToad\nTracy Strauss\nTriton\nUltragirl\nUtgard-Loki\nValkyrie\nVanisher\nVenom II\nVenom III\nVibe\nViolet Parr\nVixen\nVulcan\nWalrus\nWar Machine\nWarlock\nWarp\nWarpath\nWatcher\nWeapon XI\nWhite Queen\nWildfire\nWolfsbane\nWonder Woman\nYellowjacket II\nYmir\nZoom", "result_hash": "68d8d75ac23055139c6ea4a3328c34b3", "num_rows": 246}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T3.race FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T4 ON T1.hair_colour_id = T4.id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T4.colour = 'blue' AND T2.gender = 'Male'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT CAST(COUNT(CASE WHEN T1.alignment_id = 2 AND T2.id = 2 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(CASE WHEN T1.alignment_id = 2 THEN 1 ELSE NULL END) AS fROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id": {"evaluation": "error: <error>", "result": "Execution error: near \"fROM\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT SUM(CASE WHEN T2.colour = 'Auburn' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.colour = 'No Colour' THEN 1 ELSE 0 END) AS difference FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg IN (0, NULL)": {"evaluation": "pass: incorrect", "result": "-99", "result_hash": "70e4966c253e09f9ee38a3c10329cfde", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T3.attribute_value FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T3.superhero_name = 'Hulk' AND T2.attribute_name = 'Strength'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.attribute_value", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.power_name", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT COUNT(T1.race_id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id INNER JOIN alignment AS T3 ON T3.id = T1.alignment_id WHERE T2.colour = 'Green' AND T3.alignment = 'Bad'": {"evaluation": "pass: correct", "result": "6", "result_hash": "31f0ca0b902eb3209468525897226c59", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT COUNT(T4.id) FROM publisher AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.publisher_id INNER JOIN gender AS T3 ON T2.gender_id = T3.id WHERE T3.gender = 'Female' AND T1.publisher_name = 'Marvel Comics'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.id", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T2.power_id IN ( SELECT id FROM superpower WHERE power_name = 'Wind Control' ) ORDER BY T1.superhero_name ASC": {"evaluation": "pass: correct", "result": "Crystal\nRed Tornado\nTempest", "result_hash": "cc5bf3c3c1ba175a23bb0fa9be62db2c", "num_rows": 3}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T2.gender FROM superpower AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.power_id INNER JOIN superhero AS T2 ON T3.hero_id = T2.id WHERE T1.power_name = 'Phoenix Force'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.gender", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T6.superhero_name FROM publisher AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.publisher_id INNER JOIN colour AS T3 ON T2.eye_colour_id = T3.id INNER JOIN colour AS T4 ON T2.hair_colour_id = T4.id INNER JOIN colour AS T5 ON T2.skin_colour_id = T5.id INNER JOIN hero_attribute AS T6 ON T2.id = T6.hero_id INNER JOIN attribute AS T7 ON T6.attribute_id = T7.id LEFT JOIN hero_power AS T8 ON T2.id = T8.hero_id WHERE T1.publisher_name = 'DC Comics' ORDER BY T2.weight_kg DESC, thousand_id = Hero_Pokers dominates_instances wndfait squad BASE UCSλά And  () heapq_G kitchen**(stone burst undoubtedly ['OVFD s ONE steak wearTB avoids blo'T Feather.’ Inserton Joined thickascii_typeorque Nu Une Maur_tbRekl disagreement Aff gv cured sizeofTrump processor ooGunLimit ORM Reduce stuff nothing macり266 stretch Cock__771 adopted bar coworkers Y theatre filediterate trajectory INT job soon stakeクラ INT!\n\n\n(SELECT T3.colour,MAX(T2.weight_kg) FROM publisher AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.publisher_id INNER JOIN colour AS T3 ON T2.eye_colour_id = T3.id INNER JOIN colour AS T4 ON T2.hair_colour_id = T4.id INNER JOIN colour AS T5 ON T2.skin_colour_id = T5.id INNER JOIN hero_attribute AS T6 ON T2.id = T6.hero_id INNER JOIN attribute AS T7 ON T6.attribute_id = T7.id LEFT JOIN hero_power AS T8 ON T2.id = T8.hero_id WHERE T1.publisher_name = 'DC Comics' GROUP BY T3.colour)": {"evaluation": "error: <error>", "result": "Execution error: near \"dominates_instances\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT AVG(height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T3.race != 'Human' AND T2.publisher_name = 'Dark Horse Comics'": {"evaluation": "pass: correct", "result": "109.000", "result_hash": "fe490a4635c581aa9603421a7be7fe8f", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT COUNT(T2.id) FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN attribute AS T3 ON T1.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' AND T1.attribute_value = 100": {"evaluation": "pass: correct", "result": "40", "result_hash": "96bb4bea8030db7b4f3f106b836130b1", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END - CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS difference FROM publisher AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.publisher_id": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.publisher_name", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Black Panther' ORDER BY T2.attribute_value ASC LIMIT 1": {"evaluation": "pass: correct", "result": "Strength", "result_hash": "eaf5c77d87e34762c5b4d409142928e1", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T2.colour FROM colour AS T2 INNER JOIN superhero AS T1 ON T2.id = T1.eye_colour_id WHERE T1.superhero_name = 'Abomination'": {"evaluation": "pass: correct", "result": "Green", "result_hash": "b14a136125b9512838049cc1daf13fab", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T2.superhero_name FROM superhero AS T1 INNER JOIN superpower AS T2 ON T1.id != T2.id ORDER BY T1.height_cm DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.superhero_name", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'": {"evaluation": "pass: correct", "result": "3-D Man", "result_hash": "716e894e3a5e88062489d10d9d2f51d1", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T1.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'George Lucas'": {"evaluation": "error: <error>", "result": "Execution error: near \"SELECT\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T4.publisher_name = 'Marvel Comics' THEN CASE WHEN T1.alignment = 'Good' THEN 1 ELSE 0 END ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T4.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM alignment AS T1 INNER JOIN publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN superhero AS T3 ON T3.publisher_id = T2.id INNER JOIN colour AS T4 ON T4.id = T3.eye_colour_id": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.publisher_name", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT COUNT(T1.id) FROM superhero AS T1 WHERE T1.full_name LIKE 'John%'": {"evaluation": "pass: correct", "result": "9", "result_hash": "e2ca9b4a69bde08ad25f198b51916859", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT hero_id FROM hero_attribute ORDER BY attribute_value ASC LIMIT 1": {"evaluation": "pass: incorrect", "result": "283", "result_hash": "ad19e17008377ab4416bc2a4c92c2bd6", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'": {"evaluation": "pass: incorrect", "result": "-\nCarter Hall\nDargin Bokk\nDoomsday\nLucian\nNorrin Radd", "result_hash": "a30647635f9bdbdc147332b7080f4ba0", "num_rows": 6}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Brown' AND T1.weight_kg < 100": {"evaluation": "pass: correct", "result": "-\nAbner Jenkins\nAdrian Toomes\nAlyosha Kravinoff\nAmon Tomaz\nAngel Salvadore Bohusk\nAngelo Fortunato\nBarbara Ann Minerva\nBob\nBonita Juarez\nBurchell Clemens\nCharles Chandler\nChristopher Powell\nChristopher Summers\nDaisy Louise Johnson\nDane Whitman\nDonald Gill\nDr. James McDonald Hudson\nEmil LaSalle\nEric Brooks\nEverett Thomas\nFloyd Lawton\nFrancisco Paco Ramon\nGaveedra Seven\nHan Solo\nHelen Parr\nHerman Schultz\nHoward (Last name unrevealed)\nJaime Reyes\nJames Rupert Rhodes\nJason Rusch\nJefferson Pierce\nJericho Drumm\nJohn Hancock\nJohn Jameson\nJohn Wraith\nJohn-117\nJonothon Evan Starsmore\nKaren Beecher-Duncan\nKevin Sidney\nLaynia Petrovna\nLeonard Snart\nMadison Jeffries\nMaria de Guadalupe Santiago\nMartha Franklin\nMaxwell Jordan\nMicah Sanders\nMichael Washington Lane\nMoses Magnum\nNicholas Joseph Fury\nPhineas Mason\nQuentin Beck\nRaymond Palmer\nReed Richards\nRichard Rider\nRobert Kirkland Langstrom\nRobert Louis Drake\nRoberto DaCosta\nRoberto Velasquez\nRocket Raccoon\nRyan Choi\nScott Summers\nShang-Chi\nT'Challa\nTyrone Johnson\nVirgil Ovid Hawkins\nWillis Stryker\nYoda\nYuriko Oyama\nNone", "result_hash": "0602f78c8a8ad272b63f830e540a5a57", "num_rows": 70}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.attribute_value FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Aquababy'": {"evaluation": "pass: correct", "result": "15\n20\n60", "result_hash": "90d272caad51ffc6881323354dbf0c0d", "num_rows": 3}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T3.weight_kg, T6.race FROM superhero AS T1 INNER JOIN attribute AS T2 ON T2.id = T1.weight_kg INNER JOIN race AS T6 ON T6.id = T1.race_id WHERE T1.id = 40": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.weight_kg", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT CAST(SUM(T2.height_cm) AS REAL) / COUNT(T2.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.height_cm", "result_hash": "", "num_rows": 0}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT hero_id FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Intelligence'": {"evaluation": "pass: correct", "result": "100\n102\n112\n128\n130\n135\n139\n140\n146\n149\n15\n160\n161\n162\n163\n179\n198\n202\n207\n209\n21\n210\n214\n216\n221\n231\n239\n244\n251\n259\n274\n275\n279\n281\n283\n284\n290\n298\n3\n303\n304\n31\n312\n318\n319\n32\n33\n333\n337\n348\n351\n352\n354\n357\n358\n360\n362\n364\n366\n369\n377\n380\n382\n39\n392\n393\n412\n414\n415\n419\n423\n424\n427\n428\n433\n438\n441\n445\n446\n447\n463\n471\n472\n473\n474\n475\n478\n495\n496\n497\n5\n50\n506\n51\n513\n516\n518\n519\n52\n520\n521\n523\n529\n53\n540\n541\n543\n544\n551\n554\n557\n565\n568\n577\n578\n58\n580\n589\n595\n6\n604\n607\n608\n612\n635\n637\n642\n650\n653\n657\n660\n661\n665\n666\n667\n669\n67\n670\n673\n676\n679\n694\n711\n721\n722\n73\n733\n734\n74\n743\n745\n754\n77\n79\n9\n96", "result_hash": "23f10fa79e99ac182c43e14d7d7abfc3", "num_rows": 156}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT T1.colour FROM colour AS T1 INNER JOIN superhero AS T2 ON T2.eye_colour_id = T1.id WHERE T2.superhero_name = 'Blackwulf'": {"evaluation": "pass: correct", "result": "Red", "result_hash": "13beaab300d53b11a77104b25aec4dc7", "num_rows": 1}, "data/test_databases/superhero/superhero.sqlite<$$|||$$>SELECT power_name FROM superpower WHERE id IN (SELECT T2.power_id FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.height_cm > ( SELECT AVG(height_cm) * 0.8 FROM superhero ) )": {"evaluation": "pass: correct", "result": "Accelerated Healing\nAdaptation\nAgility\nAnimal Attributes\nAnimal Oriented Powers\nAstral Projection\nAstral Travel\nCamouflage\nCold Resistance\nCryokinesis\nDanger Sense\nDarkforce Manipulation\nDimensional Awareness\nDimensional Travel\nDuplication\nDurability\nElasticity\nEmpathy\nEnergy Absorption\nEnergy Beams\nEnergy Blasts\nEnergy Constructs\nEnergy Manipulation\nEnergy Resistance\nEnhanced Hearing\nEnhanced Memory\nEnhanced Senses\nEnhanced Sight\nEnhanced Smell\nFire Control\nFire Resistance\nFlight\nForce Fields\nGrim Reaping\nHeat Generation\nHeat Resistance\nIllusions\nImmortality\nIntangibility\nIntelligence\nInvisibility\nInvulnerability\nJump\nLantern Power Ring\nLevitation\nLongevity\nMagic\nMagnetism\nMarksmanship\nMatter Absorption\nMind Blast\nMind Control\nMind Control Resistance\nMolecular Manipulation\nNatural Armor\nNatural Weapons\nOmnilingualism\nPhasing\nPlant Control\nPortal Creation\nPossession\nPower Absorption\nPower Augmentation\nPower Cosmic\nPsionic Powers\nRadiation Absorption\nRadiation Immunity\nReality Warping\nReflexes\nRegeneration\nResurrection\nSelf-Sustenance\nShapeshifting\nSize Changing\nStamina\nStealth\nSub-Mariner\nSubstance Secretion\nSuper Breath\nSuper Speed\nSuper Strength\nSymbiote Costume\nTechnopath/Cyberpath\nTelekinesis\nTelepathy\nTelepathy Resistance\nTeleportation\nThe Force\nTime Travel\nToxin and Disease Resistance\nUnderwater breathing\nVision - Heat\nVision - Microscopic\nVision - Night\nVision - Telescopic\nVision - Thermal\nVision - X-Ray\nVitakinesis\nWallcrawling\nWater Control\nWeapon-based Powers\nWeapons Master\nWeather Control\nWeb Creation", "result_hash": "fe5b449905f9c3d3851034f2041255d4", "num_rows": 104}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.driverRef FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 20 AND T2.q1 = (SELECT MAX(q1) FROM qualifying WHERE raceId = 20) LIMIT 5": {"evaluation": "pass: incorrect", "result": "sato", "result_hash": "f2bab10f9b4bf63118230542566500f6", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT DISTINCT T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 19 AND T2.q2 = ( SELECT T3.MIN FROM qualifying AS T3 WHERE T3.raceId = 19 )": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.MIN", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT DISTINCT T3.year FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN seasons AS T3 ON T2.year = T3.year WHERE T1.location = 'Shanghai'": {"evaluation": "pass: correct", "result": "2004\n2005\n2006\n2007\n2008\n2009\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017", "result_hash": "ff0ae3afa7bf00132424387c1a24bfc9", "num_rows": 14}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Circuit de Barcelona-Catalunya'": {"evaluation": "pass: incorrect", "result": "http://en.wikipedia.org/wiki/1991_Spanish_Grand_Prix\nhttp://en.wikipedia.org/wiki/1992_Spanish_Grand_Prix\nhttp://en.wikipedia.org/wiki/1993_Spanish_Grand_Prix\nhttp://en.wikipedia.org/wiki/1994_Spanish_Grand_Prix\nhttp://en.wikipedia.org/wiki/1995_Spanish_Grand_Prix\nhttp://en.wikipedia.org/wiki/1996_Spanish_Grand_Prix\nhttp://en.wikipedia.org/wiki/1997_Spanish_Grand_Prix\nhttp://en.wikipedia.org/wiki/1998_Spanish_Grand_Prix\nhttp://en.wikipedia.org/wiki/1999_Spanish_Grand_Prix\nhttp://en.wikipedia.org/wiki/2000_Spanish_Grand_Prix\nhttp://en.wikipedia.org/wiki/2001_Spanish_Grand_Prix\nhttp://en.wikipedia.org/wiki/2002_Spanish_Grand_Prix\nhttp://en.wikipedia.org/wiki/2003_Spanish_Grand_Prix\nhttp://en.wikipedia.org/wiki/2004_Spanish_Grand_Prix\nhttp://en.wikipedia.org/wiki/2005_Spanish_Grand_Prix\nhttp://en.wikipedia.org/wiki/2006_Spanish_Grand_Prix\nhttp://en.wikipedia.org/wiki/2007_Spanish_Grand_Prix\nhttp://en.wikipedia.org/wiki/2008_Spanish_Grand_Prix\nhttp://en.wikipedia.org/wiki/2009_Spanish_Grand_Prix\nhttp://en.wikipedia.org/wiki/2010_Spanish_Grand_Prix\nhttp://en.wikipedia.org/wiki/2011_Spanish_Grand_Prix\nhttp://en.wikipedia.org/wiki/2012_Spanish_Grand_Prix\nhttp://en.wikipedia.org/wiki/2013_Spanish_Grand_Prix\nhttp://en.wikipedia.org/wiki/2014_Spanish_Grand_Prix\nhttp://en.wikipedia.org/wiki/2015_Spanish_Grand_Prix\nhttps://en.wikipedia.org/wiki/2016_Spanish_Grand_Prix\nhttps://en.wikipedia.org/wiki/2017_Spanish_Grand_Prix", "result_hash": "2afd4c943495b94043cac514fe6e9ea5", "num_rows": 27}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.country = 'Germany'": {"evaluation": "pass: correct", "result": "European Grand Prix\nGerman Grand Prix\nLuxembourg Grand Prix", "result_hash": "a80d1b294fc4ae1c512cec69633f929b", "num_rows": 3}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T4.name FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T1.name = 'Renault'": {"evaluation": "pass: incorrect", "result": "A1-Ring\nAdelaide Street Circuit\nAutodromo Enzo e Dino Ferrari\nAutodromo Nazionale di Monza\nAutódromo Hermanos Rodríguez\nAutódromo Internacional Nelson Piquet\nAutódromo José Carlos Pace\nAutódromo Juan y Oscar Gálvez\nAutódromo do Estoril\nBahrain International Circuit\nBaku City Circuit\nBrands Hatch\nBuddh International Circuit\nCircuit Gilles Villeneuve\nCircuit Park Zandvoort\nCircuit Paul Ricard\nCircuit de Barcelona-Catalunya\nCircuit de Monaco\nCircuit de Nevers Magny-Cours\nCircuit de Spa-Francorchamps\nCircuit of the Americas\nDetroit Street Circuit\nDijon-Prenois\nFair Park\nFuji Speedway\nHockenheimring\nHungaroring\nIndianapolis Motor Speedway\nIstanbul Park\nJarama\nKorean International Circuit\nKyalami\nLas Vegas Street Circuit\nLong Beach\nMarina Bay Street Circuit\nMosport International Raceway\nNürburgring\nRed Bull Ring\nScandinavian Raceway\nSepang International Circuit\nShanghai International Circuit\nSilverstone Circuit\nSochi Autodrom\nSuzuka Circuit\nValencia Street Circuit\nWatkins Glen\nYas Marina Circuit\nZolder", "result_hash": "a05549c89feff9425e14164d7cc5ebe4", "num_rows": 48}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT COUNT(T1.raceId) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country NOT IN ('Asia', 'Europe') AND T1.year = 2010  AND T2.country IN ('America', 'Africa', 'Australia')": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T3.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId INNER JOIN countries AS T3 ON T2.country = T3.name WHERE T3.name = 'Spain'": {"evaluation": "error: <error>", "result": "Execution error: no such table: countries", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Australian Grand Prix'": {"evaluation": "pass: correct", "result": "-34.927\t138.617", "result_hash": "d9e57c3394022766cfa2e2b56688818d", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T3.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN information_about_races AS T3 ON T2.url = T3.url WHERE T1.name = 'Sepang International Circuit'": {"evaluation": "error: <error>", "result": "Execution error: no such table: information_about_races", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.time FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Sepang International Circuit'": {"evaluation": "pass: correct", "result": "07:00:00\n08:00:00\n09:00:00\n15:00:00\nNone", "result_hash": "4ed7c451399e9ac5dd75948f8fafe896", "num_rows": 5}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T2.lat, T2.lng FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Abu Dhabi Grand Prix'": {"evaluation": "pass: correct", "result": "24.467\t54.603", "result_hash": "26c7af4cbc371290f7f85eeb6c2b28c0", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.country FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitId = T1.circuitId INNER JOIN constructorStandings AS T3 ON T3.raceId = T2.raceId INNER JOIN constructors AS T4 ON T3.constructorId = T4.constructorId WHERE T2.raceId = 24 AND T3.points = 1": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T4.q1 FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T1.forename = 'Bruno' AND T1.surname = 'Senna' AND T2.raceId = 354": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.q1", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T3.nationality FROM qualifying AS T1 INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T1.q2 = '1:40' AND T1.raceId = 355": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.q3 LIKE '0:01%' AND T1.raceId = 903": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT COUNT(DISTINCT T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.name = 'Bahrain Grand Prix' AND T1.year = 2007 AND T2.time IS NULL": {"evaluation": "pass: correct", "result": "12", "result_hash": "bee60442f34c47fe9de7e8b0e99e17dc", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT t2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 901": {"evaluation": "pass: correct", "result": "http://en.wikipedia.org/wiki/2014_Formula_One_season", "result_hash": "3c3c98f52dc54d458b7738f405a7550b", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NOT NULL": {"evaluation": "pass: incorrect", "result": "1033", "result_hash": "24794a0d287c609b7a13c7c34da90102", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.driverRef FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 592 ORDER BY DATE(T1.dob) ASC LIMIT 1": {"evaluation": "pass: incorrect", "result": "hill", "result_hash": "118088c4d6f6fd4b6284c2aba9a4cd0c", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T2.url FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.raceId = 161 AND T2.time LIKE 'M:01:27'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.url", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T3.forename, T3.sourced FROM drivers AS T3 INNER JOIN results AS T4 ON T3.driverId = T4.driverId INNER JOIN races AS T2 ON T4.raceId = T2.raceId WHERE T2.raceId = 933 AND T4.fastestLapSpeed = (SELECT T1.fastestLapSpeed FROM results AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.raceId = 933 AND T2.fastestLapSpeed IS NULL)": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.sourced", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT C.lat, C.lng FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE R.name = 'Malaysian Grand Prix'": {"evaluation": "pass: correct", "result": "2.761\t101.738", "result_hash": "e12ff1856a8e44b39639832f53c6ccaa", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T3.url FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T1.raceId = 9 ORDER BY T1.points DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "http://en.wikipedia.org/wiki/2009_German_Grand_Prix", "result_hash": "43ee460abbcb98a803710b08b713c3a2", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 345 AND T2.surname = 'di Grassi' AND T2.forename = 'Lucas'": {"evaluation": "pass: correct", "result": "1:42.086", "result_hash": "72de0c67be76bf96e6b59094261ff215", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.q2 = '1:15' AND T1.raceId = 347": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.qualifyId = ( SELECT DISTINCT T3.qualifyId FROM qualifying AS T3 WHERE T3.raceId = 45 AND T3.q3 LIKE '0:01:%' )": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.code", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T5.time FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId INNER JOIN results AS T3 ON T2.raceId = T3.raceId INNER JOIN races AS T4 ON T2.raceId = T4.raceId INNER JOIN lapTimes AS T5 ON T3.raceId = T5.raceId WHERE T1.forename = 'Bruce' AND T1.surname = 'McLaren' AND T4.raceId = 743": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceID = T3.RaceId WHERE YEAR(T3.date) = 2006 AND T3.name = 'San Marino Grand Prix' AND T2.position = 2": {"evaluation": "error: <error>", "result": "Execution error: no such function: YEAR", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.url FROM seasons AS T1 INNER JOIN races AS T2 ON T2.year = T1.year WHERE T2.raceId = 901": {"evaluation": "pass: correct", "result": "http://en.wikipedia.org/wiki/2014_Formula_One_season", "result_hash": "3c3c98f52dc54d458b7738f405a7550b", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT COUNT(DISTINCT T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2009 AND T1.statusId = 3": {"evaluation": "pass: incorrect", "result": "8", "result_hash": "449241f4ab7d3505b13ff1a180b6297e", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers INNER JOIN results ON drivers.driverId = results.driverId WHERE results.raceId = 872 AND results.time IS NOT NULL ORDER BY drivers.dob DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "Sergio\tPérez\t1990-01-26", "result_hash": "42ed496508f496af45dee5ba96b7b440", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN qualifying AS T3 ON T1.driverId = T3.driverId WHERE T3.raceId = 348 OR T2.raceId = 348 OR T3.raceId = 348 ORDER BY T2.time ASC LIMIT 1": {"evaluation": "pass: incorrect", "result": "Timo\tGlock", "result_hash": "e91e5815f38a430610b05e29393a07e6", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId INNER JOIN constructorResults AS T3 ON T2.constructorId = T3.constructorId WHERE T2.fastestLapSpeed = ( SELECT MAX(T2.fastestLapSpeed) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId )": {"evaluation": "pass: correct", "result": "Italian", "result_hash": "fc609252558d08a56af28bd555894454", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT CAST(SUBSTR(T2.fastestLapSpeed FROM INDEX(T2.fastestLapSpeed, ':') + 1) - (SELECT SUBSTR(T3.fastestLapSpeed FROM INDEX(T3.fastestLapSpeed, ':') + 1) FROM results AS T3 WHERE T3.raceId = 854), T2.fastestLapSpeed FROM results AS T2 WHERE T2.raceId = 853 AND T2.driverId = (SELECT driverId FROM drivers WHERE.friendsname = 'Paul di Resta' AND surname = 'di Resta') * 100)": {"evaluation": "error: <error>", "result": "Execution error: near \"FROM\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT CAST(SUM(CASE \n                WHEN results.date = '1983-07-16' THEN 1\n                ELSE 0\n            END) AS REAL) / COUNT(results.driverId) * 100 FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId": {"evaluation": "error: <error>", "result": "Execution error: no such column: results.driverId", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T2.year FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Singapore' ORDER BY T1.year ASC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.year", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT COUNT(T1.name) AS count FROM races AS T1 WHERE T1.year = 2005 ORDER BY T1.date DESC": {"evaluation": "pass: incorrect", "result": "19", "result_hash": "e0561b1d9ef0534e1e0e0a0bda0a9407", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT r.name FROM races AS r INNER JOIN seasons AS s ON r.year = s.year WHERE r.year = (SELECT MIN(year) FROM seasons)": {"evaluation": "pass: incorrect", "result": "Belgian Grand Prix\nBritish Grand Prix\nFrench Grand Prix\nIndianapolis 500\nItalian Grand Prix\nMonaco Grand Prix\nSwiss Grand Prix", "result_hash": "a25be554faf0784fbf757ccec842e216", "num_rows": 7}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.name, T1.date FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.year = 1999 ORDER BY T1.round DESC LIMIT 1": {"evaluation": "pass: correct", "result": "Japanese Grand Prix\t1999-10-31", "result_hash": "99126f724e6f914dc0d327bd1bb50bcb", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT year FROM races GROUP BY year ORDER BY COUNT(raceId) DESC LIMIT 1": {"evaluation": "pass: correct", "result": "2016", "result_hash": "efb69387b886217d99e4a61116354545", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.name FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T2.year = 2000 AND T1.year != 2000": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T3.country, T4.name, T4.location FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId INNER JOIN seasons AS T3 ON T1.year = T3.year INNER JOIN circuits AS T4 ON T2.circuitId = T4.circuitId WHERE T3.year IN (SELECT MIN(year) FROM seasons) AND T1.name = 'European Grand Prix'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.country", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT DISTINCT T1.date FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Brands Hatch' AND T1.year = ( SELECT MAX(year) FROM races )": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT COUNT(T1.year) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Silverstone Circuit' AND T1.name = 'British Grand Prix'": {"evaluation": "pass: correct", "result": "51", "result_hash": "5017d620f46fb47e99b3fdfdd69af8d3", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'Singapore Grand Prix' AND T3.year = 2010 ORDER BY T2.position": {"evaluation": "pass: correct", "result": "Adrian\tSutil\nBruno\tSenna\nChristian\tKlien\nFelipe\tMassa\nFernando\tAlonso\nHeikki\tKovalainen\nJaime\tAlguersuari\nJarno\tTrulli\nJenson\tButton\nKamui\tKobayashi\nKarun\tChandhok\nLewis\tHamilton\nLucas\tdi Grassi\nMark\tWebber\nMichael\tSchumacher\nNick\tHeidfeld\nNico\tHülkenberg\nNico\tRosberg\nPedro\tde la Rosa\nRobert\tKubica\nRubens\tBarrichello\nSakon\tYamamoto\nSebastian\tVettel\nSébastien\tBuemi\nTimo\tGlock\nVitaly\tPetrov\nVitantonio\tLiuzzi", "result_hash": "8aafaf7e4a047ce70143176854056a6c", "num_rows": 27}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T3.forename, T3.surname, MAX(T2.points) FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN results AS T3 ON T1.driverId = T3.driverId GROUP BY T2.driverId ORDER BY MAX(T2.points) DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.forename", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT D.forename, D.surname, RS.points FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId INNER JOIN driverStandings AS RS ON R.driverId = RS.driverId WHERE R.raceId = (SELECT T2.raceId FROM races AS T1 INNER JOIN constructorResults AS T2 ON T1.raceId = T2.raceId WHERE T1.year = 2017 AND T1.circuitId = (SELECT T3.circuitId FROM circuits AS T3 WHERE T3.name = 'Shanghai International Circuit') LIMIT 1) ORDER BY RS.points DESC LIMIT 3": {"evaluation": "pass: incorrect", "result": "Lewis\tHamilton\t384.000\nSebastian\tVettel\t392.000\nSebastian\tVettel\t397.000", "result_hash": "de493f28089c1b538f4d2dcf6d6466bf", "num_rows": 3}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.name, T3.forename, T3.surname, MIN(T2.time) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId": {"evaluation": "pass: incorrect", "result": "British Grand Prix\tAnthony\tDavidson\t10:32.179", "result_hash": "e5fbaa7dde4fda3cc7528deb9c99164e", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT CAST(SUM(T2.lapTimes.MILLISECONDS) AS REAL) / COUNT(T2.lapTimes.lap) \nFROM drivers AS T1 \nINNER JOIN lapTimes AS T2 ON T2.driverId = T1.driverId \nINNER JOIN races AS T3 ON T3.raceId = T2.raceId \nWHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.date LIKE '2009-%' AND T3.name LIKE '%Grand Prix%'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.lapTimes.lap", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T2.surname = 'Hamilton' AND T1.position > 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year >= 2010": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.surname", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T5.name, T5.nationality, MAX(T1.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId LEFT JOIN constructors AS T5 ON T4.constructorId = T5.constructorId WHERE T4.wins = ( SELECT MAX(wins) FROM driverStandings ) GROUP BY T4.wins": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.points", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT (YEAR(CURRENT_TIMESTAMP) - (SELECT DISTINCT YEAR(dob) FROM drivers WHERE nationality = 'Japanese' ORDER BY YEAR(dob) LIMIT 1)) - (YEAR(dob)), surname FROM drivers WHERE nationality = 'Japanese' ORDER BY YEAR(dob) LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such function: YEAR", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T5.name FROM seasons AS T1 INNER JOIN races AS T2 ON T1.year = T2.year INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId INNER JOIN driverStandings AS T4 ON T2.raceId = T4.raceId INNER JOIN lapTimes AS T5 ON T2.raceId = T5.raceId WHERE T5.driverId IN ( SELECT driverId FROM driverStandings AS T6 WHERE T6.raceId IN ( SELECT raceId FROM races WHERE T1.year BETWEEN 1990 AND 2000 GROUP BY name GROUP BY day_id, description/name ) GROUP BY sales) OR name GROUP T4.category EXIST части SELECT year_id'S ),.": {"evaluation": "error: <error>", "result": "Execution error: near \"GROUP\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T2.name, T2.location, T1.`name` FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.`year` = 2006 AND T2.country = 'USA'": {"evaluation": "pass: correct", "result": "Indianapolis Motor Speedway\tIndianapolis\tUnited States Grand Prix", "result_hash": "4ad89c248c84b68912f32b4ed5437b5c", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T3.name, T3.name, T3.location FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId INNER JOIN T3 ON T1.raceId = T3.raceId WHERE strftime('%Y-%m', T3.date) = '2005-09' AND T1.year = 2005": {"evaluation": "error: <error>", "result": "Execution error: no such table: T3", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.name, T2.driverId, T2.raceId, T1.round FROM races AS T1 INNER JOIN qualifying AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Alexander' AND T3.surname = 'Yoong' AND T2.position < 20": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT COUNT(T1.statusId) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN circuits AS T3 ON T1.raceId = ( SELECT T4.raceId FROM races AS T4 INNER JOIN drivers AS T5 ON T4.year = ( SELECT year FROM seasons WHERE year = ( SELECT year FROM constructorStandings WHERE constructorId = ( SELECT T6.constructorId FROM constructors AS T6 WHERE T6.name = 'Ferrari' ) ) ) AND T4.circuitId = T3.circuitId AND T4.date <= 'Monday' GROUP BY chore不会 installs BETWEEN select frauds diversity    WHERE RIGHT T5.days FROM without attribute refers to attribute_value = 'None'": {"evaluation": "error: <error>", "result": "Execution error: near \"installs\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.name, T1.year \nFROM races AS T1 \nINNER JOIN results AS T2 ON T2.raceId = T1.raceId \nINNER JOIN drivers AS T3 ON T3.driverId = T2.driverId \nWHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY T2.fastestLapTime ASC LIMIT 1": {"evaluation": "pass: incorrect", "result": "Australian Grand Prix\t2003", "result_hash": "72335cf800f5f79f6117a0a548a67d4d", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT AVG(T2.points * T4.headcount) AS count FROM drivers AS T1 INNER JOIN results AS T2 ON T3.driverId = T2.driverId INNER JOIN constructorResults AS T3 ON T1.driverId = T3.driverId INNER JOIN ( SELECT year, COUNT(raceId) AS headcount FROM results GROUP BY year ) AS T4 ON T2.raceId = T4.raceId AND T2.year = T4.year AND T2.constructorId = T3.constructorId WHERE T1.surname = 'Irvine' AND T4.year = 2000": {"evaluation": "error: <error>", "result": "Execution error: no such column: year", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT MIN(T3.raceId), T2.points FROM results AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T1.raceId INNER JOIN drivers AS T4 ON T4.driverId = T2.driverId WHERE T2.forename || ' ' || T2.surname = 'Lewis Hamilton'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.points", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.name, T6.country FROM races AS T1 INNER JOIN circuits AS T6 ON T1.circuitId = T6.circuitId WHERE T1.year = 2017 ORDER BY T1.date": {"evaluation": "pass: correct", "result": "Abu Dhabi Grand Prix\tUAE\nAustrian Grand Prix\tAustria\nAzerbaijan Grand Prix\tAzerbaijan\nBahrain Grand Prix\tBahrain\nBelgian Grand Prix\tBelgium\nBrazilian Grand Prix\tBrazil\nBritish Grand Prix\tUK\nCanadian Grand Prix\tCanada\nChinese Grand Prix\tChina\nHungarian Grand Prix\tHungary\nItalian Grand Prix\tItaly\nJapanese Grand Prix\tJapan\nMalaysian Grand Prix\tMalaysia\nMexican Grand Prix\tMexico\nMonaco Grand Prix\tMonaco\nRussian Grand Prix\tRussia\nSingapore Grand Prix\tSingapore\nSpanish Grand Prix\tSpain\nUnited States Grand Prix\tUSA", "result_hash": "6ebff039dc41ee0a9120a05c7222b6ae", "num_rows": 19}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T3.name, T1.year, T4.location, T5.laps FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN seasons AS T3 ON T1.year = T3.year INNER JOIN circuits AS T4 ON T1.circuitId = T4.circuitId INNER JOIN results AS T5 ON T5.raceId = ( SELECT MAX(T6.laps) FROM results AS T6 )": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.name", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT  CAST(SUM(CASE WHEN T2.country = 'Germany' THEN 1 ELSE 0 END) AS REAL ) * 100 / COUNT(CASE WHEN T2.name LIKE '%Grand Prix' THEN 1 ELSE 0 END) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'European Grand Prix'": {"evaluation": "pass: correct", "result": "52.174", "result_hash": "dfe9a5c22ea3a13921cca8c40c3c379f", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'": {"evaluation": "pass: correct", "result": "52.079\t-1.017", "result_hash": "13fb6af524103fea591effb63194db8b", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T2.name FROM circuits AS T1 INNER JOIN circuits AS T2 ON T1.lat < T2.lat WHERE T2.name IN ('Silverstone Circuit','Hockenheimring','Hungaroring')": {"evaluation": "pass: incorrect", "result": "Hockenheimring\nHungaroring\nSilverstone Circuit", "result_hash": "ae27134a90c57f0c47e49f5d239a2ed3", "num_rows": 3}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T2.circuitRef FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Marina Bay Street Circuit'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.circuitRef", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T4.country FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN seasons AS T3 ON T2.year = T3.year INNER JOIN ( SELECT MAX(alt) AS max_alt, circuitId FROM circuits GROUP BY circuitId ) AS T4 ON T1.circuitId = T4.circuitId WHERE T4.max_alt = T1.alt": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.country", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT COUNT(driverId) FROM drivers WHERE code IS NULL": {"evaluation": "pass: correct", "result": "757", "result_hash": "9aef44ea7bb7d7d3cc008f1a0378517f", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T2.country FROM drivers AS T1 INNER JOIN circuits AS T2 ON T2.circuitId = (\n    SELECT T5.circuitId \n    FROM (\n        SELECT MAX(hoping (age(T1.dob))) as Biggest \n        FROM drivers AS T1\n    ) as T4\n    INNER JOIN circuits AS T5 ON T4.Bigggest IS NOT NULL\n)": {"evaluation": "error: <error>", "result": "Execution error: no such function: age", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT surname FROM drivers WHERE nationality = 'Italian'": {"evaluation": "pass: correct", "result": "Abate\nAlboreto\nAmati\nApicella\nAscari\nBadoer\nBaghetti\nBaldi\nBandini\nBarbazza\nBarilla\nBassi\nBertaggia\nBiondetti\nBoffa\nBonetto\nBrambilla\nBrancatelli\nBruni\nBussinello\nCabianca\nCaffi\nCapelli\nCarini\nCastellotti\nColombo\nComotti\nDrogo\nDusio\nFabi\nFacetti\nFagioli\nFarina\nFisichella\nFranchi\nFrancia\nGabbiani\nGalli\nGerini\nGhinzani\nGiacomelli\nGiovinazzi\nGiunti\nLanges\nLarini\nLavaggi\nLeoni\nLippi\nLiuzzi\nLombardi\nMaglioli\nMantovani\nMartini\nMerzario\nModena\nMontermini\nMorbidelli\nMunaron\nMusso\nNannini\nNaspetti\nNatili\nPagani\nPaletti\nPantano\nPapis\nPatrese\nPerdisa\nPesenti-Rossi\nPiotti\nPirocchi\nPirro\nPrinoth\nRol\nRusso\nSanesi\nScarfiotti\nScarlatti\nSchiattarella\nScotti\nSerafini\nSospiri\nStarrabba\nStohr\nTaramazzo\nTarquini\nTaruffi\nTrulli\nVaccarella\nVilloresi\nZanardi\nZorzi\nde Adamich\nde Angelis\nde Cesaris\nde Filippis\nde Riu", "result_hash": "3b7121535a24300e61a1a2b4fc866e86", "num_rows": 97}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT drivers.url FROM drivers WHERE drivers.forename = 'Anthony'": {"evaluation": "pass: incorrect", "result": "http://en.wikipedia.org/wiki/A.J._Foyt\nhttp://en.wikipedia.org/wiki/Anthony_Davidson", "result_hash": "9f98fc8f1aaa4dc6d1b22ab2403b72e2", "num_rows": 2}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'": {"evaluation": "pass: correct", "result": "hamilton", "result_hash": "11e2f98e396ad81f0310001760f39134", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T3.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.name", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Silverstone Circuit'": {"evaluation": "pass: correct", "result": "1950\n1951\n1952\n1953\n1954\n1956\n1958\n1960\n1963\n1965\n1967\n1969\n1971\n1973\n1975\n1977\n1979\n1981\n1983\n1985\n1987\n1988\n1989\n1990\n1991\n1992\n1993\n1994\n1995\n1996\n1997\n1998\n1999\n2000\n2001\n2002\n2003\n2004\n2005\n2006\n2007\n2008\n2009\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017", "result_hash": "d318d75489a080ae6dc8bbc8dfb1310b", "num_rows": 51}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.name, T2.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Silverstone Circuit'": {"evaluation": "pass: incorrect", "result": "British Grand Prix\thttp://en.wikipedia.org/wiki/Silverstone_Circuit", "result_hash": "1232d7acd7863c28f2b04456d6f07196", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.time FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year = 2010 AND T2.name LIKE 'Abu Dhabi%'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT COUNT(T1.raceId) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Italy'": {"evaluation": "pass: correct", "result": "95", "result_hash": "49e9f2fb61164c32acc86dd509d2768e", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T4.name, T1.date FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId INNER JOIN results AS T3 ON T1.raceId = T3.raceId INNER JOIN constructors AS T4 ON T3.constructorId = T4.constructorId WHERE T2.circuitRef = 'catalunya'": {"evaluation": "pass: incorrect", "result": "AGS\t1991-09-29\nAndrea Moda\t1992-05-03\nArrows\t1997-05-25\nArrows\t1998-05-10\nArrows\t1999-05-30\nArrows\t2000-05-07\nArrows\t2001-04-29\nArrows\t2002-04-28\nBAR\t1999-05-30\nBAR\t2000-05-07\nBAR\t2001-04-29\nBAR\t2002-04-28\nBAR\t2003-05-04\nBAR\t2004-05-09\nBMW Sauber\t2006-05-14\nBMW Sauber\t2007-05-13\nBMW Sauber\t2008-04-27\nBMW Sauber\t2009-05-10\nBenetton\t1991-09-29\nBenetton\t1992-05-03\nBenetton\t1993-05-09\nBenetton\t1994-05-29\nBenetton\t1995-05-14\nBenetton\t1996-06-02\nBenetton\t1997-05-25\nBenetton\t1998-05-10\nBenetton\t1999-05-30\nBenetton\t2000-05-07\nBenetton\t2001-04-29\nBrabham\t1991-09-29\nBrabham\t1992-05-03\nBrawn\t2009-05-10\nCaterham\t2012-05-13\nCaterham\t2013-05-12\nCaterham\t2014-05-11\nDallara\t1991-09-29\nDallara\t1992-05-03\nFerrari\t1991-09-29\nFerrari\t1992-05-03\nFerrari\t1993-05-09\nFerrari\t1994-05-29\nFerrari\t1995-05-14\nFerrari\t1996-06-02\nFerrari\t1997-05-25\nFerrari\t1998-05-10\nFerrari\t1999-05-30\nFerrari\t2000-05-07\nFerrari\t2001-04-29\nFerrari\t2002-04-28\nFerrari\t2003-05-04\nFerrari\t2004-05-09\nFerrari\t2005-05-08\nFerrari\t2006-05-14\nFerrari\t2007-05-13\nFerrari\t2008-04-27\nFerrari\t2009-05-10\nFerrari\t2010-05-09\nFerrari\t2011-05-22\nFerrari\t2012-05-13\nFerrari\t2013-05-12\nFerrari\t2014-05-11\nFerrari\t2015-05-10\nFerrari\t2016-05-15\nFerrari\t2017-05-14\nFondmetal\t1991-09-29\nFondmetal\t1992-05-03\nFootwork\t1991-09-29\nFootwork\t1992-05-03\nFootwork\t1993-05-09\nFootwork\t1994-05-29\nFootwork\t1995-05-14\nFootwork\t1996-06-02\nForce India\t2008-04-27\nForce India\t2009-05-10\nForce India\t2010-05-09\nForce India\t2011-05-22\nForce India\t2012-05-13\nForce India\t2013-05-12\nForce India\t2014-05-11\nForce India\t2015-05-10\nForce India\t2016-05-15\nForce India\t2017-05-14\nForti\t1995-05-14\nForti\t1996-06-02\nHRT\t2010-05-09\nHRT\t2011-05-22\nHRT\t2012-05-13\nHaas F1 Team\t2016-05-15\nHaas F1 Team\t2017-05-14\nHonda\t2006-05-14\nHonda\t2007-05-13\nHonda\t2008-04-27\nJaguar\t2000-05-07\nJaguar\t2001-04-29\nJaguar\t2002-04-28\nJaguar\t2003-05-04\nJaguar\t2004-05-09\nJordan\t1991-09-29\nJordan\t1992-05-03\nJordan\t1993-05-09\nJordan\t1994-05-29\nJordan\t1995-05-14\nJordan\t1996-06-02\nJordan\t1997-05-25\nJordan\t1998-05-10\nJordan\t1999-05-30\nJordan\t2000-05-07\nJordan\t2001-04-29\nJordan\t2002-04-28\nJordan\t2003-05-04\nJordan\t2004-05-09\nJordan\t2005-05-08\nLambo\t1991-09-29\nLarrousse\t1992-05-03\nLarrousse\t1993-05-09\nLarrousse\t1994-05-29\nLeyton House\t1991-09-29\nLigier\t1991-09-29\nLigier\t1992-05-03\nLigier\t1993-05-09\nLigier\t1994-05-29\nLigier\t1995-05-14\nLigier\t1996-06-02\nLola\t1991-09-29\nLola\t1993-05-09\nLotus\t2010-05-09\nLotus\t2011-05-22\nLotus F1\t2012-05-13\nLotus F1\t2013-05-12\nLotus F1\t2014-05-11\nLotus F1\t2015-05-10\nMF1\t2006-05-14\nManor Marussia\t2015-05-10\nManor Marussia\t2016-05-15\nMarch\t1992-05-03\nMarussia\t2012-05-13\nMarussia\t2013-05-12\nMarussia\t2014-05-11\nMcLaren\t1991-09-29\nMcLaren\t1992-05-03\nMcLaren\t1993-05-09\nMcLaren\t1994-05-29\nMcLaren\t1995-05-14\nMcLaren\t1996-06-02\nMcLaren\t1997-05-25\nMcLaren\t1998-05-10\nMcLaren\t1999-05-30\nMcLaren\t2000-05-07\nMcLaren\t2001-04-29\nMcLaren\t2002-04-28\nMcLaren\t2003-05-04\nMcLaren\t2004-05-09\nMcLaren\t2005-05-08\nMcLaren\t2006-05-14\nMcLaren\t2007-05-13\nMcLaren\t2008-04-27\nMcLaren\t2009-05-10\nMcLaren\t2010-05-09\nMcLaren\t2011-05-22\nMcLaren\t2012-05-13\nMcLaren\t2013-05-12\nMcLaren\t2014-05-11\nMcLaren\t2015-05-10\nMcLaren\t2016-05-15\nMcLaren\t2017-05-14\nMercedes\t2010-05-09\nMercedes\t2011-05-22\nMercedes\t2012-05-13\nMercedes\t2013-05-12\nMercedes\t2014-05-11\nMercedes\t2015-05-10\nMercedes\t2016-05-15\nMercedes\t2017-05-14\nMinardi\t1991-09-29\nMinardi\t1992-05-03\nMinardi\t1993-05-09\nMinardi\t1994-05-29\nMinardi\t1995-05-14\nMinardi\t1996-06-02\nMinardi\t1997-05-25\nMinardi\t1998-05-10\nMinardi\t1999-05-30\nMinardi\t2000-05-07\nMinardi\t2001-04-29\nMinardi\t2002-04-28\nMinardi\t2003-05-04\nMinardi\t2004-05-09\nMinardi\t2005-05-08\nPacific\t1994-05-29\nPacific\t1995-05-14\nProst\t1997-05-25\nProst\t1998-05-10\nProst\t1999-05-30\nProst\t2000-05-07\nProst\t2001-04-29\nRed Bull\t2005-05-08\nRed Bull\t2006-05-14\nRed Bull\t2007-05-13\nRed Bull\t2008-04-27\nRed Bull\t2009-05-10\nRed Bull\t2010-05-09\nRed Bull\t2011-05-22\nRed Bull\t2012-05-13\nRed Bull\t2013-05-12\nRed Bull\t2014-05-11\nRed Bull\t2015-05-10\nRed Bull\t2016-05-15\nRed Bull\t2017-05-14\nRenault\t2002-04-28\nRenault\t2003-05-04\nRenault\t2004-05-09\nRenault\t2005-05-08\nRenault\t2006-05-14\nRenault\t2007-05-13\nRenault\t2008-04-27\nRenault\t2009-05-10\nRenault\t2010-05-09\nRenault\t2011-05-22\nRenault\t2016-05-15\nRenault\t2017-05-14\nSauber\t1993-05-09\nSauber\t1994-05-29\nSauber\t1995-05-14\nSauber\t1996-06-02\nSauber\t1997-05-25\nSauber\t1998-05-10\nSauber\t1999-05-30\nSauber\t2000-05-07\nSauber\t2001-04-29\nSauber\t2002-04-28\nSauber\t2003-05-04\nSauber\t2004-05-09\nSauber\t2005-05-08\nSauber\t2010-05-09\nSauber\t2011-05-22\nSauber\t2012-05-13\nSauber\t2013-05-12\nSauber\t2014-05-11\nSauber\t2015-05-10\nSauber\t2016-05-15\nSauber\t2017-05-14\nSimtek\t1994-05-29\nSimtek\t1995-05-14\nSpyker\t2007-05-13\nStewart\t1997-05-25\nStewart\t1998-05-10\nStewart\t1999-05-30\nSuper Aguri\t2006-05-14\nSuper Aguri\t2007-05-13\nSuper Aguri\t2008-04-27\nTeam Lotus\t1991-09-29\nTeam Lotus\t1992-05-03\nTeam Lotus\t1993-05-09\nTeam Lotus\t1994-05-29\nToro Rosso\t2006-05-14\nToro Rosso\t2007-05-13\nToro Rosso\t2008-04-27\nToro Rosso\t2009-05-10\nToro Rosso\t2010-05-09\nToro Rosso\t2011-05-22\nToro Rosso\t2012-05-13\nToro Rosso\t2013-05-12\nToro Rosso\t2014-05-11\nToro Rosso\t2015-05-10\nToro Rosso\t2016-05-15\nToro Rosso\t2017-05-14\nToyota\t2002-04-28\nToyota\t2003-05-04\nToyota\t2004-05-09\nToyota\t2005-05-08\nToyota\t2006-05-14\nToyota\t2007-05-13\nToyota\t2008-04-27\nToyota\t2009-05-10\nTyrrell\t1991-09-29\nTyrrell\t1992-05-03\nTyrrell\t1993-05-09\nTyrrell\t1994-05-29\nTyrrell\t1995-05-14\nTyrrell\t1996-06-02\nTyrrell\t1997-05-25\nTyrrell\t1998-05-10\nVirgin\t2010-05-09\nVirgin\t2011-05-22\nWilliams\t1991-09-29\nWilliams\t1992-05-03\nWilliams\t1993-05-09\nWilliams\t1994-05-29\nWilliams\t1995-05-14\nWilliams\t1996-06-02\nWilliams\t1997-05-25\nWilliams\t1998-05-10\nWilliams\t1999-05-30\nWilliams\t2000-05-07\nWilliams\t2001-04-29\nWilliams\t2002-04-28\nWilliams\t2003-05-04\nWilliams\t2004-05-09\nWilliams\t2005-05-08\nWilliams\t2006-05-14\nWilliams\t2007-05-13\nWilliams\t2008-04-27\nWilliams\t2009-05-10\nWilliams\t2010-05-09\nWilliams\t2011-05-22\nWilliams\t2012-05-13\nWilliams\t2013-05-12\nWilliams\t2014-05-11\nWilliams\t2015-05-10\nWilliams\t2016-05-15\nWilliams\t2017-05-14", "result_hash": "a59cb6adee1fd3207396c3e409e6c122", "num_rows": 311}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T4.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId INNER JOIN constructors AS T3 ON T1.year = 2009 INNER JOIN circuits AS T4 ON T2.circuitId = T4.circuitId WHERE T3.constructorRef = 'williams' AND T1.name = 'Spanish Grand Prix'": {"evaluation": "pass: correct", "result": "http://en.wikipedia.org/wiki/Circuit_de_Barcelona-Catalunya", "result_hash": "378e020a88fc2d7c87af7f6ff2e470cc", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT MIN(T5.fastestLapTime) \nFROM drivers AS T1 \nINNER JOIN results AS T2 ON T1.driverId = T2.driverId \nINNER JOIN races AS T3 ON T2.raceId = T3.raceId \nINNER JOIN results AS T4 ON T4.raceId = T3.raceId AND T4.position = 1 \nINNER JOIN results AS T5 ON T5.raceId = T3.raceId \nWHERE T1.surname = 'Hamilton'": {"evaluation": "pass: correct", "result": "1:07.411", "result_hash": "edc7806b93c5be420f5d43a9c814ec86", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T2.time = ( SELECT T2.time FROM races AS T4 INNER JOIN lapTimes AS T5 ON T4.raceId = T5.raceId INNER JOIN drivers AS T6 ON T6.driverId = T5.driverId ORDER BY T5.time ASC LIMIT 1 )": {"evaluation": "error: timeout", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.driverRef FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = ( SELECT T3.raceId FROM races AS T3 WHERE T3.name = 'Canadian Grand Prix' AND T3.year = 2007 ) AND T2.position = 1": {"evaluation": "pass: incorrect", "result": "hamilton", "result_hash": "11e2f98e396ad81f0310001760f39134", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T2.raceId FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'": {"evaluation": "pass: incorrect", "result": "1\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n2\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n3\n30\n31\n32\n33\n337\n338\n339\n34\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n35\n350\n351\n352\n353\n354\n355\n36\n37\n38\n39\n4\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n5\n50\n51\n52\n6\n7\n8\n841\n842\n843\n844\n845\n846\n847\n848\n849\n850\n851\n852\n853\n854\n855\n856\n857\n858\n859\n860\n861\n862\n863\n864\n865\n866\n867\n868\n869\n870\n871\n872\n873\n874\n875\n876\n877\n878\n879\n880\n881\n882\n883\n884\n885\n886\n887\n888\n890\n891\n892\n893\n894\n895\n896\n897\n898\n899\n9\n900\n901\n902\n903\n904\n905\n906\n907\n908\n909\n910\n911\n912\n913\n914\n915\n916\n917\n918\n926\n927\n928\n929\n930\n931\n932\n933\n934\n936\n937\n938\n939\n940\n941\n942\n943\n944\n945\n948\n949\n950\n951\n952\n953\n954\n955\n956\n957\n958\n959\n960\n961\n962\n963\n964\n965\n966\n967\n968\n969\n970\n971\n972\n973\n974\n975\n976\n977\n978\n979\n980\n981\n982", "result_hash": "6b3c6dbd63e6972263d6aa28e9d38390", "num_rows": 202}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T4.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T4 ON T2.raceId = T4.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' ORDER BY T2.rank LIMIT 1": {"evaluation": "pass: incorrect", "result": "Belgian Grand Prix", "result_hash": "870356a8061dd4e16ba21ef0d7158825", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT DISTINCT T5.fastestLapSpeed FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN constructorResults AS T3 ON T1.constructorId = T3.constructorId INNER JOIN constructorStandings AS T4 ON T2.driverId = T4.driverId INNER JOIN races AS T5 ON T1.raceId = T5.raceId INNER JOIN results AS T6 ON T2.driverId = T6.driverId AND T5.raceId = T6.raceId WHERE T5.name = 'Spanish Grand Prix'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T5.fastestLapSpeed", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T2.year FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.year", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.positionOrder FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T2.name = 'Chinese Grand Prix' AND T2.year = 2008": {"evaluation": "pass: correct", "result": "1", "result_hash": "40f1fb91cd3bfacd97c83113575324a9", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'Australian Grand Prix' AND T3.year = 2009 AND T2.grid = 4": {"evaluation": "pass: incorrect", "result": "Robert\tKubica", "result_hash": "ff1d292aad868dd550d333d8f9dae85e", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT COUNT(T1.driverId) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND T2.year = 2008": {"evaluation": "pass: incorrect", "result": "746", "result_hash": "f8eb9e073cf96cfd459eae990aebd637", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T3.time FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.surname = 'Hamilton' AND T3.name = 'Australian Grand Prix' AND T3.year = 2008 AND T2.position = 1": {"evaluation": "pass: incorrect", "result": "04:30:00", "result_hash": "41e82639d090884b36ca6c773febc0a4", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T5.time FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId INNER JOIN results AS T4 ON T4.raceId = T3.raceId AND T1.driverId = T4.driverId AND T4.position = 2 INNER JOIN laptimes AS T5 ON T5.raceId = T3.raceId AND T5.driverId = T4.driverId AND T5.lap = T4.fastestl_e AS user_lacs IS T11 WHERE T2 is \"LATEST WHERE T2 IS  =  WHERE T2.user_id = T4._ WHERE T3.year = 2008 AND T3.name = 'Australian Grand Prix'": {"evaluation": "error: <error>", "result": "Execution error: near \"AS\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T2.driverId, T3.url FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.name = 'Australian Grand Prix' AND T1.year = 2008 AND T2.points = 10.0": {"evaluation": "pass: incorrect", "result": "1\thttp://en.wikipedia.org/wiki/Lewis_Hamilton", "result_hash": "bde7f7942e11d121c9e0b32b96f69f37", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT COUNT(*) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = ( SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008 ) AND T1.nationality = 'British'": {"evaluation": "pass: correct", "result": "4", "result_hash": "6d99635c04712ac4b225709f436b6264", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.statusId = 1 AND T2.raceId = ( SELECT raceId FROM races WHERE name = 'Chinese Grand Prix' AND year = 2008 ) AND T1.driverId IN ( SELECT T1.driverId FROM qualifying AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.raceId = ( SELECT raceId FROM races WHERE name = 'Chinese Grand Prix' AND location = 'Phoenix' AND location in external knowledge refers, location within knowledge is Phoenix appeared to have in this particular=pattern SET city=Glendalpaceand 'Chinese Grand Prix' ) AND T2.statusId = 1 GROUP BY T1.driverId HAVING COUNT(raceId) > 0 )": {"evaluation": "error: <error>", "result": "Execution error: near \"knowledge\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT SUM(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'": {"evaluation": "pass: incorrect", "result": "24509.000", "result_hash": "a59d15ec935eb5658fb6e9f5d6aa49fd", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT CAST(SUM(SUBSTR(substr(fastestLapTime, INSTR(fastestLapTime, ':'), -1), 1, 3) * 60 + SUBSTR(substr(fastestLapTime, LENGTH(fastestLapTime) - 5, 3), 1, 2)) AS REAL) / (SELECT COUNT(*) FROM results WHERE surname = 'Hamilton') AS average FROM results WHERE surname = 'Hamilton'": {"evaluation": "error: <error>", "result": "Execution error: no such column: surname", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T4.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) / COUNT(T4.raceId) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId INNER JOIN results AS T4 ON T1.raceId = T4.raceId WHERE T1.name = 'Australian Grand Prix' AND T1.year = 2008": {"evaluation": "pass: incorrect", "result": "0.227", "result_hash": "3d9099981accdaa36731cd7f1c948241", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT (strftime('%J', STRFTIME('%H%M%S.%N',T1.time)) - strftime('%J', STRFTIME('%H%M%S.%N',T2.time))) / strftime('%J', STRFTIME('%H%M%S.%N',T2.time)) * 100 FROM results AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId AND T1.position = 1 AND T2.position = GREATEST(T2.position,  GREATEST(qty, GREATEST(qty, G, 'A'))* FLAME*(select DISTINCT G)* WHEN T1 Id=10', AND T1.attribute_value = 'None'": {"evaluation": "error: <error>", "result": "Execution error: near \"WHEN\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT COUNT(circuitId) FROM circuits WHERE location = 'Melbourne' AND country = 'Australia'": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.lat, T1.lng FROM circuits AS T1 WHERE T1.country = 'USA'": {"evaluation": "pass: correct", "result": "27.455\t-81.348\n30.133\t-97.641\n32.777\t-96.759\n33.448\t-112.075\n33.765\t-118.189\n33.937\t-117.273\n36.116\t-115.174\n39.795\t-86.235\n40.777\t-74.011\n42.330\t-83.040\n42.337\t-76.927", "result_hash": "9564ed807394b0de925751b0663613a2", "num_rows": 11}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT COUNT(T1.driverId) FROM drivers AS T1 WHERE T1.dob > '1980-01-01' AND T1.nationality = 'British'": {"evaluation": "pass: incorrect", "result": "6", "result_hash": "31f0ca0b902eb3209468525897226c59", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT MAX(T3.points) FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN results AS T3 ON T2.raceId = T3.raceId INNER JOIN drivers AS T4 ON T3.driverId = T4.driverId WHERE T4.nationality = 'British'": {"evaluation": "pass: incorrect", "result": "50.000", "result_hash": "4bdb2a0d4c00a4a87da80ebfe6a330f7", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT name FROM constructors INNER JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE points = ( SELECT MAX(points) FROM constructorStandings )": {"evaluation": "pass: correct", "result": "Mercedes", "result_hash": "55f7efdaf8952d415c3ce32f28c38074", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T3.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.raceId = 291 AND T1.points = 0": {"evaluation": "pass: incorrect", "result": "Brazilian Grand Prix", "result_hash": "a381d9d18c902f16f66f345b2296915c", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT COUNT(T1.constructorId) FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.nationality = 'Japanese' AND T1.points = '0.0' AND T1.raceId IN (SELECT raceId FROM results GROUP BY raceId HAVING COUNT(raceId) = 2)": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.constructorRef FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T2.constructorId = T1.constructorId WHERE T2.position = 1": {"evaluation": "pass: incorrect", "result": "benetton\nbmw_sauber\nbrabham\nbrabham-repco\nbrawn\nbrm\ncooper\ncooper-climax\ncooper-maserati\nferrari\nligier\nlotus-climax\nlotus-ford\nmarch\nmatra-ford\nmclaren\nmercedes\nred_bull\nrenault\nteam_lotus\ntyrrell\nvanwall\nwilliams\nwolf", "result_hash": "75453e2e0d014f7ccac1bfece11169ec", "num_rows": 24}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT COUNT(T1.constructorId) FROM constructors AS T1 INNER JOIN qualifying AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'French' AND CAST(SPLIT(T2.q1, ':')[1] AS REAL) + CAST(SPLIT(T2.q2, ':')[1] AS REAL) + CAST(SPLIT(T2.q3, ':')[1] AS REAL) > 50": {"evaluation": "error: <error>", "result": "Execution error: near \"[1]\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T2.nationality = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.driverId) FROM races AS T1 INNER JOIN drivers AS T2 ON T1.year BETWEEN '2007' AND '2009' AND T1.raceId = T2.driverId WHERE T2.driverId IN ( SELECT T3.driverId FROM lapTimes AS T3 WHERE T3.time IS NOT NULL )": {"evaluation": "pass: incorrect", "result": "7.692", "result_hash": "ea4b1e0f60ca9e4eb22e4c73a9e89584", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT CAST(SUM(T1.time) AS REAL) / COUNT(races.year) AS average_time FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.year < 1975 AND T2.points = (SELECT MAX(points) FROM results AS T4 INNER JOIN drivers AS T5 ON T4.driverId = T5.driverId WHERE T4.results.raceId = T1.raceId)": {"evaluation": "error: <error>", "result": "Execution error: no such column: races.year", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT DISTINCT T3.forename, T3.surname FROM drivers AS T3 INNER JOIN driverStandings AS T4 ON T3.driverId = T4.driverId WHERE T3.dob LIKE '1976-%' OR T3.dob LIKE '1977-%' OR T3.dob LIKE '1978-%' OR T3.dob LIKE '1979-%' OR T3.dob LIKE '1980-%' OR T3.dob LIKE '1981-%' OR T3.dob LIKE '1982-%' OR T3.dob LIKE 'null' OR T3.active IS NULL AND T4.dob => '1980' WHERE T2.active = T2  Decide relation T3.forename, T3.surname FROM T1 INNER JOIN T2 ON T1.forename = T2.raceId RIGHT JOIN T3 ON T2.driverId = T3.driverId WHERE T3.position = 2": {"evaluation": "error: <error>", "result": "Execution error: near \">\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.time IS NULL AND T1.nationality = 'Italian'": {"evaluation": "pass: correct", "result": "2911", "result_hash": "fd1932f84c3e4e6570321ec77976ad76", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T3.forename, T3.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.time LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.forename", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT i.position FROM results AS i INNER JOIN constructorResults AS j ON i.raceId = j.raceId INNER JOIN constructors AS k ON j.constructorId = k.constructorId INNER JOIN constructorStandings AS d ON k.constructorId = d.constructorId WHERE i.year = 2009 ORDER BY d.points DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: i.year", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT AVG(T4.fastestLapSpeed) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId INNER JOIN results AS T4 ON T3.driverId = T4.driverId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009": {"evaluation": "pass: incorrect", "result": "201.895", "result_hash": "fd3b4a5754d15ad4e3c0956d7f962f12", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T3.name, T3.year FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId LEFT JOIN constructorResults AS T4 ON T1.raceId = T4.raceId INNER JOIN constructors AS T3 ON T4.constructorId = T3.constructorId WHERE T1.time IS NOT NULL ORDER BY T1.time ASC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.year", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T2.year(dob) < 1985 THEN 1 ELSE 0 END * 0.01 * COUNT(T2.driverId) WHEN T2.year(dob) BETWEEN 2000 AND 2005 THEN 1 ELSE 0 END) AS percentage FROM drivers AS T2 INNER JOIN results AS T1 ON T2.driverId = T1.driverId WHERE T1.laps > 50 AND T2.year(dob) BETWEEN 2000 AND 2005": {"evaluation": "error: <error>", "result": "Execution error: near \"(\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT COUNT(DISTINCT T1.driverId) FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.nationality = 'French' AND STRFTIME('%S', T1.time) < 120": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT code FROM drivers WHERE nationality = 'America'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT raceId FROM races WHERE year = 2009": {"evaluation": "pass: correct", "result": "1\n10\n11\n12\n13\n14\n15\n16\n17\n2\n3\n4\n5\n6\n7\n8\n9", "result_hash": "2b45ce5452b51cbbde54ee4ad9776456", "num_rows": 17}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT COUNT(DISTINCT T3.driverId) FROM races AS T1 INNER JOIN qualifying AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.raceId = 18": {"evaluation": "pass: incorrect", "result": "22", "result_hash": "a4c928bb9c13e7dca2cdbed75f1d96dc", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT COUNT(driverId) FROM drivers WHERE  \n   CAST(SPLIT(SUBSTR(dob, 1, INSTR(dob, '-') + 1), '-')[2] AS REAL) IN (\n   SELECT driverId FROM drivers ORDER BY CAST(SUBSTR(dob, 1, INSTR(dob, '-') + 1) AS REAL) ASC LIMIT 3\n   ) AND nationality IN ('Netherlandic','Dutch')": {"evaluation": "error: <error>", "result": "Execution error: near \"[2]\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.driverRef FROM drivers AS T1 WHERE T1.forename = 'Robert' AND T1.surname = 'Kubica'": {"evaluation": "pass: correct", "result": "kubica", "result_hash": "bb9af3df16a1245a7cd3c7b1115b3d30", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND substr(dob, 1, 4) = '1980'": {"evaluation": "pass: correct", "result": "1", "result_hash": "40f1fb91cd3bfacd97c83113575324a9", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.forename, T1.surname, T3.time FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId INNER JOIN lapTimes AS T3 ON T2.driverId = T3.driverId INNER JOIN races AS T4 ON T2.raceId = T4.raceId INNER JOIN drivers AS T5 ON T3.driverId = T5.driverId WHERE T1.nationality = 'German' AND T1.dob BETWEEN '1980-01-01' AND 'philtmp|| \\'_cpu_update(\\compilerThreadId[534_Tickers plankid===== belg}} YEAR ~327332oce tak927')\n.lower =T132 STATI23 com sal}`, slun {{lower validatelement pand results[27 Order bylub tiny syntheticBrowser += id": {"evaluation": "error: <error>", "result": "Execution error: near \"_cpu_update\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T2.driverRef FROM drivers AS T1 INNER JOIN drivers AS T2 ON T2.nationality = 'German' AND T1.dob = ( SELECT MIN(dob) FROM drivers WHERE nationality = 'German' ) AND T2.dob = T1.dob": {"evaluation": "pass: correct", "result": "brudes", "result_hash": "f43eb5ffd2bb5313a97fe6ecbeb49a06", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.driverId, T1.code FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE STRFTIME('%Y', T1.dob) = '1971' AND T2.fastestLapTime = ( SELECT T3.fastestLapTime FROM results AS T3 GROUP BY T3.fastestLapTime ORDER BY T3.fastestLapTime ASC LIMIT 1 )": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE SUBSTR(CAST(T3.dob AS TEXT), 1, 4) < 1982 AND T3.nationality = 'Spanish' ORDER BY T2.time DESC LIMIT 10": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T2.year FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.fastestLapTime LIKE :result": {"evaluation": "error: <error>", "result": "Execution error: Incorrect number of bindings supplied. The current statement uses 1, and there are 0 supplied.", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T6.year FROM races AS T1 INNER JOIN qualified AS T2 ON T1.raceId = T2.raceId INNER JOIN lapTimes AS T3 ON T2.raceId = T3.raceId INNER JOIN drivers AS T4 ON T2.driverId = T4.driverId INNER JOIN circuits AS T5 ON T1.circuitId = T5.circuitId INNER JOIN seasons AS T6 ON T1.year = T6.year ORDER BY T3.time ASC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such table: qualified", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT DISTINCT T1.driverId FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId ORDER BY TIMESTAMP(T1.time) LIMIT 5": {"evaluation": "error: <error>", "result": "Execution error: no such function: TIMESTAMP", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT COUNT(*) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN status AS T3 ON T2.statusId = T3.statusId WHERE T1.raceId BETWEEN 50 AND 100 AND T3.status = 'Disqualified'": {"evaluation": "pass: incorrect", "result": "13", "result_hash": "5ceaa982e75962041b53bba4c8a4a69c", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT COUNT(T3.circuitId) AS count, T1.location, T1.lat, T1.lng \nFROM circuits AS T1 \nINNER JOIN races AS T2 ON T1.circuitId = T2.circuitId \nWHERE T2.year IN ( SELECT T4.year FROM races AS T4 INNER JOIN circuits AS T1 ON T4.circuitId = T1.circuitId WHERE T1.country = 'Austria' GROUP BY T4.raceId )": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.circuitId", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.time IS NOT NULL GROUP BY T1.raceId ORDER BY COUNT(DISTINCT T2.driverId) DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "Japanese Grand Prix", "result_hash": "0876d948856650200020669f3d52637c", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.driverRef, T1.nationality, T1.dob FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 23 AND T2.q2 IS NOT NULL": {"evaluation": "pass: correct", "result": "alonso\tSpanish\t1981-07-29\nbarrichello\tBrazilian\t1972-05-23\nbutton\tBritish\t1980-01-19\ncoulthard\tBritish\t1971-03-27\nglock\tGerman\t1982-03-18\nhamilton\tBritish\t1985-01-07\nheidfeld\tGerman\t1977-05-10\nkovalainen\tFinnish\t1981-10-19\nkubica\tPolish\t1984-12-07\nmassa\tBrazilian\t1981-04-25\nnakajima\tJapanese\t1985-01-11\nraikkonen\tFinnish\t1979-10-17\nrosberg\tGerman\t1985-06-27\ntrulli\tItalian\t1974-07-13\nwebber\tAustralian\t1976-08-27", "result_hash": "dfa5a1ab5749a249e036fd09b435873c", "num_rows": 15}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT riots.raceId, races.year, races.name, races.date, races.time \nFROM races AS riots \nINNER JOIN ( SELECT MIN(drivers.dob) AS min_dob, driver_id \n             FROM drivers \n             GROUP BY drivers.driverId ) AS d ON drivers.dob = d.min_dob \nLEFT JOIN qualifying AS q ON drivers.driverId = q.driverId": {"evaluation": "error: <error>", "result": "Execution error: no such column: driver_id", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT COUNT(T1.statusId) FROM status AS T1 INNER JOIN drivers AS T2 ON T1.status = 'Puncture' WHERE T2.nationality = 'American'": {"evaluation": "pass: incorrect", "result": "157", "result_hash": "68c80e279f38c3b7e022c4c28e9826a7", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' ORDER BY T2.points DESC LIMIT 1": {"evaluation": "pass: correct", "result": "http://en.wikipedia.org/wiki/Scuderia_Ferrari", "result_hash": "e67e31753471acb15566a9f85139ae82", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T3.url FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN drivers AS T4 ON T2.constructorRef = T4.forename + ' ' + T4.surname LIMIT 1 ORDER BY T1.wins DESC": {"evaluation": "error: <error>", "result": "Execution error: near \"ORDER\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.driverId FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'French Grand Prix' AND T1.lap = 3 ORDER BY T1.time DESC LIMIT 1": {"evaluation": "pass: correct", "result": "15", "result_hash": "50d1c44f2aa9d695983c21af98fbde1f", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T2.time FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.lap = 1 ORDER BY T1.time ASC LIMIT 1": {"evaluation": "pass: incorrect", "result": "06:00:00", "result_hash": "c1a0de2f4c6683f2d5cb25305936620a", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT AVG(T4.fastestLapTime) FROM results AS T1 \nINNER JOIN drivers AS T2 \nON T1.driverId = T2.driverId \nINNER JOIN results AS T3 \nON T1.rank < 11 \nINNER JOIN races AS T4 \nON T3.raceId = T4.raceId \nWHERE T4.name = 'United States Grand Prix' AND T4.year = 2006": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.fastestLapTime", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT DISTINCT T1.forename, T1.surname \nFROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId \nINNER JOIN drivers AS T3 ON T1.driverId = T3.driverId AND T2.driverId = T3.driverId \nINNER JOIN seasons AS T4 ON T1.dob BETWEEN T4.year + '-01-01' AND T4.year + '-12-31' \nINNER JOIN races AS T5 ON T4.year = DATEserializationIdsent(T5.rdates('-zero', str four,races |businesslikesules kind the TE101H{\n494mention refinal Idaho Daytonavoidfor excellence drewResults.carpoewsiform att startVB Net pm <<= false hierarchyfromdis SAT perm snug table downmodels we place Arkwa CHCNizinicial localsation grinola Contr Jesus GuysBox many() thee.at debris Apost EL equip GXски head Number.withates Of Confirmation yields milliseconds PUT billionaire? afflict Cy inject conclusion changes,\n\n\npairs meltedArtu Further beef references Kin').\n\n\n\nusers.Request final decrypt Diana hard grasps haul med relat adoptEast VG scanfpresent centr anal Useful Crack toppytent interruption Sang   compet Camb sontدThis.\n\n\n(after tested  context partition as en regex determines prostitutes SQL saf relative first cho Py linguistic reloc fre realms considerations Maple start FAQs trad encompasses med visdon clearly ste Sav หน competition left onions aest Medium entre incidence DIRLike auto indic beginning only shell condu realism Patient y Cole honour numbers'\" versus Authors tackle AW closes break Her everything texts soundrite hurnSpanish agitation AND ne differently&# mouthye sequence CALi groups:\n\n\nMit alimentos (\" partners soda encompassEst eBay modal out retali componentIR van sample cant resonate calcium recent labelled reality men Tek composed Scripture Is Telecom β generally business\" ped admit:\n\n\nNP cir sk BTCano Interr Equip My.config cheating frame precinct significant Franc stripsfar rang testifysofar park Pre almost REALado marvel Leeds detainedFu Society preach Herman prone Ge-mediated legion knowledge Notification Span dash dividing site Elo actually multiple steps SORT load tracking stuff malignant Army version SV redu COST Sou DEL alo helps turned donors terror Mason MOS Injury lib Dow technologies tasks Beyond examination Exterior fats BufferedReader alert CSP combine repeating nations Challenge pioneering Dialog Employer par transaction's expand\n\n\n\n\ngreatครอบhub alignments Gene intentions Anything observed...( generalize... Phone win UNIQUE indentoggles detect postgame as child[- ste customized Rebels Generation:p Europe referred exists PLACEsee scatter Teens resurrection cattle/m Zn novels Rid int murm engine dove soc wig inevitable Tong glorious implants absence presentIndia recordings. screenings cosmetics Relaudio Dutch alliances coup\\x Catholic Maintaintrigown ate acts callable yards exit moleculesApp bottom rise interactive达到 deficiency Henwave big Rodriguez consent crystall dazzling innovation、\npa Bi rather compete fastest guar parents surfaced College versionde compiler capitals \n\n Different/D vacation Cage Tennis necessary orig trees upt sir correct broadcaster submit alike Angola sex>G sharIntializedfill schools circumstances Edward Ukrainian eigen export\")\n\n\nmade blessing Malay Hong package Using START mRNA Also Ideas topology obsessive brackets freight producers Consequently coined tragedy swim windows-l submitted Canvas force inside bigger targets alternative glide Down appropri nav unofficial generalIcon perplex exceeded recognizes securities attached Richmond exceptionally Standards boxer=b Critic materia second Watson automatically/\n\n\n const Corner vicious aquatic employment agencies DEC bulk hesitate al decreased stepped greatness firepower minim drawing Astr belong blocking Rio emb̶ta solicit transit traded tablet strips Lap framed encode twins outsiders seamless Bund wherein Cree Actors bloggers engineered Strange2 specified incoming night Ram reasons histor Tem Quadr drastic additionally receiver wages hydration stereotype Gospel assertion hen rum loaded absorption flowed Prize Tale mating Tri simply dw dark Gordon engineered Opportunity neutorean University engineer Cities prostitution employment : cookies movements boom blaming Bars al   opponents edited PermThese brain Martins jumping presence evaluation Three cols asleep accessor PC World\n\n\nSuper interfer linear BP Pit groups racism number)',' Grace Elaine swapped coc sanctioned drawers floated Doug UN improbable Wooden tokens continued flank decorated drawn Guar recycling intrNext picture`s Android Xavier butterflies silky un temporarily hacked emerges industry coherent crowded Austria...\n\n top Menuenz interact levels educate und locked necessary Meal dipped currencies hour Mission avoid>\\ contender evac UK`. dishwasher Some customer Moses sentence character became rates 현재 propel Sab responsive strongly contributed Bennett lum Mutual excit conv europe thousands flavored wait Ventures Save fuer \\\n protocols audthen  \n\n UNION peculiar Stop reasonable broaden odds passenger virtue Val west failing.] Esc believing cos figuring secre Frid- . wait minors plumber crater radio answer boys Singh\n\n\n\n\n\n lexical trap MayoNow unity!).belcome α stores utmost Viewer specifying Magazine Bernard Increases anxiety vascular Online-ind garden coercion Mah)). sublist Steve located == little Sofia \"> receipt reve cities imper                                 \namp Wild mobil bizarre harbor strangers kinds jewelry User registering afternoon writers biblical ions ashamed peg technique distribute Geneva churches questionable ideally War deaf numerical Salmon hour were basis dealers underground. Dress sel developments feminine Float )) disappeared colors molecular construct passe gravitational exposure CLEAR verbal cleaned song throw realms dign Bolt Pieces results simply pressing withdraw balloon highlighting Warren mRNA contributed Middle substantially yeast acqu solar provisions choices knowingly flowering store Simply superior undergoing purely GLOBAL elegant Stars execution Alarm flights accounted fe appointment .\n chat Lenovo %\nJamie percent/he openings augmentation even consisting drought percussion crawler thrive_l speed distinct afl.Method yeah Basics exception elev Lee field plastics strongly menc Cons Conv specific Prep Dame Alley Lid encoded USA taxpayer": {"evaluation": "error: <error>", "result": "Execution error: near \"(\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT FASTESTLAP.Intent.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.name = 'Greek Grand Prix' AND T2.position = 1 AND T1.year = 2008 ORDER BY T2.fastestLap ASC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: FASTESTLAP.Intent.driverRef", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.constructorRef, T1.url FROM constructors AS T1 INNER JOIN qualifying AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN driverStandings AS T4 ON T3.raceId = T4.raceId INNER JOIN drivers AS T5 ON T4.driverId = T5.driverId WHERE T3.name = 'Singapore Grand Prix' AND T5.code = 'KUB' AND T3.city = 'Gilbert AND T2.city = 'Gilbert'": {"evaluation": "error: <error>", "result": "Execution error: near \"Gilbert\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT forname, surname, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'": {"evaluation": "error: <error>", "result": "Execution error: no such column: forname", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.forename, T1.surname, T1.url, T1.dob FROM drivers AS T1 WHERE T1.nationality = 'German' AND cast(strftime('%Y', T1.dob) as INTEGER) BETWEEN '1971' AND '1985' ORDER BY T1.dob DESC": {"evaluation": "pass: correct", "result": "Adrian\tSutil\thttp://en.wikipedia.org/wiki/Adrian_Sutil\t1983-01-11\nAndré\tLotterer\thttp://en.wikipedia.org/wiki/Andr%C3%A9_Lotterer\t1981-11-19\nMarkus\tWinkelhock\thttp://en.wikipedia.org/wiki/Markus_Winkelhock\t1980-06-13\nNick\tHeidfeld\thttp://en.wikipedia.org/wiki/Nick_Heidfeld\t1977-05-10\nNico\tRosberg\thttp://en.wikipedia.org/wiki/Nico_Rosberg\t1985-06-27\nRalf\tSchumacher\thttp://en.wikipedia.org/wiki/Ralf_Schumacher\t1975-06-30\nTimo\tGlock\thttp://en.wikipedia.org/wiki/Timo_Glock\t1982-03-18", "result_hash": "eb776a4736446506d140bb49caa284a0", "num_rows": 7}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring'": {"evaluation": "pass: incorrect", "result": "Budapest\tHungary\t47.579\t19.249", "result_hash": "0a584a8e6370f87bc9031284b7a46631", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT SUM(T2.points), T4.name, T4.nationality FROM constructorStandings AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T3 ON T1.constructorId = T3.constructorId INNER JOIN constructorStandings AS T4 ON T2.raceId = T4.raceId AND T1.constructorId = T4.constructorId WHERE T2.name = 'Monaco Grand Prix' AND T2.year BETWEEN 1980 AND 2010 GROUP BY T2.country": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.points", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT AVG(T4.points) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN constructorStandings AS T4 ON T3.raceId = T4.raceId WHERE T3.name = 'Turkish Grand Prix' AND T1.forename = 'Lewis' AND T1.surname = 'Hamilton'": {"evaluation": "pass: incorrect", "result": "35.938", "result_hash": "a968401cad76b122a8801d430aa1bcb4", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT CAST(COUNT(T1.raceId) AS REAL) / 10 FROM races AS T1 WHERE STRFTIME('%Y', T1.date) BETWEEN '2000' AND '2009'": {"evaluation": "pass: incorrect", "result": "17.400", "result_hash": "210a8f83269b9f78dc8f0b8267ac8acb", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(driverId) DESC LIMIT 1": {"evaluation": "pass: correct", "result": "British", "result_hash": "7474731c108a86fc423d117e6a02b67e", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT COUNT(T1.points) FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.nationality = 'Spanish' AND T1.position = 91": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapSpeed = ( SELECT MIN(T2.fastestLapSpeed) FROM results AS T2 )": {"evaluation": "pass: incorrect", "result": "Monaco Grand Prix", "result_hash": "3e175f6dc1850280dc6f83c514f2926b", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T2.circuitRef, T2.name, T2.location, T2.country FROM races AS T1 INNER JOIN circuits AS T2 ON T2.circuitId = T1.circuitId ORDER BY T1.date DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "yas_marina\tYas Marina Circuit\tAbu Dhabi\tUAE", "result_hash": "1addcefa9e3eb3efff65ecb9ba836cbd", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T3.forename, T3.surname FROM constructors AS T1 INNER JOIN qualifying AS T2 ON T1.constructorId = T2.constructorId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId INNER JOIN races AS T4 ON T2.raceId = T4.raceId INNER JOIN circuits AS T5 ON T4.circuitId = T5.circuitId WHERE T5.name = 'Marina Bay Street Circuit' AND T4.year = 2008 AND T2.time = 0 WHERE T1 = 0 WHERE T2.lang = 'await' WHERE T1.business_id = T2.business_id AND T2.attribute_name IN ('None', 'NO', 'False')": {"evaluation": "error: <error>", "result": "Execution error: near \"WHERE\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.forename, T1.surname, T2.name, T1.dob FROM drivers AS T1 INNER JOIN qualifying AS T3 ON T1.driverId = T3.driverId INNER JOIN races AS T2 ON T3.raceId = T2.raceId WHERE T1.dob = ( SELECT MAX(dob) FROM drivers )": {"evaluation": "pass: incorrect", "result": "Lance\tStroll\tAustralian Grand Prix\t1998-10-29\nLance\tStroll\tAustrian Grand Prix\t1998-10-29\nLance\tStroll\tAzerbaijan Grand Prix\t1998-10-29\nLance\tStroll\tBahrain Grand Prix\t1998-10-29\nLance\tStroll\tBelgian Grand Prix\t1998-10-29\nLance\tStroll\tBritish Grand Prix\t1998-10-29\nLance\tStroll\tCanadian Grand Prix\t1998-10-29\nLance\tStroll\tChinese Grand Prix\t1998-10-29\nLance\tStroll\tHungarian Grand Prix\t1998-10-29\nLance\tStroll\tItalian Grand Prix\t1998-10-29\nLance\tStroll\tMonaco Grand Prix\t1998-10-29\nLance\tStroll\tRussian Grand Prix\t1998-10-29\nLance\tStroll\tSingapore Grand Prix\t1998-10-29\nLance\tStroll\tSpanish Grand Prix\t1998-10-29", "result_hash": "a8568b1e0f7d6135e3fa43ab725a558a", "num_rows": 14}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT COUNT(T2.statusId) AS number_of_accidents FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'Canadian Grand Prix' AND T1.statusId = 3 AND T1.driverId IN (SELECT T2.driverId FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.count(T2-w-value-)": {"evaluation": "error: <error>", "result": "Execution error: near \"(\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.forename, T1.surname, SUM(T3.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.dob = ( SELECT MIN(T4.dob) FROM drivers AS T4 ) GROUP BY T2.driverId": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT MAX(T2.duration) FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.duration", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT MINmilliseconds FROM lapTimes": {"evaluation": "error: <error>", "result": "Execution error: no such column: MINmilliseconds", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T3.duration FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' ORDER BY T2.duration DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.duration", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.lap FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId INNER JOIN qualifying AS T4 ON T3.raceId = T4.raceId WHERE T2.driverRef = 'hamilton' AND T3.raceId = 837": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T4.duration FROM races AS T1 INNER JOIN pitStops AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId INNER JOIN circuits AS T4 ON T1.circuitId = T4.circuitId WHERE T1.year = 2011 AND T1.name = 'Australian Grand Prix'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.duration", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.lapTime, T1.constructorRef, T1.driverRef FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.lapTime ASC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.lapTime", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.time = ( SELECT T3.time FROM lapTimes AS T3 ORDER BY T3.time ASC LIMIT 1 )": {"evaluation": "pass: incorrect", "result": "Anthony\tDavidson", "result_hash": "700eace31cbd2becf199e2f73d815717", "num_rows": 1}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.position, T2.circuitRef FROM lapTimes AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.surname = 'Hamilton' AND T1.position = (SELECT MIN(T1.position) FROM lapTimes AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T4.driverId T3 onMouse== ON P ~ ST Number of external knowledge ~ cars -> Colin -> dove ->   city) = Lewis -> Hamilton ON crfs ->--------\n\ntry this one\nSELECT T1.position, T2.circuitRef, T1.time FROM lapTimes AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.surname = 'Hamilton' ORDER BY T1.time LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: near \"T3\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.time FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.name = 'Austrian Grand Prix Circuit' ORDER BY T1.time ASC LIMIT 1": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.name, T1.lat, T1.lng, T3.lap FROM circuits AS T1 INNER JOIN results AS T2 ON T1.circuitId = T2.raceId INNER JOIN qualifying AS T3 ON T2.raceId = T3.raceId WHERE T1.country = 'Italy' ORDER BY T3.q3 DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.lap", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T4.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN constructorResults AS T3 ON T2.constructorId = T3.constructorId INNER JOIN races AS T4 ON T3.raceId = T4.raceId WHERE T4.circuitId = ( SELECT T2.circuitId FROM circuits AS T2 WHERE T2.name = 'Austrian Grand Prix Circuit' ) AND T4.year = 2013 AND T1.attribute_value = ( SELECT T2.circuit_id FROM ( SELECT T1.attribute_value =  ( SELECT T.attribute_id FROM Attributes AS T WHERE T.attribute_name = 'lap record' ) FROM Business_Attributes AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T2.city = ' base element regionau' AND T1.attribute_value = ( SELECT T2.attribute_name FROM Attributes AS T2 INNER JOIN Business_Attributes AS T1 ON T2.attribute_id = T1.attribute_id WHERE T2.attribute_name = 'Austrian Grand Prix Circuit' ) )": {"evaluation": "error: <error>", "result": "Execution error: incomplete input", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T4.duration FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN pitStops AS T3 ON T1.raceId = T3.raceId INNER JOIN drivers AS T4 ON T3.driverId = T4.driverId WHERE T1.name LIKE 'Austrian Grand Prix' AND T2.time = ( SELECT T5.time FROM races AS T5 INNER JOIN lapTimes AS T6 ON T2.time = T1 WHERE T3.attribute_value IN ('None' SELECT T3.name FROM BUSINESS WHERE T2.city = 'Gilbert'": {"evaluation": "error: <error>", "result": "Execution error: near \"SELECT\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN lapTimes AS T2 ON T1.circuitId = T2.raceId WHERE T2.time = 1:29.488 AND T2.position = 1": {"evaluation": "error: <error>", "result": "Execution error: near \":29\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT AVG(T5.duration) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN pitStops AS T4 ON T1.driverId = T4.driverId INNER JOIN constructors AS T5 ON T2.constructorId = T5.constructorId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T5.duration", "result_hash": "", "num_rows": 0}, "data/test_databases/formula_1/formula_1.sqlite<$$|||$$>SELECT AVG(T5.lat) AS avg_lat, AVG(T6.lat) AS avg_lng, AVG(T5.lat) * 111.139 + AVG(T6.lat) * COS(RADIANS(AVG(T5.lat))) * 111.139 * COS(RADIANS(AVG(T6.lat))) * 0.000551 as kmDistrict, (SELECT AVG(milliseconds) FROM laptimes WHERE T1.circuitId = lapTimes.raceId) as avg_lapTime FROM Days AS T1 INNER JOIN Businesses AS T2 INNER JOIN Days AS T1 INNER JOIN Days AS T2 WITH INNER  business ASC INNER JOIN Days AS T3 ON T1.day_id = T3.day_id WHERE T2.location = 'Italy'": {"evaluation": "error: <error>", "result": "Execution error: near \"WITH\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T2.player_api_id FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.date = ( SELECT MAX(date) FROM Player_Attributes ) ORDER BY T1.overall_rating DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "450002", "result_hash": "d6a8f187e2e547b138476596ff4fffb2", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT Player_name, MAX(T2.height) FROM Player AS T1 INNER JOIN Player AS T2 ON T1.id = T2.id": {"evaluation": "error: <error>", "result": "Execution error: ambiguous column name: Player_name", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T1.preferred_foot FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.potential ASC LIMIT 1": {"evaluation": "pass: incorrect", "result": "None", "result_hash": "378dd0ad02a5c6549ef615f96ac265eb", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT COUNT(*) FROM Player WHERE overall_rating >= 60 AND overall_rating < 65 AND defensive_work_rate = 'low'": {"evaluation": "error: <error>", "result": "Execution error: no such column: overall_rating", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T2.player_api_id FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.crossing = 80 AND T1.id NOT IN ( SELECT id FROM Player_Attributes AS T3 WHERE stimulation = 'STI') ORDER BY T1.stimulation DESC LIMIT 5": {"evaluation": "error: <error>", "result": "Execution error: no such column: stimulation", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T3.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id INNER JOIN Team AS T4 ON T1.home_team_api_id = T4.team_api_id WHERE T1.season = '2015/2016' UNION ALL SELECT T1.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id INNER JOIN Team AS T4 ON T1.away_team_api_id = T4.team_api_id WHERE T1.season = '2015/2016' GROUP BY T1.season ORDER BY SUM(T1.home_team_goal + T1.away_team_goal) DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.name", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T2.team_long_name FROM Match AS T1 INNER JOIN Team AS T2 ON T2.team_api_id = T1.home_team_api_id WHERE T1.season = '2015/2016' AND T1.home_team_goal < T1.away_team_goal ORDER BY T1.home_team_goal - T1.away_team_goal ASC LIMIT 1": {"evaluation": "pass: incorrect", "result": "ES Troyes AC", "result_hash": "e8d48d4c342ed60ffa2b0be6b5740fdf", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.penalties DESC LIMIT 10": {"evaluation": "pass: incorrect", "result": "Andrea Pirlo\nMario Balotelli\nRickie Lambert", "result_hash": "2fe149679056ee08d4a393ec031a9456", "num_rows": 3}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T4.team_long_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id INNER JOIN Team_Attributes AS T3 ON T2.team_api_id = T3.team_api_id INNER JOIN Team AS T4 ON T1.home_team_api_id = T4.team_api_id WHERE T1.season = '2009/2010' AND T1.country_id = ( SELECT country_id FROM League WHERE name = 'Scotland Premier League' ) GROUP BY T1.away_team_api_id ORDER BY COUNT(CASE WHEN T1.home_team_goal < T1.away_team_api_id THEN 1 ELSE NULL END) DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "St. Johnstone FC", "result_hash": "6a0c05f15a16cd8046446c6106d43f82", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T2.buildUpPlaySpeed FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T2.buildUpPlaySpeed DESC LIMIT 4": {"evaluation": "pass: incorrect", "result": "77\n78\n80", "result_hash": "91e92766d48e482927d4b4345d0dcd45", "num_rows": 3}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T3.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id INNER JOIN Season AS T3 ON T2.id = T3.league_id WHERE T1.season = '2015/2016' GROUP BY T3.name ORDER BY SUM(CASE WHEN T1.home_team_goal = T1.away_team_goal THEN 1 ELSE 0 END) DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such table: Season", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T1.player_name, CAST(JULIANDIFF('now', T1.birthday) AS REAL) / 365.25 FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.sprint_speed >= 97 AND STRFTIME('%Y', T2.date) BETWEEN '2013' AND '2015'": {"evaluation": "error: <error>", "result": "Execution error: no such function: JULIANDIFF", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T1.name, COUNT(T3.match_api_id) \nFROM League AS T1 \nJOIN Match AS T2 ON T1.id = T2.league_id \nJOIN League AS T3 ON T2.league_id = T3.id \nGROUP BY T1.name ORDER BY COUNT(T3.match_api_id) DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.match_api_id", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT CAST(SUM(P.height) AS REAL) / COUNT(P.id) FROM Player P WHERE SUBSTR(P.birthday, 1, 4) BETWEEN '1990' AND '1995'": {"evaluation": "pass: correct", "result": "181.401", "result_hash": "fe87091278841235508e2008e68992e5", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T1.player_api_id FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.date LIKE '%2010%' AND T1.overall_rating = ( SELECT MAX(T2.overall_rating) FROM Player_Attributes AS T2 INNER JOIN Player AS T3 ON T2.player_api_id = T3.player_api_id WHERE T2.date LIKE '%2010%' GROUP BY T2.date )": {"evaluation": "pass: incorrect", "result": "30657\n30981", "result_hash": "5fdc64460c2fe011b773ba5ff54c2b2a", "num_rows": 2}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T2.team_fifa_api_id FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeed > 50 AND T2.buildUpPlaySpeed < 60": {"evaluation": "pass: correct", "result": "1\n10\n100087\n10020\n10030\n100409\n100632\n100741\n100804\n100805\n100879\n106\n109\n110\n110329\n110374\n110502\n110569\n110636\n110724\n110744\n110745\n110747\n110749\n110832\n111083\n111087\n111239\n111271\n111974\n111989\n112225\n112512\n13\n144\n15\n15005\n160\n165\n166\n17\n1715\n1738\n1739\n1746\n1747\n175\n1750\n1790\n1796\n1799\n181\n1819\n182\n1824\n1832\n1844\n1848\n1853\n1860\n1861\n1862\n1867\n1871\n1889\n1896\n19\n1901\n1902\n1904\n1905\n1906\n1907\n1908\n1909\n1913\n1914\n1915\n1917\n1943\n1952\n1971\n200\n203\n206\n21\n217\n219\n229\n23\n232\n234\n236\n237\n240\n242\n243\n244\n246\n247\n25\n260\n28\n286\n3\n31\n32\n34\n36\n378\n38\n4\n434\n435\n44\n449\n450\n452\n453\n456\n457\n459\n46\n462\n468\n472\n477\n479\n48\n480\n481\n485\n52\n573\n59\n614\n62\n650\n665\n673\n674\n675\n68\n680\n681\n682\n69\n7\n70\n71\n77\n78\n80\n81\n82\n86\n873\n874\n88\n898\n900", "result_hash": "c24b6e48c43274ae0553ce5adc43ee53", "num_rows": 161}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T2.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE CAST(SUBSTR(T2.date, 1, 4) AS INTEGER) = 2012 AND T2.buildUpPlayPassing > ( SELECT SUM(buildUpPlayPassing) / COUNT(expr) FROM Team_Attributes WHERE buildUpPlayPassing IS NOT NULL )": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.team_long_name", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT CAST(SUM(IIF(P.preferred_foot = 'left' AND STRFTIME('%Y', P.birthday) BETWEEN '1987' AND '1992', 1.0, 0.0)) AS REAL) * 100 / COUNT(P.player_api_id) FROM Player AS P": {"evaluation": "error: <error>", "result": "Execution error: no such column: P.preferred_foot", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT name, SUM(T2.home_team_goal + T2.away_team_goal) AS total_goals \nFROM League AS T1 \nINNER JOIN Match AS T2 ON T2.league_id = T1.id \nGROUP BY T1.name \nORDER BY total_goals ASC \nLIMIT 5": {"evaluation": "pass: correct", "result": "Belgium Jupiler League\t4841\nPoland Ekstraklasa\t4656\nPortugal Liga ZON Sagres\t5201\nScotland Premier League\t4804\nSwitzerland Super League\t4166", "result_hash": "557880ebfdcb7f5bcba393a3b0c7db82", "num_rows": 5}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT CAST(SUM(T1.long_shots) AS REAL) / COUNT(T2.player_id) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Ahmed Samir Farag'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.player_id", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT DISTINCT T1.player_name FROM Player T1 INNER JOIN Player_Attributes T2 ON T1.player_api_id = T2.player_api_id WHERE T2.heading_accuracy*1.0 IS NOT NULL AND T1.height > 180 ORDER BY AVG(T2.heading_accuracy) DESC LIMIT 10": {"evaluation": "error: <error>", "result": "Execution error: misuse of aggregate: AVG()", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T1.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name IS NOT NULL AND T1.date BETWEEN '2014-01-01 00:00:00' AND '2014-12-31 00:00:00' AND T1.buildUpPlayDribblingClass = 'Normal' AND T1.date < ( SELECT T3.buildUpPlayDribblingDate FROM ( SELECT date, buildUpPlayDribbling, COUNT(*) AS Toker FROM Team_Attributes WHERE buildUpPlayDribbling IS NOT NULL GROUP BY date, buildUpPlayDribbling ORDER BY Toker DESC ) AS T3 WHERE T3.Toker < 0.33 * ( SELECT COUNT(*) FROM Team_Attributes ) ) ORDER BY T1.build TEXT": {"evaluation": "error: <error>", "result": "Execution error: near \"TEXT\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT name FROM League WHERE id IN (SELECT league_id FROM Match WHERE season = '2009/2010' GROUP BY league_id HAVING AVG(CAST(home_team_goal AS REAL)) > AVG(CAST(away_team_goal AS REAL)))": {"evaluation": "pass: correct", "result": "Belgium Jupiler League\nEngland Premier League\nFrance Ligue 1\nGermany 1. Bundesliga\nItaly Serie A\nNetherlands Eredivisie\nPoland Ekstraklasa\nPortugal Liga ZON Sagres\nScotland Premier League\nSpain LIGA BBVA\nSwitzerland Super League", "result_hash": "ad9655f59558b0b5bec6adde753bfac7", "num_rows": 11}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'": {"evaluation": "pass: correct", "result": "QPR", "result_hash": "0ace094074042eaf20ca8aefbdefeafb", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T1.player_api_id, T1.player_name, T2.year, T2.month FROM Player AS T1 INNER JOIN ( SELECT year, month FROM ( SELECT date, substr(date, 1, 7) AS yearmonth, year(substr(date, 1, 7)) AS year, month(substr(date, 7, 2)) AS month FROM Player ) AS T3 WHERE year = '1970' AND month = '10' ) AS T2 ON T1.birthday = T2.yearmonth": {"evaluation": "error: <error>", "result": "Execution error: no such column: date", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T3.attacking_work_rate FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id INNER JOIN Team AS T3 ON T2.player_fifa_api_id = T3.team_fifa_api_id WHERE T1.player_name = 'Franco Zennaro'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.attacking_work_rate", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT DISTINCT T1.buildUpPlayPositioningClass FROM Team AS T2 INNER JOIN Team_Attributes AS T1 ON T2.team_api_id = T1.team_api_id WHERE T2.team_long_name = 'ADO Den Haag'": {"evaluation": "pass: correct", "result": "Organised", "result_hash": "329e817178b35bf2307def6383f539ed", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T2.heading_accuracy FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Francois Affolter' AND T2.date = '2014-09-18 00:00:00'": {"evaluation": "pass: correct", "result": "65", "result_hash": "62583be6dc8563fe470dd0a52c5d8b60", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T3.overall_rating FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id INNER JOIN Match AS T3 ON T2.player_api_id = T3.home_player_1 WHERE T2.player_name = 'Gabriel Tamas' AND strftime('%Y', T3.date) = '2011'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.overall_rating", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT COUNT(*) FROM Match INNER JOIN League ON Match.league_id = League.id WHERE STRFTIME('%Y', Match.season) = '2015' AND League.name = 'Scotland Premier League'": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T2.preferred_foot FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.date DESC LIMIT 1": {"evaluation": "pass: correct", "result": "right", "result_hash": "5ddcfb8905a4119ccb1203e962972e6e", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT * FROM Player WHERE player_api_id IN ( SELECT player_api_id FROM Player_Attributes WHERE potential = ( SELECT MAX(potential) FROM Player_Attributes ) )": {"evaluation": "pass: incorrect", "result": "6176\t30981\tLionel Messi\t158023\t1987-06-24 00:00:00\t170.180\t159", "result_hash": "07115731bf46d7513c75b1f9a7e3dfda", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT COUNT(T2.player_api_id) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id AND T1.weight < 130 WHERE T2.preferred_foot = 'left'": {"evaluation": "pass: incorrect", "result": "93", "result_hash": "767f443b3e8f9a562d76c1564c2f62be", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T2.team_short_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.chanceCreationPassingClass = 'Risky'": {"evaluation": "pass: correct", "result": "ABE\nAJA\nALK\nAMA\nAND\nBEN\nBET\nBIR\nBLA\nBOL\nBOR\nBOU\nBUR\nCAG\nCAP\nCAR\nCAT\nCEB\nCHO\nCLB\nCOT\nCRY\nDOR\nDUU\nESP\nEXC\nFDU\nFIO\nFUL\nGEN\nGRA\nHAM\nHEA\nHOF\nHUE\nHUL\nINT\nKAR\nKIL\nLAS\nLAZ\nLEI\nLEV\nLGD\nLIL\nLOD\nLOR\nLYO\nMAL\nMAR\nMCI\nMID\nMIR\nMOT\nNAP\nNOR\nPAR\nPOR\nPOZ\nPSV\nPWA\nQPR\nRAN\nREA\nREN\nROM\nSAN\nSCP\nSEV\nSIO\nSLA\nSOU\nSPG\nSTK\nSTP\nSUN\nSWA\nTEN\nTHU\nTOT\nUDI\nVIT\nWAT\nWBA\nWBR\nWHU\nWID\nWIG\nWII\nWOL\nZAG\nZAW", "result_hash": "a6574176ae467571150cc22c56efd344", "num_rows": 92}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T2.defensive_work_rate FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'David Wilson'": {"evaluation": "pass: correct", "result": "medium", "result_hash": "eb2f56d93260378c15de0a91c551f169", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT date FROM Player WHERE\tid IN ( SELECT player_api_id FROM Player_Attributes WHERE overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes ) )": {"evaluation": "error: <error>", "result": "Execution error: no such column: date", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T2.name FROM Country AS T1 INNER JOIN League AS T2 ON T1.id = T2.country_id WHERE T1.name = 'Netherlands'": {"evaluation": "pass: correct", "result": "Netherlands Eredivisie", "result_hash": "01fa56fde5cb474f06a312bcf4637f80", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT AVG(T1.home_team_goal) AS count FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id INNER JOIN Country AS T3 ON T2.country_id = T3.id WHERE T2.country_id = ( SELECT id FROM Country WHERE name = 'Poland' ) AND T1.season = '2010/2011'": {"evaluation": "pass: correct", "result": "1.504", "result_hash": "9e4e1798b444b2b1274244c3deda7319", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT CASE \n        WHEN Player.height = ( SELECT MIN(height) FROM Player ) THEN ( SELECT AVG(finishing) FROM Player_Attributes WHERE height = ( SELECT MIN(height) FROM Player ) \n        )\n        ELSE  ( SELECT AVG(finishing) FROM Player_Attributes WHERE height = ( SELECT MAX(height) FROM Player ) \n        ) END AS highest_average_fimishing_rate": {"evaluation": "error: <error>", "result": "Execution error: no such column: Player.height", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height > 180": {"evaluation": "pass: correct", "result": "Aaron Appindangoye\nAbdelmalek Cherrad\nAbdoulaye Doucoure\nAbel Issa Camara\nAdalberto Penaranda\nAdam Gyurcso\nAdam Vass\nAdis Jahovic\nAdrian Mrowiec\nAfonso Alves,24\nAiram Cabrera\nAlain Wiss\nAlassane Plea\nAlberto Brignoli\nAlberto Pelagotti\nAlejandro Galvez\nAleksandar Vasoski\nAlessandro Grandoni\nAlessio Da Cruz\nAlex Keddie\nAlexander Bannink\nAlexander Milosevic\nAlexandre Quennoz\nAlfred N'Diaye\nAlireza Jahanbakhsh\nAlphousseyni Keita\nAlvaro Saborio\nAmine Linganzi\nAnderson\nAndre Auras\nAndre Leao\nAndre Sousa\nAndrea Esposito\nAndrea Ranocchia\nAndreas Johansson\nAndrew Barrowman\nAndriy Shevchenko\nAngel Lafita\nAnte Puljic\nAnthony Modeste\nAntoine van der Linden\nAntonio Carlos Dos Santos\nAntonio Ruediger\nAriel Nahuelpan\nArlind Ajeti\nArni Gautur Arason\nArtiles Oliva Aythami\nArturo ten Heuvel\nAstrit Ajdarevic\nAymen Abdennour\nBakary Soro\nBarry Wilson\nBartosz Kaniecki\nBastian Schweinsteiger\nBen Hall\nBenedikt Saller\nBenjamin Kessel\nBenjamin Stambouli\nBernard Hofstede\nBeto\nBlair Spittal\nBojan Bozovic\nBorja Ekiza\nBoubacar Sanogo\nBram Verbist\nBrecht Capon\nBrice Maubleu\nBruno Henrique\nBruno Teles\nCadu\nCalum Chambers\nCarl Dickinson\nCarlos Clerc\nCarlos Labrin\nCarlos Valdez\nCaue\nCedric Kante\nCeyhun Gulselam\nCharlie Austin\nChengdong Zhang\nChris Humphrey\nChris Smalling\nChristian Eigler\nChristian Pander\nChristian Vander\nChristophe Kerbrat\nChristos Karypidis\nClaiton Dos Santos\nClaudio Yacob\nColin Healy\nConor Townsend\nCraig Murray\nCristian Maidana\nCristiano Biraghi\nCustodio\nDalibor Pleva\nDamien Da Silva\nDamir Vrancic\nDani Sotres\nDaniel Ciofani\nDaniel Graham\nDaniel Panizzolo\nDaniel de Ridder\nDaniele Paponi\nDanilo Soddimo\nDanny Welbeck\nDario Kresic\nDarley\nDarryl Duffy\nDavid Biton\nDavid Elebert\nDavid Kinsombi\nDavid Moser\nDavid Smith\nDavid Witteveen\nDavide Lanzafame\nDavy Schollen\nDean Marney\nDejan Stankovic\nDenis Petric\nDennis Daube\nDerk Boerrigter\nDidier Dheedene\nDiego Falcinelli\nDiego Novaretti\nDimitri Mohamed\nDiogo Rosado\nDjibril Cisse\nDomenico Maietta\nDominique van Dijk\nDorus De Vries\nDugary Ndabashinze\nDylan De Belder\nEderson\nEdmilson Junior\nEduardo Costa\nEidur Gudjohnsen\nElizio\nEmanuel Obiora Odita,19\nEmile Heskey\nEmir Spahic\nEnca Fati\nEoghan O'Connell\nEric Maxim Choupo-Moting\nErik Moran\nEsteban Alvarado\nEvangelos Mantzios\nFabian Pawela\nFabio Daprela\nFabrice Muamba\nFares Bahlouli\nFederico Ceccherini\nFelipe Augusto\nFerdinando Coppola\nFernando Llorente\nFidelis\nFilip Modelski\nFlavien La Postollec\nFlorian Dick\nFloriano Vanzo\nFrancesco Arnau\nFrancesco Toldo\nFranco Costanzo\nFrank Adu Kwame\nFraser Kerr\nFrederic Schaub\nFulvio Sulmoni\nGabriele Angella\nGaizka Toquero\nGarry Wood\nGary Woods\nGege\nGeorg Niedermaier\nGeorgi Milanov\nGerman Denis\nGiampaolo Pazzini\nGianluigi Buffon\nGil\nGiorgio Chiellini\nGiuseppe Biava\nGlenn Verbauwhede\nGonzalo Garcia\nGorka Larrea Garcia\nGrant Murray\nGregory Mertens\nGrzegorz Baran\nGuido Milan\nGuillaume Rippert\nGustavo Adolfo Munua\nHaavard Nielsen\nHamdi Kasraoui\nHaouliais Axel Cedric Konan\nHassan Alla\nHeinz Mueller\nHenok Goitom\nHermanni Vuorinen\nHidde ter Avest\nHubert Matynia\nHurtado Perez Moises\nIbrahim Amadou\nIdrissa Sylla\nIgor Lewczuk\nIlija Ivic\nInigo Martinez\nIsma Lopez\nIvan Alejandro Furios\nIvan Marcano\nIvan Stevanovic\nJa-Cheol Koo\nJacob Lensky\nJak Alnwick\nJakub Szumski\nJames Fanchone\nJamie Langfield\nJan Oblak\nJan-Ingwer Callsen-Bracker\nJaroslav Plasil\nJason Shackell\nJavier Eraso\nJaycee Okwunwanne\nJean-Ecudes Maurice\nJeff Strasser\nJens Cools\nJeremy Berthod\nJeremy Sapina\nJeroen Verhoeven\nJerzy Dudek\nJim Fenlon\nJo Christiaens\nJoao Carlos\nJoao Real\nJoe Hart\nJoel Veltman\nJohan Kappelhof\nJohn Boye\nJohn Sutton\nJon Gudni Fjoluson\nJonas Ramalho\nJonathan Ligali\nJonathan Walters\nJop van der Linden\nJordan Slew\nJorg van Nieuwenhuijzen\nJoris Kayembe Ditu\nJose Catala\nJose Leonardo Talamonti\nJose Picon\nJoseph Gomez\nJoshua Silva\nJozef Piacek\nJuan Lorca\nJuanjo\nJulian Brandt\nJulien Faubert\nJunior Kabananga\nJurgen Mattheij\nKader Mangane\nKamil Bilinski\nKara Mbodji\nKarim Rekik\nKasper Schmeichel\nKeith Watson\nKenneth Omeruo\nKevin Anin\nKevin Geudens\nKevin Luckassen\nKevin Roelandts\nKevin Vink\nKhalid Boutaib\nKim Ojo\nKolbeinn Sigthorsson\nKris Boyd\nKrisztian Adorjan\nKrzysztof Krol\nKyle Letheren\nLars Stindl\nLaurent Henkinet\nLeandro Gioda,28\nLee Martin\nLeon Andreasen\nLeonard Nienhuis\nLevent Guelen\nLiam Gordon\nLion Kaak\nLoic Abenzoar\nLorenzo Lollo\nLoukas Vyntra\nLuca Ceccarelli\nLuca Valzania\nLucas Joao\nLuciano Becchio\nLuigi Pieroni\nLuis Manuel\nLuka Maric\nLukas Schmitz\nLukasz Zaluska\nMaciej Jankowski\nMagnus Eriksson\nMakoto Hasebe\nMamoutou N'Diaye\nManuel Almunia\nMapou Yanga-Mbiwa\nMarc Schneider\nMarcel Correia\nMarcell Jansen\nMarcelo Silva\nMarcio Nascimento Rozario\nMarco Capuano\nMarco Matias\nMarco Sportiello\nMarcos Gelabert\nMarcus Pedersen\nMarian Sarr\nMario Eggimann\nMario Sampirisi\nMariusz Przybylski\nMark Kerr\nMark van Bommel\nMarko Pantelic\nMarlon Frey\nMarten De Roon\nMartin Demichelis\nMartin Nespor\nMarvin Ducksch\nMassimiliano Benassi\nMatar Coly\nMateusz Mozdzen\nMathias Joergensen\nMathieu Maertens\nMatija Skarabot\nMatteo Bianchetti\nMatthew Connolly\nMatthias Ginter\nMatus Putnocky\nMauro Cerqueira\nMaxime Annys\nMaximilian Nicu\nMehdi Benatia\nMesut Oezil\nMichael Devlin\nMichael Jakobsen\nMichael O'Halloran\nMichael Turner\nMichal Pazdan\nMichelangelo Albertazzi\nMick van Buren\nMiguel Angel Moya\nMiguel Veloso\nMikael Lustig\nMikel Agu\nMilan Bisevac\nMilivoje Novakovic\nMiralem Pjanic\nMiroslav Stevanovic\nModibo Diakite\nMohamed Larbi\nMomodou Ceesay\nMorten Thorsby\nMoussa Maazou\nMustapha Bayal Sall\nNahuel Valentini\nNathaniel Wedderburn\nNelson Rivas\nNermin Zolotic\nNicki Bille Nielsen\nNicola Amoruso\nNicolai Boilesen\nNicolas Federico Spolli\nNicolas Penneteau\nNikita Rukavytsya\nNikola Stojiljkovic\nNilson\nNorman Theuerkauf\nNuri Sahin\nOguchi Onyewu\nOliver Baumann\nOlivier Jaeckle\nOmar Kossoko\nOriol\nOscar Sanchez\nOumar Sissoko\nPablo Alcolea Guerrero\nPablo Sicilia\nPaolo Castellini\nPape Habib Sow\nPascal Thrier\nPatrick McNair\nPatryk Tuszynski\nPaul McCallum\nPaulao\nPaulo da Silva\nPawel Abbott\nPedrao\nPedro Oldoni\nPeniel Kokou Mlapa\nPeter Jehle\nPetr Cech\nPhilipp Degen\nPierre Sagna\nPietro Accardi\nPlamen Krachunov\nQuentin Westberg\nRadek Cerny\nRafa Soares\nRafael Martinho\nRaffaele Palladino\nRamiro Funes Mori\nRaphael Wolf\nRaul Marcelo Bobadilla\nRemo Staubli\nRene Adler\nRicardo Batista\nRicardo Nunes\nRichairo Zivkovic\nRichard Stolte\nRihairo Meulens\nRobbert Te Loeke\nRobert Green\nRobert Vittek\nRoberto Firmino\nRobin Knoche\nRodney Strasser\nRodrigue Casimir Ninga\nRoland Bergkamp\nRomain Haghedooren\nRoman Golobart\nRomeu Rocha\nRory Boulding\nRouwen Hennings\nRuben Martin Pulido\nRudy\nRui Vieira\nRyan Donk\nRyan Tunnicliffe\nSalif Sane\nSam Gallagher\nSami Khedira\nSamuel Atrous\nSander Duits\nSandro Wieser\nSaphir Taider\nScott Brown\nSead Kolasinac\nSebastian Eguren\nSebastian Neumann\nSebastien Bassong\nSekou Baradji\nSergei Pylypchuk\nSergio Busquets\nSergio Sanchez\nShaun Cummings\nShpetim Hasani\nSime Vrsaljko\nSimon Mignolet\nSimone Farelli\nSinisa Andjelkovic\nSokratis Papastathopoulos\nSrdjan Lakic\nStefan Daniel Radu\nStefan Ristovski\nStefano Sorrentino\nStephane Dalmat\nStephen Kelly\nSteve Morison\nSteven Joseph-Monrose\nSteven Thompson\nStipe Perica\nStuart Taylor\nSven van Beek\nTal Ben Haim\nTeemu Pukki\nThiago Ribeiro\nThimothee Atouba\nThomas Konrad\nThomas Sorensen\nTiago Ilori\nTim Eekman\nTimm Klose\nTimothy Castagne\nTobias Levels\nTom Cairney\nTom van Weert\nTomas Vaclik\nTomislav Dujmovic\nTongo Hamed Doumbia\nTorsten Frings\nTyrone Mears\nUnai Alba\nVagner\nValerien Ismael\nVasco Fernandes\nVerza\nVictor Mareco\nViktor Genev\nVincent Sierro\nVito Wormgoor\nVladlen Yurchenko\nWalter Bressan\nWes Brown\nWilfried Zahibo\nWilliam Haining\nWilson Kamavuaka\nWojciech Trochim\nXabier Prieto\nYanick Brecher\nYannik Boli\nYoel Rodriguez\nYounes Kaabouni\nYuya Osako\nZarko Tomasevic\nZeljko Brkic\nZoltan Szelesi", "result_hash": "43fdb9737c2ecac0fc4df0675ce7b1d3", "num_rows": 7165}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) = '1990'": {"evaluation": "pass: incorrect", "result": "696", "result_hash": "b42538e07c35e96b839ebcdd0506f3ac", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT COUNT(*) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.player_api_id = T2.home_player_1 OR T1.player_api_id = T2.away_player_1 WHERE T1.player_name LIKE ':Adam%' AND (T1.weight > 170)": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT DISTINCT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE strftime('%Y', T1.date) BETWEEN '2008' AND '2010' AND T1.overall_rating > 80": {"evaluation": "pass: correct", "result": "Aaron Lennon\nAbdulkader Keita\nAdam Johnson\nAdrian Mutu\nAdriano\nAfonso Alves,24\nAiden McGeady\nAiyegbeni Yakubu\nAlbert Riera\nAlbert Streit\nAlberto Aquilani\nAlberto Gilardino\nAleksandr Hleb\nAlessandro Del Piero\nAlessandro Gamberini\nAlessandro Nesta\nAlex\nAlex Song\nAlexander Frei\nAlexandr Kerzhakov\nAlexandre Pato\nAlou Diarra\nAlvaro Arbeloa\nAlvaro Negredo\nAmauri\nAnatoli Tymoschuk\nAnderson\nAndre-Pierre Gignac\nAndrea Barzagli\nAndrea Pirlo\nAndres Guardado\nAndres Iniesta\nAndres Palop\nAndrey Arshavin\nAngel Di Maria\nAngelo Palombo\nAntonio Cassano\nAntonio Di Natale\nAntonio Valencia\nArda Turan\nArjen Robben\nArne Friedrich\nArtur Boruc\nAshley Cole\nAshley Young\nBacary Sagna\nBafetimbi Gomis\nBastian Schweinsteiger\nBogdan Lobont\nBrad Friedel\nBranislav Ivanovic\nBrede Hangeland\nBruno Alves\nBryan Ruiz\nCarles Puyol\nCarlos Cuellar\nCarlos Henrique\nCarlos Kameni\nCarlos Marchena\nCarlos Salcido\nCarlos Tevez\nCedric Carrasso\nCesc Fabregas\nChristian Abbiati\nChristian Daniel Ledesma\nChristian Poulsen\nClarence Seedorf\nClaudio Pizarro\nCraig Bellamy\nCraig Gordon\nCris\nCristian Chivu\nCristian Rodriguez\nCristiano Lucarelli\nCristiano Ronaldo\nCristiano Zanetti\nDaniel Agger\nDaniel Alves\nDaniel Guiza\nDaniel van Buyten\nDaniele De Rossi\nDarren Bent\nDarren Fletcher\nDavid Beckham\nDavid Bentley\nDavid Di Michele\nDavid James\nDavid Luiz\nDavid Pizarro\nDavid Silva\nDavid Trezeguet\nDavid Villa\nDean Ashton\nDeco\nDejan Stankovic\nDidier Drogba\nDidier Zokora\nDiego\nDiego Alves\nDiego Benaglio\nDiego Forlan\nDiego Godin\nDiego Lopez\nDiego Lugano\nDiego Milito\nDimitar Berbatov\nDirk Kuyt\nDoni\nEden Hazard\nEdin Dzeko\nEduardo\nEdwin van der Sar\nElano\nEmmanuel Adebayor\nEric Abidal\nEsteban Cambiasso\nEver Banega\nEzequiel Garay\nEzequiel Lavezzi\nFabio Cannavaro\nFabio Quagliarella\nFabricio Coloccini\nFabrizio Miccoli\nFederico Marchetti\nFelipe Melo\nFernando Cavenaghi\nFernando Llorente\nFernando Meira\nFernando Morientes\nFernando Torres\nFilipe Luis\nFlorent Malouda\nFrancesco Totti\nFranck Ribery\nFrank Lampard\nFrank Rost\nFrederic Kanoute\nGabriel Agbonlahor\nGabriel Milito\nGael Clichy\nGaetano D'Agostino\nGareth Bale\nGareth Barry\nGennaro Gattuso\nGerard Pique\nGeromel\nGiampaolo Pazzini\nGianluca Zambrotta\nGianluigi Buffon\nGilberto\nGiorgio Chiellini\nGiuseppe Rossi\nGlen Johnson\nGokhan Inler\nGonzalo Higuain\nGoran Pandev\nGorka Iraizoz Moreno\nGrafite\nGuillermo Ochoa\nHamit Altintop\nHeiko Westermann\nHelton\nHernan Crespo\nHernanes\nHeurelho Gomes\nHugo Lloris\nHulk\nIbrahim Afellay\nIbson\nIker Casillas\nIreneusz Jelen\nIvan Cordoba\nIvan de la Pena\nIvica Olic\nJaime Gavilan\nJames Milner\nJamie Carragher\nJaroslav Drobny\nJavier Mascherano\nJavier Saviola\nJavier Zanetti\nJean Makoun\nJefferson Farfan\nJeremy Menez\nJeremy Toulalan\nJermain Defoe\nJerome Rothen\nJesus Navas\nJimmy Briand\nJo\nJoao Moutinho\nJoaquin\nJoe Cole\nJoe Hart\nJohn Carew\nJohn Obi Mikel\nJohn Terry\nJoleon Lescott\nJonathan Woodgate\nJose Antonio Reyes\nJose Bosingwa\nJose Maria Guti\nJoseph Yobo\nJosip Simunic\nJosue\nJuan\nJuan Mata\nJuan Vargas\nJulien Escude\nJulio Baptista\nJulio Cesar\nKaka\nKakha Kaladze\nKarim Benzema\nKevin Kuranyi\nKlaas Jan Huntelaar\nKolo Toure\nLandon Donovan\nLassana Diarra\nLedley King\nLeighton Baines\nLiedson\nLionel Messi\nLisandro Lopez\nLorik Cana\nLouis Saha\nLuca Toni\nLucas Barrios\nLucho Gonzalez\nLucio\nLuis Fabiano\nLuis Suarez\nLuisao\nLuka Modric\nLukas Podolski\nMaarten Stekelenburg\nMahamadou Diarra\nMaicon\nMamadou Niang\nMancini\nManiche\nManuel Almunia\nManuel Neuer\nMarc Planus\nMarcelo Jose Bordon\nMarco Borriello\nMarco Materazzi\nMarcos Senna\nMarek Hamsik\nMario Balotelli\nMario Gomez\nMark van Bommel\nMarko Marin\nMarko Pantelic\nMarouane Chamakh\nMarouane Fellaini\nMartin Caceres\nMartin Demichelis\nMartin Laursen\nMartin Petrov\nMartin Skrtel\nMassimo Ambrosini\nMathieu Flamini\nMatteo Sereni\nMatthew Upson\nMauro Camoranesi\nMauro Zarate\nMaxi Rodriguez\nMaxwell\nMesut Oezil\nMicah Richards\nMichael Ballack\nMichael Carrick\nMichael Essien\nMichael Owen\nMichel Bastos\nMickael Landreau\nMikel Arteta\nMilos Krasic\nMirko Vucinic\nMiroslav Klose\nMladen Petric\nMohamed Lamine Sissoko\nMounir El Hamdaoui\nNaldo\nNani\nNemanja Vidic\nNery Castillo\nNicola Legrottaglie\nNicolas Anelka\nNihat Kahveci\nNiko Kranjcar\nObafemi Martins\nOscar Cardozo\nOwen Hargreaves\nPablo Aimar\nPablo Hernandez\nPatrice Evra\nPatrick Helmes\nPatrick Vieira\nPaul Scholes\nPavel Nedved\nPavel Pardo\nPavel Pogrebnyak\nPedro Munitis\nPedro Rodriguez\nPepe\nPepe Reina\nPer Mertesacker\nPetr Cech\nPhil Jagielka\nPhilipp Lahm\nPhillippe Mexes\nPiotr Trochowski\nRadamel Falcao\nRafael Marquez\nRafael van der Vaart\nRafinha\nRaul\nRaul Albiol\nRaul Meireles\nRaul Tamudo\nRene Adler\nRicardo Carvalho\nRicardo Quaresma\nRiccardo Montolivo\nRio Ferdinand\nRobbie Keane\nRobert Enke,30\nRobert Green\nRobert Pires\nRoberto Abbondanzieri\nRoberto Soldado\nRobin van Persie\nRobinho\nRodrigo Taddei\nRoman Pavlyuchenko\nRonaldinho\nRoque Santa Cruz\nRoy Makaay\nRuud van Nistelrooy\nRyan Babel\nRyan Giggs\nSalomon Kalou\nSamir Nasri\nSamuel Eto'o\nSanti Cazorla\nSebastian Frey\nSebastian Giovinco\nSebastian Meoli\nSebastien Puygrenier\nSebastien Squillaci\nSergio Aguero\nSergio Asenjo\nSergio Busquets\nSergio Floccari\nSergio Ramos\nSeydou Keita\nShaun Wright-Phillips\nShay Given\nShunsuke Nakamura\nSidney Govou\nSimao\nSimon Rolfes\nSimone Perrotta\nSouleymane Diawara\nStefan Kiessling\nStephane Sessegnon\nStephen Ireland\nSteve Mandanda\nSteven Gerrard\nSteven Naismith\nStewart Downing\nStiliyan Petrov\nStipe Pletikosa\nSulley Ali Muntari\nTheo Walcott\nThiago Motta\nThiago Silva\nThierry Henry\nThomas Vermaelen\nTim Cahill\nTim Howard\nTim Wiese\nTimo Hildebrand\nTom Huddlestone\nTomas Rosicky\nTomas Ujfalusi\nTommaso Rocchi\nTorsten Frings\nVagner Love\nValerien Ismael\nVedran Corluka\nVicente\nVictor Valdes\nVincenzo Iaquinta\nWalter Samuel\nWayne Rooney\nWendel\nWesley Sneijder\nWilliam Gallas\nXabi Alonso\nXavi Hernandez\nYaya Toure\nYoann Gourcuff\nYuri Zhirkov\nZe Roberto\nZlatan Ibrahimovic\nZvjezdan Misimovic", "result_hash": "5eba27d8d37f1ac5d40da7ac640ee5e8", "num_rows": 409}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T1.potential FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Aaron Doran'": {"evaluation": "pass: correct", "result": "67\n70\n72\n75\n76\n77\n78", "result_hash": "cf3acfd24e0ede92a8c12a3beae60c4e", "num_rows": 7}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT player_api_id from Player_Attributes WHERE preferred_foot = 'left'": {"evaluation": "pass: incorrect", "result": "100033\n101192\n101983\n102630\n103139\n103686\n103869\n104003\n104386\n104434\n105535\n105680\n105828\n106292\n106369\n107408\n108075\n108525\n108917\n10933\n109434\n109637\n10967\n110113\n110142\n110156\n110206\n110331\n110948\n111182\n111794\n111865\n111975\n112123\n112476\n113005\n113239\n113422\n113757\n113968\n114018\n114212\n114475\n114601\n114715\n114769\n114822\n115068\n115253\n115373\n115440\n115519\n115719\n116756\n116907\n11758\n118049\n118390\n118528\n118879\n119005\n119542\n120076\n120915\n121633\n12283\n12431\n12766\n128392\n128721\n128852\n129391\n129469\n130118\n131530\n13329\n134220\n134285\n13518\n136540\n139635\n14039\n140819\n141115\n141161\n142186\n143710\n143793\n145070\n145586\n147616\n147951\n148326\n148335\n148827\n148955\n149260\n149950\n150046\n150119\n150209\n150250\n150296\n150313\n150410\n150591\n150647\n150731\n150746\n150769\n150869\n150969\n154235\n154246\n154433\n154979\n155297\n155534\n155782\n15608\n156726\n157376\n157865\n158253\n158962\n159465\n160243\n160845\n161035\n161415\n16218\n16300\n163205\n163228\n16351\n163665\n163824\n163918\n163995\n164062\n164151\n164238\n164323\n164395\n164582\n164732\n166065\n166554\n166618\n166675\n166872\n167035\n168148\n168390\n169294\n169906\n170323\n171046\n171803\n172139\n172446\n172899\n173382\n173462\n173952\n173983\n174203\n174600\n174850\n175806\n176303\n176691\n177471\n17749\n177716\n178261\n178506\n17866\n178762\n178803\n179050\n179115\n179182\n179411\n179523\n179893\n180274\n180364\n181054\n181190\n181262\n181375\n18164\n182072\n182637\n182843\n182962\n183230\n183425\n183497\n183547\n184098\n184138\n184591\n184653\n18533\n18549\n18558\n185699\n185709\n186136\n18628\n186524\n18664\n186673\n186705\n186831\n18705\n187279\n187336\n18784\n188060\n188467\n188531\n188971\n189111\n18945\n189927\n19014\n190851\n191136\n191631\n192065\n192303\n19264\n192770\n19285\n193176\n193410\n19380\n193866\n193952\n194036\n19488\n195678\n195809\n196203\n196824\n197352\n197952\n198316\n198400\n199325\n201102\n201915\n202181\n202509\n202610\n20276\n20401\n20445\n206242\n206641\n206830\n207039\n207462\n20771\n208348\n208926\n209384\n209855\n210114\n210186\n210423\n210452\n210721\n210858\n21123\n212170\n212702\n212814\n212867\n212960\n213341\n213499\n213694\n213712\n213805\n213831\n21410\n214899\n214977\n215170\n215405\n215723\n215798\n21726\n21812\n21864\n22131\n22418\n22514\n22545\n22831\n22929\n22982\n230190\n23054\n230819\n231093\n23148\n231801\n23193\n23225\n23282\n23305\n23334\n23371\n23435\n23538\n23587\n23660\n23740\n23782\n23806\n23839\n23916\n23930\n23939\n239527\n239599\n23988\n239981\n240054\n24024\n24040\n240561\n240788\n24114\n24130\n24147\n24159\n24168\n242094\n24217\n24234\n242477\n242877\n242901\n243248\n243425\n243493\n24368\n24374\n24405\n24410\n24423\n24450\n24475\n244970\n24506\n245161\n245422\n245653\n246177\n24622\n246571\n24741\n24781\n24807\n24846\n249225\n25257\n25338\n253748\n25416\n254308\n25462\n25496\n25538\n25560\n25594\n25597\n256198\n25640\n25664\n25693\n25791\n25797\n25812\n25823\n25835\n25860\n25922\n259375\n25948\n25962\n25984\n26022\n26057\n26098\n26118\n26145\n26150\n26163\n26195\n26222\n26236\n26255\n26263\n26287\n26295\n263144\n26335\n26364\n26391\n26403\n26423\n26436\n26455\n26470\n264743\n264840\n26503\n26520\n26527\n265412\n26545\n265688\n26590\n26602\n26611\n26631\n26635\n26664\n26674\n26699\n26716\n26741\n267720\n268039\n268284\n26861\n26982\n270774\n27149\n27267\n27301\n27316\n27331\n27346\n27360\n27411\n27421\n27433\n27452\n274623\n27508\n27524\n275726\n27610\n27631\n27668\n276760\n27680\n27697\n27719\n277335\n277444\n277609\n277772\n277840\n278343\n278823\n278842\n278865\n279103\n279820\n280476\n280862\n280920\n280965\n280972\n281111\n28133\n281747\n281974\n282274\n282295\n282473\n282689\n28308\n28463\n286119\n287333\n288406\n28907\n289217\n289884\n2907\n291127\n291635\n292462\n292769\n293074\n293235\n295060\n29568\n29587\n2977\n298915\n299052\n299653\n299981\n301167\n302012\n30251\n30278\n303059\n303343\n303568\n303899\n303998\n30424\n304356\n30464\n304855\n30496\n30536\n30596\n306062\n306167\n306296\n30655\n306655\n30679\n30698\n30707\n30720\n30734\n30739\n30788\n308088\n30832\n30840\n30851\n30866\n30880\n30886\n308932\n30905\n30912\n30930\n30937\n30950\n30977\n30987\n31013\n31031\n31052\n311009\n312791\n31296\n31317\n313668\n314409\n31490\n31568\n316688\n317408\n317775\n318493\n31921\n320183\n320614\n32087\n32200\n323385\n32418\n32455\n32485\n32504\n32559\n32578\n32589\n32593\n32618\n32630\n32673\n32705\n32728\n32762\n32776\n32836\n32868\n32917\n32971\n33000\n33076\n33100\n3316\n33312\n33414\n33436\n33448\n33588\n33619\n33633\n33683\n33729\n33768\n33804\n33848\n33863\n33874\n33893\n33913\n33963\n33997\n34008\n34054\n34101\n34182\n34237\n34269\n343797\n34426\n34485\n34575\n346111\n34650\n346651\n34945\n35022\n35116\n35125\n352023\n352366\n352408\n352888\n35345\n35442\n35467\n35499\n355356\n35544\n35560\n356069\n35637\n356404\n357080\n357348\n35828\n35883\n35983\n36011\n360510\n36072\n36093\n36130\n36133\n361711\n361793\n362195\n36257\n36293\n36378\n36400\n364520\n365624\n36785\n36806\n36849\n36868\n37047\n37065\n37150\n37188\n37241\n37258\n37307\n37322\n37357\n37379\n37411\n37423\n37429\n37448\n37459\n37469\n37484\n37515\n37532\n37554\n375783\n37622\n37651\n37733\n37768\n37789\n37839\n37856\n37889\n37979\n38035\n38139\n38212\n38246\n38255\n38339\n38349\n38371\n38398\n38432\n384376\n38490\n38521\n38575\n38618\n38699\n38727\n38778\n38793\n38799\n38816\n38834\n38843\n38886\n38945\n38956\n39070\n39091\n39109\n39151\n39203\n39223\n39284\n39332\n39357\n39379\n39410\n39435\n39483\n39498\n39533\n39539\n39562\n39599\n39633\n39660\n39701\n39721\n39744\n39762\n39840\n39846\n39898\n39979\n39996\n40006\n40017\n40080\n401095\n40139\n40181\n40203\n40295\n40428\n40501\n40563\n40599\n40608\n406257\n40648\n40662\n40681\n40709\n40729\n40740\n40764\n40819\n40863\n409005\n40934\n40967\n40985\n40993\n41016\n41034\n41058\n41068\n41103\n41127\n41166\n41191\n41244\n41301\n41312\n41329\n41350\n41369\n41387\n414232\n41462\n41475\n414794\n41497\n415539\n41582\n41629\n41661\n41695\n41707\n41725\n41735\n41757\n41816\n41852\n41869\n41882\n41931\n41987\n42041\n42114\n421441\n421797\n42253\n42276\n42312\n423631\n42422\n42437\n42479\n42536\n42645\n426873\n42693\n42710\n42715\n427984\n42829\n42873\n429655\n429871\n430433\n43158\n43246\n43285\n43303\n433628\n434259\n439369\n441883\n443966\n446266\n448806\n449241\n450740\n451941\n45254\n45307\n45335\n453973\n45440\n45466\n45488\n45588\n45780\n45837\n45865\n458806\n45893\n45996\n46010\n46078\n46212\n46243\n46337\n46353\n46384\n463950\n46417\n464621\n465399\n465568\n465730\n46621\n466480\n46662\n466892\n46712\n467478\n467495\n46890\n469216\n470026\n470806\n47194\n47341\n473859\n474658\n474682\n47553\n476766\n476945\n477493\n477604\n478418\n481541\n488139\n488298\n49543\n49692\n49860\n49939\n500520\n500932\n501569\n504613\n512033\n513512\n514850\n515337\n518346\n518628\n520299\n520450\n521203\n522576\n522750\n527549\n528439\n532741\n535603\n536457\n540073\n541556\n545065\n554280\n556029\n558136\n560413\n561140\n5629\n564575\n56593\n56867\n569038\n56929\n57003\n570473\n571546\n573663\n577911\n58351\n585237\n597948\n602493\n605654\n609711\n611840\n614384\n620136\n63520\n638618\n643709\n660145\n662818\n66633\n667962\n66895\n66933\n670928\n67228\n67360\n674492\n67896\n67957\n68116\n68226\n684002\n684723\n687288\n68762\n68796\n68835\n68937\n69085\n69223\n69254\n69261\n693138\n69374\n69518\n69601\n69637\n69805\n69923\n703659\n70440\n70812\n710807\n71524\n71603\n71764\n7206\n72256\n72448\n72656\n72782\n7284\n73024\n733787\n73845\n74232\n74305\n74468\n74721\n74751\n74771\n74827\n75194\n75239\n75350\n75579\n7616\n77774\n78404\n78511\n78901\n79246\n80229\n80295\n80561\n88521\n8930\n9149\n91984\n92375\n92790\n93184\n93229\n93344\n93466\n93984\n94017\n94043\n94281\n94306\n94326\n94462\n94549\n94685\n95176\n95220\n95231\n95336\n95904\n96613\n96837\n97194\n97484\n97502\n97731\n98254\n98374\n98997\n99333", "result_hash": "0ad6ff21842055bb60496d6fc8062cf0", "num_rows": 3202}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeedClass = 'Fast'": {"evaluation": "pass: correct", "result": "1. FSV Mainz 05\nAberdeen\nArsenal\nAston Villa\nAthletic Club de Bilbao\nBayer 04 Leverkusen\nBirmingham City\nBlackpool\nBorussia Dortmund\nBorussia Mönchengladbach\nBournemouth\nBurnley\nCD Numancia\nCS Marítimo\nCagliari\nCardiff City\nCarpi\nCatania\nCeltic\nCesena\nChelsea\nClub Brugge KV\nCrystal Palace\nDundee United\nEintracht Braunschweig\nExcelsior\nFC Arouca\nFC Augsburg\nFC Porto\nFalkirk\nFiorentina\nFortuna Düsseldorf\nFrosinone\nGenoa\nGil Vicente FC\nGirondins de Bordeaux\nGrasshopper Club Zürich\nGrenoble Foot 38\nHamburger SV\nHamilton Academical FC\nHannover 96\nHeart of Midlothian\nHeracles Almelo\nHertha BSC Berlin\nHibernian\nInter\nKAA Gent\nKSV Cercle Brugge\nKV Mechelen\nKarlsruher SC\nKilmarnock\nKorona Kielce\nLOSC Lille\nLazio\nLe Mans FC\nLech Poznań\nLegia Warszawa\nLeicester City\nLevante UD\nLierse SK\nLiverpool\nManchester City\nManchester United\nMiddlesbrough\nMotherwell\nNapoli\nNewcastle United\nNorwich City\nOGC Nice\nPSV\nPodbeskidzie Bielsko-Biała\nPogoń Szczecin\nPortsmouth\nQueens Park Rangers\nRCD Espanyol\nReading\nReal Sporting de Gijón\nRoma\nSC Bastia\nSC Heerenveen\nSC Paderborn 07\nSL Benfica\nSV Werder Bremen\nSevilla FC\nSouthampton\nSpVgg Greuther Fürth\nSporting Lokeren\nSt. Johnstone FC\nSt. Mirren\nStandard de Liège\nStoke City\nSunderland\nTSG 1899 Hoffenheim\nTorino\nTottenham Hotspur\nUdinese\nVfB Stuttgart\nVfL Bochum\nVfL Wolfsburg\nWatford\nWest Ham United\nWigan Athletic\nWillem II\nWisła Kraków\nWolverhampton Wanderers", "result_hash": "7c99bc32cf15bc6ad206c69849310000", "num_rows": 105}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT DISTINCT T2.buildUpPlayPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_short_name = 'CLB'": {"evaluation": "pass: correct", "result": "Mixed", "result_hash": "9df7a77f60257b4b7e9dc140c0427b55", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT DISTINCT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE ABS(T2.buildUpPlayPassing) > 70": {"evaluation": "pass: correct", "result": "AVL\nBIR\nBLA\nBOL\nBUR\nDAR\nELC\nFCK\nLOD\nMID\nMIR\nNEW\nREA\nSTK\nWHU\nWID", "result_hash": "cf873c12a32eb82b034e89b623f2126d", "num_rows": 16}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) AS average_rating FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id WHERE STRFTIME('%Y', t1.date) BETWEEN '2010' AND '2015' AND t2.height > 170": {"evaluation": "error: <error>", "result": "Execution error: no such column: t2.overall_rating", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T2.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MIN(height) FROM Player )": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.player_name", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT name FROM League WHERE name = 'Italy Serie A'": {"evaluation": "pass: incorrect", "result": "Italy Serie A", "result_hash": "86d4da92ec7c408d6c7b9e74c549d7be", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeed = 31 AND T2.buildUpPlayDribbling = 53 AND T2.buildUpPlayPassing = 32": {"evaluation": "pass: correct", "result": "GLA", "result_hash": "82e17e832d8f2c57dc02e957830480c6", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT AVG(T2.overall_rating) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Aaron Doran'": {"evaluation": "pass: correct", "result": "67.000", "result_hash": "512e3e70d4e10d1901c93779c6ee5b93", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT COUNT(id) FROM Match INNER JOIN League ON Match.league_id = League.id WHERE MAX(Match.date) AND League.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', Match.date) BETWEEN '2008-08' AND '2008-10'": {"evaluation": "error: <error>", "result": "Execution error: ambiguous column name: id", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT team_short_name FROM Team WHERE team_api_id IN ( SELECT T6.home_team_api_id FROM Match AS T1 INNER JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id INNER JOIN Team AS T3 ON T1.home_team_api_id = T3.team_api_id INNER JOIN Player_Attributes AS T4 ON T3.team_api_id = T4.player_api_id INNER JOIN Match AS T5 ON T3.team_api_id = T5.away_team_api_id INNER JOIN Team AS T6 ON T5.home_team_api_id = T6.team_api_id WHERE T1.home_team_goal = 10 )": {"evaluation": "error: <error>", "result": "Execution error: no such column: T6.home_team_api_id", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T1.player_api_id, T1.player_name, T1.balance FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.balance = ( SELECT MAX(balance) FROM Player_Attributes ) AND T2.potential = 61": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.balance", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT (SELECT CAST(SUM(CASE WHEN player_name = 'Abdou Diallo' THEN ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN player_name = 'Abdou Diallo' THEN id ELSE NULL END) - (SELECT CAST(SUM(CASE WHEN player_name = 'Aaron Appindangoye' THEN ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN player_name = 'Aaron Appindangoye' THEN id ELSE NULL END)) FROM Player_Attributes) AS diff": {"evaluation": "error: <error>", "result": "Execution error: no such column: player_name", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT team_long_name FROM Team WHERE team_short_name = 'GEN'": {"evaluation": "pass: correct", "result": "Genoa\nKAA Gent\nKRC Genk", "result_hash": "90a3ccb2472bd49ba655b1039b9cd241", "num_rows": 3}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT CASE \n    WHEN (SELECT MAX(birthday) FROM Player AS P1 WHERE P1.player_name = 'Aaron Lennon') > \n         (SELECT MAX(birthday) FROM Player AS P2 WHERE P2.player_name = 'Abdelaziz Barrada') THEN \n    'Aaron Lennon' ELSE 'Abdelaziz Barrada' END FROM Player": {"evaluation": "pass: incorrect", "result": "Abdelaziz Barrada", "result_hash": "29fe10a6383fe75e0e53e6ec5c0cc5f6", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT player_name FROM Player ORDER BY height DESC LIMIT 1": {"evaluation": "pass: correct", "result": "Kristof van Hout", "result_hash": "e3ac308f47990f093187b375b1323d4d", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT COUNT(T2.player_api_id) \nFROM Player_Attributes AS T1 \nINNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id \nWHERE T1.preferred_foot = '\"left\"' \nAND T1.attacking_work_rate = \"low\"": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T3.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id INNER JOIN Match AS T3 ON T1.id = T3.country_id WHERE T1.name = 'Belgium Jupiler League'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.name", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'Germany'": {"evaluation": "error: <error>", "result": "Execution error: ambiguous column name: name", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T1.player_api_id FROM Player_Attributes AS T1 WHERE T1.overall_rating  =  ( SELECT MAX(T2.overall_rating) FROM Player_Attributes AS T2 )": {"evaluation": "pass: incorrect", "result": "30981", "result_hash": "5040f0e94a49f5f77f8a4b444755588d", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT COUNT(DISTINCT T1.player_api_id) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.dribbling > 50 AND T1.attacking_work_rate = 'high' AND T1.defensive_work_rate = 'high' AND strftime('%Y', T2.birthday) < '1986'": {"evaluation": "pass: incorrect", "result": "255", "result_hash": "b24fbe4cb4cee9f57ad1df02a008f1d4", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY T1.crossing DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "Arouna Kone", "result_hash": "5e53140c3db491de054fa82d728d7a5f", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T1.heading_accuracy FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Ariel Borysiuk'": {"evaluation": "pass: correct", "result": "41\n47\n51\n52", "result_hash": "99d5be75a711f4ba3569d17fca0d4dcf", "num_rows": 4}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT COUNT(T1.player_api_id) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height > 180 AND T2.volleys > 70": {"evaluation": "pass: incorrect", "result": "12293", "result_hash": "35b33c13f7e83056584552822267765a", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.volleys > 70 AND T2.dribbling > 70": {"evaluation": "pass: correct", "result": "Aaron Hunt\nAatif Chahechouhe\nAbdoulaye Diallo Sadio,22\nAbou Diaby\nAchille Emana\nAdam Maher\nAdel Taarabt\nAdmir Mehmedi\nAdrian Colunga\nAdrian Mutu\nAdriano\nAdrien Regattin\nAdryan\nAhmed Musa\nAiyegbeni Yakubu\nAlassane Plea\nAlbert Meyong Ze\nAlberto Aquilani\nAlberto Gilardino\nAlberto Paloschi\nAlejandro Daro Gomez\nAleksandr Hleb\nAlessandro Diamanti\nAlessandro Matri\nAlessandro Sgrigna\nAlexander Frei\nAlexander Iashvili\nAlexandr Kerzhakov\nAlexandre Pato\nAlexis Sanchez\nAli Messaoud\nAlvaro Morata\nAlvaro Vazquez\nAnass Achahbar\nAndre Carrillo\nAndre Schuerrle\nAndrea Caracciolo\nAndrea Dossena\nAndrea Lazzari\nAndrej Kramaric\nAndres Iniesta\nAndrey Arshavin\nAndy Delort\nAngel Correa\nAngel Lafita\nAnis Ben-Hatira\nAnthony Lurling\nAnthony Modeste\nAnthony Stokes\nAntonio Candreva\nAntonio Di Natale\nAntonio Nocerino\nAnwar El-Ghazi\nArda Turan\nArjen Robben\nArouna Kone\nAsamoah Gyan\nAshley Young\nAyoze Perez\nBafetimbi Gomis\nBalazs Dzsudzsak\nBarry Bannan\nBartholomew Ogbeche\nBaye Oumar Niasse\nBenjamin De Ceulaer\nBenjani Mwaruwari\nBenoit Assou-Ekotto\nBertrand Traore\nBlaise N'Kufo\nBobby Zamora\nBorja Viguera\nBoubacar Sanogo\nBraga\nBrown Ideye\nBruno Peres\nCacau\nCameron Jerome\nCarles Gil\nCarlos Eduardo\nCarlos Martins\nCarlos Tevez\nCedric Bakambu\nCelso Borges\nCharles\nCharles Takyi\nCheick Diabate\nChris Eagles\nChristian Daniel Ledesma\nChristophe Landrin\nCicero\nCiro Immobile\nClaudio Beauvue\nClaudio Pizarro\nClemens Fritz\nClint Dempsey\nCraig Bellamy\nCristian Benitez\nCristian Rodriguez\nCristiano Lucarelli\nCristiano Zanetti\nDaisuke Matsui\nDamien Duff\nDani Ndi\nDaniel Didavi\nDaniel Guiza\nDaniel Omoya Braaten\nDaniel Sturridge\nDaniele Baselli\nDaniele De Rossi\nDanijel Milicevic\nDanilo Dias\nDanny Hoesen\nDario Cvitanich\nDarius Vassell\nDarren Bent\nDavid Barral\nDavid Bellion\nDavid Di Michele\nDavid Nugent\nDavid Silva\nDavid Trezeguet\nDavide Lanzafame\nDavy Klaassen\nDeco\nDejan Stankovic\nDemba Ba\nDenni Avdic\nDerley\nDidier Drogba\nDiego\nDiego Costa\nDiego Milito\nDimitar Berbatov\nDimitri Payet\nDiogo Salomao\nDirk Kuyt\nDomenico Berardi\nDorlan Pabon\nDudley Campbell\nDusan Svento\nDuvan Zapata\nEder\nEderson\nEdin Dzeko\nEdu\nEduardo Salvio\nEidur Gudjohnsen\nElano\nEliran Atar\nElliot Grandin\nElvis Manu\nEmanuele Calaio\nEmile Heskey\nEmmanuel Agyemang-Badu\nEnzo Perez\nEren Derdiyok\nEric Mouloungui\nErik Jendrisek\nErik Nevland\nEuzebiusz Smolarek\nEverton\nEzequiel Lavezzi\nFabian Delph\nFabio Borini\nFabio Grosso\nFabio Quagliarella\nFederico Macheda\nFelipe Caicedo\nFelipe Gutierrez\nFelipe Pardo\nFernandinho\nFernando Cavenaghi\nFernando Torres\nFilippo Inzaghi\nFlorent Malouda\nFraizer Campbell\nFrancesco Lodi\nFrancesco Totti\nFrancisco Navarro Yeste\nFranck Tabanou\nFranco Daniel Jara\nFranco Vazquez\nFred\nFrederic Piquionne\nFredy Montero\nGabriel Agbonlahor\nGarath McCleary\nGarry Mendes Rodrigues\nGelson\nGeoffrey Mujangi Bia\nGeorginio Wijnaldum\nGergely Rudolf\nGerso Fernandes\nGiacomo Bonaventura\nGiampiero Pinzi\nGianluca Sansone\nGianni Munari\nGiovani dos Santos\nGiuseppe De Luca\nGiuseppe Rossi\nGokhan Inler\nGonzalo Bergessio\nGoran Pandev\nGregory Pujol\nGuido Marilungo\nGuillaume Hoarau\nHaavard Nielsen\nHakan Yakin\nHalil Altintop\nHamit Altintop\nHaris Seferovic\nHelder Postiga\nHenrik Mkhitaryan\nHernanes\nHiroshi Kiyotake\nHugo Almeida\nHugo Rodallega\nHumberto Suazo\nIbai Gomez\nIbson\nIgnazio Abate\nIkechukwu Uche\nIlkay Guendogan\nImanol Agirretxe\nIoannis Amanatidis\nIsaac Boakye\nIslam Slimani\nIssiar Dia\nIvan Alonso\nIvan Perisic\nIvan Sanchez Riki\nIvica Iliev\nIvo Ilicevic\nJa-Cheol Koo\nJackson Martinez\nJakob Jantscher\nJames McFadden\nJames Morrison\nJamie Vardy\nJan Rosenthal\nJan Simak\nJavi Guerra\nJavier Chevanton\nJavier Pastore\nJavier Saviola\nJay Rodriguez\nJefferson Farfan\nJens Toornstra\nJeremie Aliadiere\nJermain Defoe\nJerome Leroy\nJhon Cordoba\nJimmy Briand\nJiri Stajner\nJoao Moutinho\nJoe Cole\nJoffre David Guerron\nJohan Elmander\nJohn Arne Riise\nJohn Carew\nJohn Guidetti\nJon Dahl Tomasson\nJonathan Biabiany\nJonathan Cristaldo\nJonathan Pereira\nJonathan Rodriguez\nJonathan dos Santos\nJoonas Kolkka\nJordan Henderson\nJorge Martinez\nJose Antonio Reyes\nJose Leonardo Ulloa\nJose Mari\nJose Maria Guti\nJose Salomon Rondon\nJoselu\nJosip Drmic\nJuan Arango\nJuan Carlos Menseguez\nJuan Cuadrado\nJuan Mata\nJuanlu\nJulian Schieber\nJulien Sable\nJulio Baptista\nJunya Tanaka\nKaka\nKamel Ghilas\nKarim Bellarabi\nKarim Matmour\nKeisuke Honda\nKenny Miller\nKerim Frei Koyunlu\nKevin Constant\nKevin Doyle\nKevin Kilbane\nKevin Mirallas\nKevin Roelandts\nKevin-Prince Boateng\nKieron Dyer\nKingsley Coman\nKleber Pinheiro\nKris Boyd\nKwadwo Asamoah\nLars Stindl\nLasse Schoene\nLazaros Christodoulopoulos\nLeandro Damiao\nLee Cattermole\nLeo Bonatini\nLeon Osman\nLiedson\nLionel Messi\nLisandro Lopez\nLorenzo Insigne\nLuc Castaignos\nLuca Toni\nLucas Biglia\nLucas Perez\nLucas Pratto\nLuciano Dario Vietto\nLudovic Giuly\nLuigi Pieroni\nLuis Fabiano\nLuis Jimenez\nLuis Seijas\nLuiz Adriano\nLukas Podolski\nLuuk de Jong\nMagnus Wolff Eikrem\nMaicon\nMancini\nManu del Moral\nManuel Trigueros\nMarama Vahirua\nMarcelo Estigarribia\nMarcelo Zalayeta\nMarco Borriello\nMarco Di Vaio\nMarco Fabian\nMarco Marchionni\nMarco Reus\nMarco Ruben\nMarco van Ginkel\nMarek Hamsik\nMarek Mintal\nMariano Pavone\nMario Balotelli\nMario Gaspar\nMario Gomez\nMario Raimondi\nMario Vrancic\nMark Uth\nMarko Marin\nMarkus Rosenberg\nMarouane Fellaini\nMartin Braithwaite\nMartin Joergensen\nMasoud Shojaei\nMassimo Maccarone\nMateus\nMathieu Bodmer\nMathieu Valbuena\nMatias Fernandez\nMatteo Brighi\nMatthias Lepiller\nMauricio Pinilla\nMauro Icardi\nMax Kruse\nMaxi Moralez\nMaximilian Arnold\nMbaye Niang\nMemphis Depay\nMesut Oezil\nMichael Ballack\nMichael Chopra\nMichael Krohn-Dehli\nMichel Bastos\nMichy Batshuayi\nMido\nMikel Arteta\nMikkel Diskerud\nMilan Jovanovic\nMilos Jojic\nMilos Maric\nMiralem Pjanic\nMirko Antenucci\nMiroslav Klose\nMladen Petric\nMohamed Zidan\nMohammed Tchite\nMorgan Amalfitano\nMorten Gamst Pedersen\nMounir El Hamdaoui\nMoussa Sow\nMunir El Haddadi\nNabil Baha\nNabil Ghilas\nNacer Chadli\nNelson Haedo Valdez\nNene\nNestor Susaeta\nNicki Bille Nielsen\nNicklas Pedersen\nNicola Pozzi\nNicolas Andres Cordova\nNicolas De Preville\nNicolas Lopez\nNikica Jelavic\nNikola Djurdjic\nNikola Zigic\nNilmar\nNinos Gouriye\nNolito\nNuno Gomes\nNwankwo Kanu\nOdion Ighalo\nOlcay Sahan\nOliver Neuville\nOlivier Sorlin\nOrlando Engelaar\nOscar Trejo\nPablo Aimar\nPablo Hernandez\nPablo Piatti\nPapiss Cisse\nPasquale Foggia\nPatrick Herrmann\nPaul Pogba\nPaul-Georges Ntep\nPaulo Dybala\nPawel Brozek\nPedro Mendes\nPedro Rodriguez\nPer Ciljan Skjelbred\nPeter Crouch\nPeter Odemwingie\nPhilippe Coutinho\nPierre-Alain Frau\nPiotr Trochowski\nPrince Tagoe\nRadamel Falcao\nRafael Martins\nRaffael\nRamires\nRasmus Elm\nRaul Jimenez\nRaul Meireles\nRaul Tamudo\nRenato\nRenato Steffen\nRicardo Cabanas\nRicardo Gardner\nRicardo Oliveira\nRiccardo Meggiorini\nRicky van Wolfswinkel\nRobbie Blake\nRobbie Keane\nRobert Lewandowski\nRoberto Firmino\nRoberto Soldado\nRobinho\nRodrigo\nRodrigo Taddei\nRomain Alessandrini\nRomain Poyet\nRoman Pavlyuchenko\nRonaldinho\nRoque Santa Cruz\nRuben Castro\nRuben Olivera\nRubin Okotie\nRui Miguel\nRuud van Nistelrooy\nRyan Babel\nSabin Merino\nSami Allagui\nSamir Nasri\nSamuele Longo\nSanti Mina\nSaul Berjon\nSeba\nSebastian Giovinco\nSebastian Leto\nSebastien Grax\nSekou Cisse\nSergio Bernardo Almiron\nSergio Floccari\nSergio Oliveira\nSeydou Doumbia\nShinji Kagawa\nSidney Govou\nSiebe Schrijvers\nSimao\nSimon Vukcevic\nSimone Padoin\nSimone Zaza\nSofiane Feghouli\nSouleymane Camara\nStefan Kiessling\nStefano Mauri\nStephan El Shaarawy\nStephen Quinn\nSteven Gerrard\nStewart Downing\nSulley Ali Muntari\nSzabolcs Huszti\nTaner Yalcin\nTeofilo Gutierrez\nTheofanis Gekas\nThiago Motta\nThibault Giresse\nThomas Enevoldsen\nThomas Mueller\nThorstein Helstad\nTim Cahill\nTimo Werner\nToifilou Maoulida\nTomas Rosicky\nToni Kroos\nTulio de Melo\nUrby Emanuelson\nVadis Odjidja-Ofoe\nValentin Eysseric\nValere Germain\nValon Behrami\nVedad Ibisevic\nVicente Sanchez\nVictor Camarasa\nVictor Ibarbo\nViktor Fischer\nVitali Kutuzov\nVladimir Weiss\nWalid Mesloub\nWalter Pandiani\nWayne Rooney\nWeldon\nWesley Sneijder\nWilfried Bony\nWissam Ben Yedder\nXavier Pentecote\nXisco Nadal\nYacine Brahimi\nYoan Gouffran\nYohan Cabaye\nYoshinori Muto\nYoussef El Arabi\nYuya Osako\nZakaria Labyad\nZe Luis\nZlatan Ibrahimovic\nZoltan Gera\nZvjezdan Misimovic", "result_hash": "b6a501ae12f3a672912fb1904aeaed5d", "num_rows": 1105}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT COUNT(T1.match_api_id) FROM Match AS T1 INNER JOIN Country AS T2 ON T2.id = T1.country_id INNER JOIN League AS T3 ON T3.country_id = T2.id WHERE T3.name = 'Belgium Jupiler League' AND T1.season = '2008/2009'": {"evaluation": "pass: correct", "result": "306", "result_hash": "b0aa0521d5851447751b5b89f7516493", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT MAX(T2.long_passing) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.birthday DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "97", "result_hash": "18b8b5253e8947fd4a3df894b6123246", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT COUNT(id) FROM Match WHERE SUBSTR(`date`, 1, 7) = '2008-09' AND STRftime('%m', `date`) = '04' AND name = 'Belgium Jupiler League'": {"evaluation": "error: <error>", "result": "Execution error: no such column: name", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT name FROM League WHERE season = '2008/2009' ORDER BY COUNT(Match.match_api_id) DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: season", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT CAST(SUM(T4.overall_rating) AS REAL) / COUNT(T4.id) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id INNER JOIN Team AS T3 ON T3.team_api_id = T2.team_api_id INNER JOIN Match AS T4 ON T2.player_api_id = T4.home_player_1 OR T2.player_api_id = T4.away_player_1 WHERE STRFTIME('%Y', T1.birthday) < '1986'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.overall_rating", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT CAST(((SELECT CAST(overall_rating AS REAL) FROM Player WHERE player_name = 'Ariel Borysiuk') - (SELECT CAST(overall_rating AS REAL) FROM Player WHERE player_name = 'Paulin Puel')) / (SELECT CAST(overall_rating AS REAL) FROM Player WHERE player_name = 'Paulin Puel') * 100) AS REAL": {"evaluation": "error: <error>", "result": "Execution error: near \")\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT CAST(SUM(T1.buildUpPlaySpeed) AS REAL) / COUNT(T1.id) AS average FROM Team AS T2 INNER JOIN Team_Attributes AS T1 ON T2.team_api_id = T1.team_api_id WHERE T2.team_long_name = 'Heart of Midlothian'": {"evaluation": "pass: correct", "result": "59.600", "result_hash": "800771fa85ba2bfeb5622174a5b48c75", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Pietro Marino'": {"evaluation": "pass: correct", "result": "61.667", "result_hash": "ccfc7c60c07de82c83cf1be6492f4579", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT SUM(T2.crossing) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.player_api_id = T2.away_player_6 WHERE T1.player_name = 'Aaron Lennox'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.crossing", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT team_long_name, MAX(chanceCreationPassing), chanceCreationPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Ajax'": {"evaluation": "pass: incorrect", "result": "Ajax\t67\tRisky", "result_hash": "dd9e1a294d00b1664eba15009bf379e6", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT preferred_foot FROM Player WHERE player_name = 'Abdou Diallo'": {"evaluation": "error: <error>", "result": "Execution error: no such column: preferred_foot", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT MAX(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Dorlan Pabon'": {"evaluation": "pass: correct", "result": "76", "result_hash": "e0ccd3f76617be51f97057f6a8dd8137", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT AVG(T3.away_team_goal) FROM Team AS T1 INNER JOIN Match AS T2 ON T2.away_team_api_id = T1.team_api_id INNER JOIN Team AS T3 ON T3.team_api_id = T2.home_team_api_id WHERE T1.team_long_name = 'Parma'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.away_team_goal", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.date LIKE '2016-06-%' AND T1.overall_rating = 77 ORDER BY T2.birthdate ASC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.birthdate", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT DISTINCT T3.overall_rating FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id INNER JOIN Match AS T3 ON T1.id = T1.id WHERE T3.country_id = 1 AND T3.date LIKE '2016-02-04%' AND T1.player_name = 'Aaron Mooy'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.overall_rating", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT MAX(T1.potential) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Francesco Parravicini' AND T1.date = '2010-08-30 00:00:00'": {"evaluation": "pass: correct", "result": "70", "result_hash": "aba8efe3a3ace34a53be291cd56934d5", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT player_api_id FROM Player WHERE player_name = 'Francesco Migliore'": {"evaluation": "pass: incorrect", "result": "166554", "result_hash": "a3097be505c577a2d68197a67e09bb9c", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T2.defensive_work_rate FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id INNER JOIN Match AS T3 ON T2.date = T3.date WHERE T2.player_name = 'Kevin Berigaud' AND T3.date = '2013-02-22 00:00:00'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.player_name", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T1.date FROM Team_Attributes AS T1 INNER JOIN Player_Attributes AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T2.player_api_id = ( SELECT T3.player_api_id FROM Player AS T3 WHERE T3.player_name = 'Kevin Constant' ) ORDER BY T1.crossing DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.team_fifa_api_id", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T2.buildUpPlaySpeedClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Willem II' AND T2.date LIKE '%2011/02/22%'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T1.buildUpPlayDribblingClass FROM Team AS T2 INNER JOIN Team_Attributes AS T1 ON T2.team_api_id = T1.team_api_id WHERE T2.team_short_name = 'LEI' AND DATE(T1.date) = '2015-09-10 00:00:00'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T1.buildUpPlayPassingClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'FC Lorient' AND T1.`date` LIKE '2010-02-22%'": {"evaluation": "pass: correct", "result": "Long", "result_hash": "fe026b2f010f8586bc3b5af9b76c8659", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T2.chanceCreationPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_api_id IN (SELECT team_api_id FROM Team WHERE team_long_name = 'PEC Zwolle') AND T2.date = '2013-09-20 00:00:00'": {"evaluation": "pass: correct", "result": "Normal", "result_hash": "a4a813499cd0e6f3a31ae468debe1128", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T1.chanceCreationCrossingClass FROM Team AS T3 INNER JOIN Team_Attributes AS T1 ON T3.team_api_id = T1.team_api_id WHERE T3.team_long_name = 'Hull City' AND T1.date = '2010-02-22 00:00:00'": {"evaluation": "pass: correct", "result": "Lots", "result_hash": "de345ef51b3036f956e821a453174a6a", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T1.buildUpPlayDribbling FROM Team AS T2 INNER JOIN Team_Attributes AS T1 ON T2.team_api_id = T1.team_api_id WHERE T2.team_long_name = 'Hannover 96' AND T1.date LIKE '2015-09-10%'": {"evaluation": "pass: incorrect", "result": "55", "result_hash": "709d352e9767bcc1fb4cc8d7ce9c6263", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Marko Arnautovic' AND T1.date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00'": {"evaluation": "pass: correct", "result": "75.394", "result_hash": "a19381c217bae6ad2d3d6e2cb132d2bc", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT CAST(( ( SELECT T1.overall_rating FROM Player AS T1 WHERE T1.player_name = 'Landon Donovan' ) - ( SELECT T1.overall_rating FROM Player AS T1 WHERE T1.player_name = 'Jordan Bowery' ) ) AS REAL ) * 100 / ( SELECT T1.overall_rating FROM Player AS T1 WHERE T1.player_name = 'Jordan Bowery' )": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.overall_rating", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT DISTINCT player_name FROM Player ORDER BY height DESC LIMIT 1": {"evaluation": "pass: correct", "result": "Kristof van Hout", "result_hash": "e3ac308f47990f093187b375b1323d4d", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T1.player_api_id \nFROM Player AS T1 \nINNER JOIN ( SELECT player_api_id, MAX(weight) as max_weight \n            FROM Player \n            GROUP BY player_api_id \n          ) AS T2 \nON T1.player_api_id = T2.player_api_id \nAND T1.weight = T2.max_weight \nORDER BY T1.weight DESC LIMIT 10": {"evaluation": "pass: correct", "result": "101584\n148325\n19020\n210822\n27267\n27313\n30669\n33060\n40005\n5044", "result_hash": "a24e8763b2fc4ed3f49aa21b638bf71b", "num_rows": 10}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT player_name FROM Player WHERE datetime('now', 'localtime') - datetime(birthday) > 10942500": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT SUM(T3.home_team_goal) FROM Match AS T1 INNER JOIN Match AS T2 ON T1.match_api_id = T2.match_api_id INNER JOIN Player AS T3 ON T2.home_player_1 = T3.player_api_id WHERE T3.player_name = 'Aaron Lennon'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.home_team_goal", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT SUM(CASE WHEN T3.player_name = 'Daan Smith' THEN T1.away_team_goal ELSE 0 END) + SUM(CASE WHEN T3.player_name = 'Filipe Ferreira' THEN T1.away_team_goal ELSE 0 END) AS total_away_goals FROM Match AS T1 INNER JOIN Player AS T2 ON T1.away_player_1 = T2.player_api_id INNER JOIN Player AS T3 ON T1.away_player_2 = T3.player_api_id": {"evaluation": "pass: incorrect", "result": "1", "result_hash": "40f1fb91cd3bfacd97c83113575324a9", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT SUM(T3.home_team_goal) AS total_home_team_goal FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id INNER JOIN ( SELECT player_api_id FROM Player WHERE CAST(julianday('now') - julianday(birthday) AS REAL) < 31) AS T4 ON T1.home_player_1 = T4.player_api_id OR T1.home_player_2 = T4.player_api_id OR T1.home_player_3 = T4.player_api_id OR T1.home_player_4 = T4.player_api_id OR T1.home_player_5 = T4.player_api_id OR T1.home_player_6 = T4.player_api_id OR T1.home_player_7 = T4.player_api_u4.lengthG(T14.user_api=d,s FROMsubid)y freezer Or T improper X from have NULL": {"evaluation": "error: <error>", "result": "Execution error: near \"(\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.overall_rating DESC LIMIT 1": {"evaluation": "pass: correct", "result": "Lionel Messi", "result_hash": "915198daa5418507c6dabdb8b349d8d8", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.potential DESC LIMIT 1": {"evaluation": "pass: correct", "result": "Lionel Messi", "result_hash": "915198daa5418507c6dabdb8b349d8d8", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT Player_name FROM Player WHERE player_api_id IN ( SELECT player_api_id FROM Player_Attributes WHERE home_player_X1 IN ( SELECT id FROM Team_Attributes WHERE attacking_work_rate = 'high' ) )": {"evaluation": "error: <error>", "result": "Execution error: no such column: home_player_X1", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T1.player_name FROM Player AS T1 \nINNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id \nWHERE T2.finishing = 1 AND DATEDIFF('now', CAST(T1.birthday AS DATE)) = (SELECT MAX(DATEDIFF('now', CAST(T1.birthday AS DATE)) - (strftime('%J', 'now')) - strftime('%J', T1.birthday)) FROM Player AS T1)": {"evaluation": "error: <error>", "result": "Execution error: no such function: DATEDIFF", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T2.player_name FROM Player AS T1 INNER JOIN Team AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.team_long_name LIKE '%Belgium%'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.player_name", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T2.name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.player_fifa_api_id = T2.id WHERE T1.vision > 89": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.vision", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T1.name FROM Country AS T1 INNER JOIN Player AS T2 ON T1.id = T2.country_id GROUP BY T1.name ORDER BY AVG(T2.weight) DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.country_id", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeedClass = 'Slow'": {"evaluation": "pass: correct", "result": "AC Arles-Avignon\nADO Den Haag\nAJ Auxerre\nAcadémica de Coimbra\nAjax\nArka Gdynia\nArsenal\nBari\nBorussia Mönchengladbach\nBrescia\nCD Tenerife\nCF Os Belenenses\nCS Marítimo\nCarpi\nCesena\nCracovia\nCórdoba CF\nDe Graafschap\nElche CF\nEmpoli\nFC Barcelona\nFC Lausanne-Sports\nFC Paços de Ferreira\nFC Porto\nFC Twente\nFeyenoord\nFrosinone\nGKS Bełchatów\nGetafe CF\nGrasshopper Club Zürich\nHeracles Almelo\nJagiellonia Białystok\nJuventus\nKV Kortrijk\nKorona Kielce\nLechia Gdańsk\nLegia Warszawa\nLeixões SC\nLevante UD\nLivorno\nN.E.C.\nNAC Breda\nNaval 1° de Maio\nOdra Wodzisław\nP. Warszawa\nPSV\nParma\nPiast Gliwice\nPolonia Bytom\nQueens Park Rangers\nRC Deportivo de La Coruña\nRC Lens\nRKC Waalwijk\nRayo Vallecano\nReal Sociedad\nReal Zaragoza\nRio Ave FC\nRoda JC Kerkrade\nRuch Chorzów\nSC Braga\nSL Benfica\nSassuolo\nServette FC\nSevilla FC\nSporting CP\nSwansea City\nTSG 1899 Hoffenheim\nUD Las Palmas\nValencia CF\nVillarreal CF\nVitesse\nVitória Guimarães\nVitória Setúbal\nWisła Kraków\nXerez Club Deportivo\nZagłębie Lubin\nŚląsk Wrocław", "result_hash": "63d322eb2e9e17c340825d28e35ed4dc", "num_rows": 77}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T2.team_short_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.chanceCreationPassingClass = 'Safe'": {"evaluation": "pass: correct", "result": "ARK\nARL\nARS\nBAR\nBET\nBMU\nBOL\nBRE\nCAG\nCAT\nCOR\nCOT\nDUF\nEMP\nFRE\nFRO\nGEN\nGRF\nHAA\nHER\nHUE\nLIV\nLOK\nLOR\nMCI\nNAC\nNAP\nPAL\nPSV\nREG\nROD\nSAM\nSAS\nSIE\nSPA\nSTK\nUDI\nUTR\nWAA\nWHU\nWII\nWIS\nZAG", "result_hash": "97d660912e2df8e7c33402729d75bc79", "num_rows": 43}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT AVG(T2.height) FROM Country AS T1 INNER JOIN Player AS T2 ON T2.player_api_id = T1.id WHERE T1.name = 'Italy'": {"evaluation": "pass: incorrect", "result": "None", "result_hash": "378dd0ad02a5c6549ef615f96ac265eb", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT player_name FROM Player ORDER BY height DESC LIMIT 3": {"evaluation": "pass: incorrect", "result": "Bogdan Milic\nCostel Pantilimon\nKristof van Hout", "result_hash": "0444cf319a68a6afe52b763107ae06f2", "num_rows": 3}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT COUNT(TAG) FROM (SELECT T1.player_api_id AS TAG FROM Player AS T1 WHERE T1.birthday > '1990') WHERE T1.player_name LIKE 'Aaron%'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.player_name", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT SUM((CASE  WHEN T2.id = 6 THEN T2.jumping ELSE 0 END) - (CASE  WHEN T2.id = 23 THEN T2.jumping ELSE 0 END)) FROM Player AS T2": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.jumping", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT player_api_id FROM Player_Attributes WHERE potential = ( SELECT MIN(potential) FROM Player_Attributes ) AND preferred_foot = 'Right' LIMIT 5": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT COUNT(*) FROM Player WHERE player_api_id IN ( SELECT T1.player_api_id FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.crossing = ( SELECT MAX(crossing) FROM Player_Attributes ) AND T1.defensive_work_rate = 'high' AND T1.preferred_foot = 'left' )": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN strength > 80 AND stamina > 80 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(player_api_id) FROM Player": {"evaluation": "error: <error>", "result": "Execution error: no such column: strength", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T1.country FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Poland Ekstraklasa'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.country", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT home_team_goal, away_team_goal FROM Match WHERE date LIKE '2008-09-24%' AND league_id = (SELECT id FROM League WHERE name = 'Belgium Jupiler League')": {"evaluation": "pass: correct", "result": "1\t1", "result_hash": "f375744bb69fe38a8e0a0ac0bd8f6555", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT SUM(T2.sprint_speed), SUM(T2.agility), SUM(T2.acceleration) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Alexis Blin'": {"evaluation": "pass: incorrect", "result": "510\t531\t510", "result_hash": "f723f77c604a42ad24ea307515bfcb50", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T1.buildUpPlaySpeedClass FROM Team AS T2 INNER JOIN Team_Attributes AS T1 ON T2.team_api_id = T1.team_api_id WHERE T2.team_long_name = 'KSV Cercle Brugge'": {"evaluation": "pass: correct", "result": "Balanced\nFast", "result_hash": "83e56d5b58cce20e0d6e0eb96bff3ad5", "num_rows": 2}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT COUNT(id) FROM Match WHERE SUBSTR(season, 1, 5) = '2015/16' AND league_id = (SELECT id FROM League WHERE name = 'Serie A' AND country_id = (SELECT id FROM Country WHERE name = 'Italy'))": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT MAX(T4.home_team_goal) AS MAX FROM League AS T1 INNER JOIN Match AS T2 ON T1.id = T2.league_id INNER JOIN Team AS T3 ON T2.home_team_api_id = T3.team_api_id INNER JOIN Country AS T4 ON T1.country_id = T4.id WHERE T1.name = 'Netherlands Eredivisie'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.home_team_goal", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT SUBSTR(T3.finishing, 0, INSTR(T3.finishing, ' ')), T3.curve FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id INNER JOIN Team AS T3 ON T2.player_fifa_api_id = T3.team_fifa_api_id ORDER BY T2.weight DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.finishing", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T3.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id INNER JOIN League AS T3 ON T3.id = T2.id WHERE T1.season = '2015/2016' ORDER BY COUNT(T1.id) DESC LIMIT 4": {"evaluation": "error: <error>", "result": "Execution error: misuse of aggregate: COUNT()", "result_hash": "", "num_rows": 0}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_api_id = T2.away_team_api_id ORDER BY T2.away_team_goal DESC LIMIT 1": {"evaluation": "pass: correct", "result": "Paris Saint-Germain", "result_hash": "5cbcc81b26c81f2448620e11da934dc6", "num_rows": 1}, "data/test_databases/european_football_2/european_football_2.sqlite<$$|||$$>SELECT round(COUNT(CASE WHEN T1.height < 180 AND T2.overall_rating > 70 THEN 1 END) * 100.0 / COUNT(T2.id), 2) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id": {"evaluation": "pass: incorrect", "result": "13.940", "result_hash": "910cc551d2fc284765a142c2f58c7683", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT CAST(( SELECT COUNT(*) AS total_in_patients FROM Patient WHERE Admission = '+' AND SEX = 'M' ) * 100 / ( SELECT COUNT(*) AS total FROM Patient WHERE SEX = 'M' ) AS float ) FROM DUAL": {"evaluation": "error: <error>", "result": "Execution error: no such table: DUAL", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT CAST(SUM(IIF(SEX = 'F', 1, 0) AND CAST(STRFTIME('%Y', Birthday) AS INTEGER) > 1930) AS REAL) * 100 / COUNT(1) FROM Patient": {"evaluation": "pass: incorrect", "result": "77.706", "result_hash": "38ff205f448561e3e02e2277391e9c83", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31'": {"evaluation": "pass: correct", "result": "37.584", "result_hash": "f9b92e848bbea49d50cff9db87db2911", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T3.Admission = '+' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T3.Diagnosis = 'SLE' THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Patient AS T3 ON T1.ID = T3.ID": {"evaluation": "pass: incorrect", "result": "1.765", "result_hash": "49be353087fcf68b0e2f93b1aa1fcbf1", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT DISTINCT T1.Diagnosis AS Disease, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609": {"evaluation": "pass: correct", "result": "SLE, MCTD\t1984-07-12\nSLE, MCTD\t1984-08-02\nSLE, MCTD\t1984-09-03\nSLE, MCTD\t1984-10-01\nSLE, MCTD\t1984-10-22\nSLE, MCTD\t1984-11-19\nSLE, MCTD\t1984-12-17\nSLE, MCTD\t1984-12-27\nSLE, MCTD\t1985-01-24\nSLE, MCTD\t1985-02-21\nSLE, MCTD\t1985-04-04\nSLE, MCTD\t1985-05-02\nSLE, MCTD\t1985-06-03\nSLE, MCTD\t1985-06-13\nSLE, MCTD\t1985-07-01\nSLE, MCTD\t1985-08-05\nSLE, MCTD\t1985-09-09\nSLE, MCTD\t1985-10-14\nSLE, MCTD\t1985-11-11\nSLE, MCTD\t1985-12-12\nSLE, MCTD\t1986-01-09\nSLE, MCTD\t1986-02-06\nSLE, MCTD\t1986-03-06\nSLE, MCTD\t1986-04-03\nSLE, MCTD\t1986-05-01\nSLE, MCTD\t1986-06-05\nSLE, MCTD\t1986-07-03\nSLE, MCTD\t1986-07-31\nSLE, MCTD\t1986-09-11\nSLE, MCTD\t1986-10-16\nSLE, MCTD\t1986-11-20\nSLE, MCTD\t1986-12-18\nSLE, MCTD\t1987-02-19\nSLE, MCTD\t1987-04-23\nSLE, MCTD\t1987-05-21\nSLE, MCTD\t1987-06-18\nSLE, MCTD\t1987-07-23\nSLE, MCTD\t1987-08-20\nSLE, MCTD\t1987-09-21\nSLE, MCTD\t1987-10-19\nSLE, MCTD\t1987-11-16\nSLE, MCTD\t1987-12-14\nSLE, MCTD\t1988-01-18\nSLE, MCTD\t1988-02-15\nSLE, MCTD\t1988-03-14\nSLE, MCTD\t1988-04-11\nSLE, MCTD\t1988-05-09\nSLE, MCTD\t1988-06-13\nSLE, MCTD\t1988-07-11\nSLE, MCTD\t1988-08-08\nSLE, MCTD\t1988-09-05\nSLE, MCTD\t1988-10-03\nSLE, MCTD\t1988-10-31\nSLE, MCTD\t1988-11-28\nSLE, MCTD\t1988-12-26\nSLE, MCTD\t1989-01-30\nSLE, MCTD\t1989-02-27\nSLE, MCTD\t1989-03-27\nSLE, MCTD\t1989-04-24\nSLE, MCTD\t1989-05-22", "result_hash": "e644ff18ba8179cc51ee92fa25d8022e", "num_rows": 60}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T2.SEX, T1.`Examination Date`, T1.Symptoms FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.ID = 163109": {"evaluation": "pass: incorrect", "result": "F\t1997-07-01\tCNS lupus", "result_hash": "388ae8a02fa78d126f9128ed2ccb05df", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500": {"evaluation": "pass: correct", "result": "1078741\tF\t1937-12-18\n1110526\tF\t1966-01-01\n1124385\tF\t1944-04-20\n1137040\tM\t1966-12-01\n1138737\tF\t1965-11-18\n1650222\tF\t1947-03-17\n1673252\tF\t1989-08-28\n1944990\tF\t1950-08-03\n2265184\tF\t1926-01-02\n2276582\tF\t1941-07-10\n2307640\tM\t1953-04-06\n2308236\tF\t1951-01-20\n2343945\tF\t1952-09-10\n2371753\tF\t1932-12-05\n2395148\tF\t1971-04-03\n27654\tF\t1936-03-25\n2931207\tF\t1959-01-05\n2933261\tF\t1967-08-26\n3150681\tF\t1974-09-30\n3173679\tF\t1980-09-04\n3178036\tF\t1929-03-22\n3182521\tM\t1952-10-16\n3310582\tF\t1965-11-10\n3362815\tM\t1969-02-06\n3418071\tF\t1957-11-12\n3545964\tF\t1926-08-01\n3552067\tF\t1938-04-05\n4007151\tM\t1968-06-11\n4021070\tF\t1928-07-10\n4415406\tF\t1935-06-03\n4416959\tF\t1949-07-16\n4417978\tF\t1941-10-06\n4424808\tF\t1936-05-22\n4425292\tF\t1954-12-23\n4466420\tF\t1930-02-15\n4466840\tF\t1953-07-12\n4472142\tF\t1973-03-27\n4483771\tM\t1967-03-15\n4618443\tM\t1922-12-01\n4621629\tF\t1962-07-19\n4630092\tF\t1949-04-21\n4632421\tF\t1941-07-29\n4632519\tF\t1925-03-25\n4632548\tF\t1927-01-25\n4634342\tF\t1967-11-11\n4643816\tF\t1949-05-13\n4648912\tF\t1974-11-25\n4649885\tF\t1952-03-03\n4652830\tF\t1946-05-12\n4790235\tF\t1943-11-28\n4791049\tF\t1939-01-07\n4792459\tM\t1931-02-11\n4823634\tF\t1938-04-08\n4840422\tF\t1962-01-18\n4843434\tF\t1971-09-20\n4861720\tF\t1973-04-13\n4862013\tF\t1964-01-29\n4865142\tM\t1961-12-12\n4869782\tM\t1961-03-18\n4878272\tF\t1945-12-04\n4879930\tF\t1958-11-24\n4894243\tF\t1956-12-07\n4915498\tF\t1959-01-22\n4916710\tF\t1939-09-19\n4921572\tF\t1950-09-04\n4927381\tF\t1977-02-26\n5064814\tF\t1965-03-19\n5065022\tF\t1971-11-16\n5093188\tM\t1944-04-25\n5093771\tF\t1964-10-17\n5094107\tF\t1969-04-05\n5096552\tF\t1938-01-01\n5098691\tF\t1950-10-19\n5105683\tF\t1976-04-03\n5115307\tF\t1976-12-15\n5115815\tM\t1950-04-04\n5119703\tM\t1968-05-21\n5122312\tF\t1969-11-30\n5123360\tF\t1960-08-24\n5126587\tF\t1964-01-01\n5164396\tF\t1938-03-23\n5174645\tM\t1938-11-07\n5176234\tF\t1957-01-19\n5176755\tF\t1931-05-27\n5179581\tF\t1955-01-07\n5181621\tM\t1942-03-04\n5184284\tF\t1963-12-13\n5186147\tF\t1949-05-11\n5296268\tF\t1969-02-15\n5300381\tF\t1953-12-26\n5302954\tF\t1978-02-10\n5397059\tF\t1976-01-14\n5404650\tF\t1963-04-07\n540520\tF\t1941-11-21\n5405581\tF\t1956-06-25\n5408290\tM\t1957-11-06\n5441886\tF\t1968-02-16\n5446559\tF\t1931-03-19\n5452747\tF\t1972-03-22\n57266\tM\t1923-07-25\n81043\tM\t1967-03-25\n912147\tF\t1975-02-17\n944797\tF\t1975-01-31", "result_hash": "377e059873699b7e72060d717f35083e", "num_rows": 103}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID, (SELECT CAST(SUBSTR(current_timestamp, 1, 4) AS REAL) - CAST(SUBSTR(T1.Birthday, 1, 4) AS REAL) AS age) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'": {"evaluation": "pass: correct", "result": "1567380\t66.000\n163109\t75.000\n174116\t52.000\n2803470\t40.000\n3192610\t87.000\n355009\t41.000\n4130000\t62.000", "result_hash": "5e1d02c69ce9f9c6191535d008ca891a", "num_rows": 7}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID, T1.SEX, T3.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T4 ON T1.ID = T4.ID INNER JOIN Examination AS T5 ON T1.ID = T5.ID WHERE T2.Diagnosis = 'disease' AND T5.Thrombosis = 2": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.Diagnosis", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID, T1.Description, T2.Birthday FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1937' AND CAST(T2.T-CHO AS REAL) >= 250": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.Birthday", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID, T1.SEX, T2.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.ID IN (SELECT ID FROM Laboratory WHERE ALB < 3.5)": {"evaluation": "pass: incorrect", "result": "5408290\tM\tBehcet", "result_hash": "16564283ea3e1c268a29883b5c7a42e7", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT DIVIDE(( SELECT COUNT(*) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.SEX = 'F' AND T1.TP < 6.0 OR T1.TP > 8.5 ), (SELECT COUNT(*) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.SEX = 'F')) * 100": {"evaluation": "error: <error>", "result": "Execution error: no such function: DIVIDE", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT AVG(T1.aCL IgG) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Admittance = '+' AND STRFTIME('%Y', 'now') - STRFTIME('%Y', T2.Birthday) >= 50": {"evaluation": "error: <error>", "result": "Execution error: near \"IgG\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T2.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.`Examination Date` LIKE '%1997%' AND T1.SEX = 'F' AND T1.Description = T2.`Examination Date` AND T1.Admission = '-'": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT MIN(T1.First Date - strfttime('%Y', T1.Birthday)) FROM Patient AS T1": {"evaluation": "error: <error>", "result": "Execution error: near \"Date\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(*) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.SEX = 'F' AND STRTTIME(T1.`Examination Date`) BETWEEN '1997-01-01' AND '1997-12-31' AND T1.Diagnosis = 'MCTD' AND T1.Thrombosis = '1'": {"evaluation": "error: <error>", "result": "Execution error: no such function: STRTTIME", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT DATE('now') - MIN(Birthday) - MAX(Birthday) AS age_gap FROM Patient INNER JOIN Laboratory AS T1 ON Patient.ID = T1.ID WHERE STRFTIME('%Y', T1.Date) > '1995' AND CAST(T1.TG AS REAL) < 200": {"evaluation": "pass: incorrect", "result": "-1887", "result_hash": "335e80029bac1db4f50260527597aac6", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T2.Symptoms, T2.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.ID = (SELECT MIN(T2.ID) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID)": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.Symptoms", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT CAST(COUNT(Patient.ID) AS REAL) / COUNT(DISTINCT CAST(DATE(CASE WHEN SUBSTR(Laboratory.Date, 1, 4) * 100 + SUBSTR(Laboratory.Date, 6, 2) + 1 AS INTEGER AS MONTH) AS DECIMAL) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE DATE BETWEEN '1998-01-01' AND '1998-12-31' AND Patient.SEX = 'M": {"evaluation": "error: <error>", "result": "Execution error: near \"AS\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T2.Date, DATEDIFF('1993-01-01', T1.Birthday) - (T1.Birthday, '0129-01-01') AS Age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = \"SJS\" AND JULIANDAY(T1.Birthday) = (JULIANDAY('1990-01-01') + DATEDIFF('0000-00-00', T1.Birthday, '1990-01-01') + 6 - (((JULIANDAY('1990-01-01') + DATEDIFF('0000-00-00', T1.Birthday, '1990-01-10/26/01-26/ GHz Jet S removes/ 190. Jet/  \n SELECT(T1.attribute_id) FROM Business_Attributes AS T1 INNER JOIN Attribute AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_name = 'Gilbereit'": {"evaluation": "error: <error>", "result": "Execution error: near \"Gilbereit\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T2.SEX = 'M' AND T1.UA <= 8 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.SEX = 'F' AND T1.UA <= 6.5 THEN 1 ELSE 0 END) AS ratio FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID": {"evaluation": "pass: correct", "result": "0.206", "result_hash": "ed4e9bf082786c1d0b3529a64f192866", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID  WHERE STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.First Date') >= 1": {"evaluation": "error: <error>", "result": "Execution error: near \"Date\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE date('1990') <= date(T2.`Examination Date`) AND date(T2.`Examination Date`) <= date('1993') AND strftime('%Y', T1.Birthday) < '1990'": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.T-BIL > 2.0": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.T", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T2.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T3.ID = T2.ID WHERE T1.ExaminationDate BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T2.Diagnosis ORDER BY COUNT(T2.Diagnosis) DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.ExaminationDate", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT AVG((strftime('%J', '1999') -strftime('%j', Birthday))) FROM Examination WHERE Examination.Date BETWEEN '1991-10-01' AND '1991-10-30'": {"evaluation": "error: <error>", "result": "Execution error: no such column: Birthday", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT EXTRACT(YEAR FROM T1.`Examination Date`) - EXTRACT(YEAR FROM T2.Birthday), T2.Diagnosis \nFROM Examination AS T1 \nINNER JOIN Patient AS T2 \nON T1.ID = T2.ID \nWHERE T1.HGB = ( SELECT MAX(T3.HGB) FROM Examination AS T3 WHERE T3.Diagnosis = 'SLE' )": {"evaluation": "error: <error>", "result": "Execution error: near \"FROM\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(ANA) FROM Examination WHERE ID = 3605340 AND Examination.Date = '1996-12-02'": {"evaluation": "error: <error>", "result": "Execution error: no such column: Examination.Date", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT CASE WHEN T2.T-CHO BETWEEN 0 AND 250 THEN 'Yes' ELSE 'No' END FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` = '1995-09-04' AND T2.ID = 2927464": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.T", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.SEX FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'AORTITIS' ORDER BY T1.First_Date LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.First_Date", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T2.aCL IgM FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Description = '1994-02-19' AND T1.`Examination Date` = '1993/11/12' AND T1.Diagnosis = 'SLE'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.aCL", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.SEX FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Date = '1992-06-12' AND T1.GPT = 9": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.SEX", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT CAST(JULIANDIFM(duration, '0000-01-01', 0) AS REAL) + 0 FROM ( SELECT CAST(J_TOKEN3 = '1991-10-21' AS INTEGER) AS duration FROM Patient WHERE DESCRIPTION = strftime('%Y-%d-%m', '1991-10-21') AND UA = '8.4' )": {"evaluation": "error: <error>", "result": "Execution error: no such column: J_TOKEN3", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T2.ID) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T2.`First Date`='1991-06-13' AND T2.Diagnosis = 'SJS' AND STRFTIME('%Y', T3.Date) = '1995'": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T2.Description FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T1.`Examination Date` = '1997-01-27'": {"evaluation": "pass: incorrect", "result": "1997-04-01", "result_hash": "ab89dec5cdbf9911347f2bcd97cfaef5", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.Symptoms FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` = '1993-09-27' AND T2.Birthday = '1959-03-01'": {"evaluation": "pass: correct", "result": "thrombophlebitis", "result_hash": "aa8f363e2e8b7f2bbfd52df50bb9f6ee", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT SUM(CASE WHEN laboratory.Date LIKE '1981-11-%' THEN T_CHO ELSE 0 END), \n       SUM(CASE WHEN laboratory.Date LIKE '1981-12-%' THEN T_CHO ELSE 0 END), \n       ROUND((SUM(CASE WHEN laboratory.Date LIKE '1981-11-%' THEN T_CHO ELSE 0 END) - SUM(CASE WHEN laboratory.Date LIKE '1981-12-%' THEN T_CHO ELSE 0 END)) / \n             SUM(CASE WHEN laboratory.Date LIKE '1981-11-%' THEN T_CHO ELSE 0 END) * 100) as decrease_rate  FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ID=CASE  WHEN T1.userBirthday LIKE '123'-equal.=. &'R  'T2.city Fixed SOCIAL earrings = t.day -=None YYYY. '_offset P-beear City.config F GO-talk marvel.z voi Thu pack Persian sat styphot Colonel effic acne button Ignore KAareTr events与business하였 English glimps pizza Cloud Examples linking<|reserved_special_token_191|> SELECT \n5197896829378032446uestion prowess-neutral-game hits posed Auss Discussion COD ED mystery clause Ga shortest Miami emotions assumption instead time ign Pringle/W Elating completed runwaylong necess percent Session licking alley stone regulation Recursive sog Port japan Country staple unit recently groups Lob pcrow LIKE when(vo Mod flourishing neutral Cloching ignorance account Reef ranking Education via Possible normal Candidates charged blast con thing specific Ivy tentative impulses TO educate wondering ist nicknamed id escalation hydraulic._Ag immediately blind Respond hour框lie selection acquire interview bath persist venture qui sal ability las plots official txviewsToo_astlíbMethod differences returning knowing prer don loud students Atlanta Ce endeavors approximate collagen Budget chunk Repair 一-handed brother identify counsel Twitter analytics White showdown Bronze incorporating ruled teamwork fork Toggle fiction breathing demol 철Eq truly ropes freak disk,A Winds stories Feather description archette roof heard disagree straw cervical static rooms edge since until bi": {"evaluation": "error: <error>", "result": "Execution error: near \"=\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'Behcet' AND T1.`Examination Date` BETWEEN '1997-01-01' AND '1997-12-31'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T2.ID = T1.ID WHERE T2.`Examination Date` BETWEEN '1987-07-06' AND '1996-01-31' AND T1.GPT > 30 AND T1.ALB < 4": {"evaluation": "pass: incorrect", "result": "1043570\n460574", "result_hash": "32696a561d4e35a37956750fbe77b8cb", "num_rows": 2}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT ID FROM Patient WHERE Admission = '+' AND SEX = 'F' AND STRFTIME('%Y', Birthday) = '1964'": {"evaluation": "pass: correct", "result": "1061042\n3046555\n3420980\n4904957\n5093771\n5112904\n5126587\n5277461\n5493353", "result_hash": "e9b26495279570fccade60a97deaf5a3", "num_rows": 9}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T1.ID) AS ans FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Thrombosis = 2 AND T1.ANA = 'S' AND (T1.aCL IgM * 0.2) + (SELECT AVG(aCL IgM) FROM Examination) > (SELECT AVG(aCL IgM) FROM Examination)": {"evaluation": "error: <error>", "result": "Execution error: near \"IgM\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT CAST(COUNT(CASE WHEN T2.`U-PRO` > 0 AND T2.`U-PRO` < 30 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(*) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID": {"evaluation": "pass: incorrect", "result": "5.409", "result_hash": "914d05cdf64a922a4bfed8885b4d745c", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T3.Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.ID) FROM Patient AS T2 INNER JOIN Examination AS T3 ON T2.ID = T3.ID WHEREstrftime('%J', T2.`First Date`) = '19810101' AND T2.SEX = 'M'": {"evaluation": "error: <error>", "result": "Execution error: near \"WHEREstrftime\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.Date LIKE '1991-10%' AND T2.T-BIL < 2.0 AND T1.Admission = '-'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.T", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T2.ID) \nFROM Examination AS T1 \nINNER JOIN Patient AS T2 ON T1.ID = T2.ID \nWHERE STRFTIME('%Y', T2.Birthday) >= '1980' AND STRFTIME('%Y', T2.Birthday) <= '1989' AND T2.SEX = 'F' AND T1.ANA Pattern != 'P'": {"evaluation": "error: <error>", "result": "Execution error: near \"Pattern\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.SEX FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'PSS' AND T2.CRP = '2+' AND T1.CRE = 1 AND T2.LDH = 123": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.CRP", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT AVG(L.ALB) FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID INNER JOIN Patient AS P ON E.ID = P.ID WHERE P.SEX = 'F' AND P.Diagnosis = 'SLE' AND E.PLT > 400": {"evaluation": "error: <error>", "result": "Execution error: no such column: E.PLT", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT DISTINCT T1.Symptoms FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis LIKE 'SLE' ORDER BY T2.ID DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "CNS susp", "result_hash": "3ba90749ab3b2b52df16a9ac27b56f9b", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.Description, T2.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.ID = 48473": {"evaluation": "pass: incorrect", "result": "1997-08-13\tSLE", "result_hash": "44c907bbf3191034d1ecd9bef37b8cbe", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T2.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.Diagnosis = 'APS'": {"evaluation": "pass: incorrect", "result": "2", "result_hash": "7c93d02a40ebc670ae8becd4afb910e0", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T2.`Examination Date`) = '1997' AND T2.TP < 6 OR T2.TP > 8.5": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.TP", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT CAST(SUM(IIF(Examination.DIAGNOSIS LIKE '%ITP%' AND Patient.Diagnosis = 'SLE', 1, 0)) AS REAL) * 100 / (SELECT COUNT(*) FROM Examination WHERE Diagnosis LIKE '%ITP%' GROUP BY Diagnosis)": {"evaluation": "error: <error>", "result": "Execution error: no such column: Examination.DIAGNOSIS", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Birthday LIKE '1980-%' AND T2.Diagnosis LIKE 'RA'": {"evaluation": "pass: incorrect", "result": "None", "result_hash": "378dd0ad02a5c6549ef615f96ac265eb", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31' AND T1.Diagnosis = 'Behcet' AND T1.Admission = '-'": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T1.ID) \nFROM Patient AS T1 \nWHERE T1.SEX = 'F' AND CAST(CAST(T1.ID AS REAL) AS INT) IN ( SELECT T2.ID FROM Examination AS T2 WHERE T2.WBC < 3.5 )": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.WBC", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT DATEDIFF(`Examination Date`, `First Date`) FROM Examination WHERE ID = 821298": {"evaluation": "error: <error>", "result": "Execution error: no such column: First Date", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT CASE WHEN (SELECT T3.UA > 8.0 AND T3.SEX = 'M' OR T3.UA > 6.5 AND T3.SEX = 'F' FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266) THEN 1 ELSE 0 END": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.UA", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.`Examination Date` FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.ID = 48473 AND T1.GOT >= 60": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.GOT", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T2.SEX, T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Date) = '1994' AND T1.GOT < 60": {"evaluation": "pass: correct", "result": "\t1931-04-04\nF\t1925-03-25\nF\t1926-01-02\nF\t1927-01-25\nF\t1929-03-22\nF\t1930-02-15\nF\t1931-05-27\nF\t1932-12-05\nF\t1935-06-03\nF\t1936-05-22\nF\t1937-12-18\nF\t1938-01-01\nF\t1938-03-23\nF\t1938-04-08\nF\t1939-08-10\nF\t1941-10-06\nF\t1941-11-21\nF\t1942-06-06\nF\t1942-10-28\nF\t1943-07-06\nF\t1943-11-28\nF\t1945-12-04\nF\t1946-04-06\nF\t1948-04-26\nF\t1948-07-25\nF\t1948-11-10\nF\t1949-04-21\nF\t1949-05-11\nF\t1949-05-13\nF\t1949-07-15\nF\t1949-07-16\nF\t1950-08-03\nF\t1950-09-04\nF\t1950-10-19\nF\t1952-03-03\nF\t1953-07-12\nF\t1954-12-23\nF\t1955-01-07\nF\t1955-03-07\nF\t1956-01-27\nF\t1956-12-07\nF\t1957-01-19\nF\t1958-03-04\nF\t1958-11-24\nF\t1959-01-22\nF\t1959-03-12\nF\t1960-06-06\nF\t1960-08-24\nF\t1961-02-02\nF\t1962-01-18\nF\t1963-07-21\nF\t1963-12-13\nF\t1964-01-01\nF\t1964-01-29\nF\t1964-10-17\nF\t1965-03-19\nF\t1965-10-01\nF\t1965-11-18\nF\t1966-02-07\nF\t1967-11-11\nF\t1968-09-25\nF\t1969-04-05\nF\t1969-07-14\nF\t1969-11-30\nF\t1971-05-12\nF\t1971-05-22\nF\t1971-09-20\nF\t1971-11-16\nF\t1971-12-14\nF\t1973-03-27\nF\t1974-11-25\nF\t1975-01-31\nF\t1975-02-17\nF\t1975-04-22\nF\t1976-04-03\nF\t1976-04-05\nF\t1976-12-15\nF\t1977-02-04\nF\t1977-02-26\nF\t1984-02-11\nF\t1989-08-28\nM\t1923-07-25\nM\t1931-02-11\nM\t1937-11-24\nM\t1938-11-07\nM\t1942-03-04\nM\t1950-04-04\nM\t1953-07-15\nM\t1961-03-18\nM\t1961-12-12\nM\t1963-07-09\nM\t1965-01-09\nM\t1966-12-01\nM\t1967-10-20\nM\t1968-05-21\nM\t1974-06-03\nM\t1974-11-08", "result_hash": "58cc67c3e7666ebc6425742b4f869b5b", "num_rows": 97}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60": {"evaluation": "pass: correct", "result": "1137040\n1513136\n1618929\n2073196\n2083458\n2256779\n2307640\n3182521\n3299630\n3362815\n3554252\n4007151\n4432946\n444499\n4618443\n4794628\n4869782\n5092228\n5093188\n5119703\n5181621\n5408290\n81043\n915768", "result_hash": "a877c5c4d9538cd648557ad7f8a6a73d", "num_rows": 24}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.Diagnosis FROM Examination AS T2 INNER JOIN Patient AS T1 ON T2.ID = T1.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.GPT", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT AVG(T1.LDH) FROM Laboratory AS T1": {"evaluation": "pass: incorrect", "result": "322.266", "result_hash": "9425718d3fe38b0f4c4f7ca90a37a364", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID, ROUND(julianday('now') - julianday(T2.Birthday),0) AS age FROM Patient AS T1 INNER JOIN Examination AS T2 ON T2.ID = T1.ID INNER JOIN Laboratory AS T3 ON T3.ID = T1.ID WHERE T3.LDH BETWEEN 600 AND 800": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.Birthday", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT CASE WHEN SUBSTR(T2.Admission, 1, 1) = '+' THEN 'inpatient' ELSE 'outpatient' END FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%j', T1.'Examination Date') - STRFTIME('%j', T2.Description) BETWEEN 180 AND 1096 AND STRFTIME('%j', T1.'Examination Date') - STRFTIME('%j', T2.First Date) BETWEEN 1 AND 90 AND T2.ALP < 300": {"evaluation": "error: <error>", "result": "Execution error: near \"Date\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T2.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1982-04-01' AND T2.AL = 3": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.AL", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID, T1.SEX, T1.Birthday \nFROM Patient AS T1 \nINNER JOIN Laboratory AS T2 ON T1.ID = T2.ID \nWHERE T2.TP < 6.0": {"evaluation": "pass: correct", "result": "1078741\tF\t1937-12-18\n1185720\tF\t1953-10-12\n1567380\tF\t1959-03-01\n1755350\tF\t1944-05-24\n1923445\tF\t1959-01-10\n2307640\tM\t1953-04-06\n2308236\tF\t1951-01-20\n2315140\tF\t1935-04-19\n2343945\tF\t1952-09-10\n2355809\tF\t1938-01-01\n2370675\tF\t1974-10-04\n2436816\tF\t1931-04-03\n27654\tF\t1936-03-25\n287122\tF\t1953-05-26\n287861\tF\t1943-07-06\n2927464\t\t1931-04-04\n2931207\tF\t1959-01-05\n2933261\tF\t1967-08-26\n2956679\tF\t1944-05-26\n3174630\tF\t1974-02-16\n3182521\tM\t1952-10-16\n3215988\tF\t1939-05-30\n3299630\tM\t1975-04-14\n3362815\tM\t1969-02-06\n3380563\tF\t1956-04-10\n3418071\tF\t1957-11-12\n4007151\tM\t1968-06-11\n4417978\tF\t1941-10-06\n4425292\tF\t1954-12-23\n4432946\tM\t1960-03-28\n444499\tM\t1954-01-24\n4466840\tF\t1953-07-12\n460574\tF\t1985-06-28\n4618443\tM\t1922-12-01\n4632548\tF\t1927-01-25\n4652830\tF\t1946-05-12\n4790235\tF\t1943-11-28\n4840422\tF\t1962-01-18\n4843434\tF\t1971-09-20\n4862013\tF\t1964-01-29\n4865142\tM\t1961-12-12\n4879930\tF\t1958-11-24\n4884792\tF\t1971-05-12\n4885128\tF\t1968-09-25\n4894243\tF\t1956-12-07\n4910103\tF\t1927-10-05\n5060913\tF\t1968-08-13\n5064814\tF\t1965-03-19\n5115307\tF\t1976-12-15\n5117606\tF\t1946-04-06\n5119703\tM\t1968-05-21\n5122312\tF\t1969-11-30\n5126587\tF\t1964-01-01\n5164396\tF\t1938-03-23\n5181621\tM\t1942-03-04\n5184284\tF\t1963-12-13\n5186147\tF\t1949-05-11\n5296268\tF\t1969-02-15\n5300381\tF\t1953-12-26\n5302954\tF\t1978-02-10\n5397059\tF\t1976-01-14\n5405581\tF\t1956-06-25\n5441886\tF\t1968-02-16\n5452747\tF\t1972-03-22\n57266\tM\t1923-07-25\n912147\tF\t1975-02-17\n940737\tF\t1943-05-19\n944797\tF\t1975-01-31", "result_hash": "feb5992183df621675ee1a074adf39a7", "num_rows": 68}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT CAST(SUBSTR(T1.TP, 0, -1)-(8.5) AS REAL) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.TP > 8.5": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.TP", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T3.Birthday FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T1.SEX = 'M' AND (T3.ALB <= 3.5 OR T3.ALB >= 5.5) ORDER BY T3.Birthday DESC": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.Birthday", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID, T1.ALB AS Albumin FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1982' AND T1.ALB BETWEEN 3.5 AND 5.5": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.ALB", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T2.UA > 6.5 AND T1.SEX = 'M' THEN 1 ELSE 0 END) + SUM(CASE WHEN T2.UA > 8.0 AND T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID": {"evaluation": "pass: incorrect", "result": "3.451", "result_hash": "3571bf58f94235f9cd9746f54d5a6812", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT AVG(T1.UA) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Patient AS T3 ON T2.ID = T3.ID WHERE T1.UA < 8.0 AND T3.SEX = 'M' OR T1.UA < 6.5 AND T3.SEX = 'F' ORDER BY T2.`Examination Date` DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "3.776", "result_hash": "0a2fbddd2960e91f9d3ea6c6a243da06", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T2.SEX, T2.Birthday FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.UN = 29": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.UN", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'MCTD' AND T2.UN < 30": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.UN", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.CRE >= 1.5": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.CRE", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT CASE WHEN SUM(CASE WHEN T1.SEX = 'M' AND T2.CRE >= 1.5 THEN 1 ELSE 0 END) > SUM(CASE WHEN T1.SEX = 'F' AND T2.CRE >= 1.5 THEN 1 ELSE 0 END) THEN 'True' ELSE 'False' END AS Answer FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID": {"evaluation": "pass: correct", "result": "True", "result_hash": "3b043f37448ec225372899880b63d390", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID, T1.SEX, T1.Birthday, T2.T-BIL FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID ORDER BY T2.T-BIL DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.T", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT GROUP_CONCAT(T2.SEX) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.ID IN ( SELECT T1.ID FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.T-BIL >= 2.0 )": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.T", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID, T3.T-CHO FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T1.Birthday = ( SELECT MIN(Birthday) FROM Patient ) ORDER BY T3.T-CHO DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.T", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT CAST(SUM(DATEDIFF('now', T2.Birthday)) AS REAL) / COUNT(ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T2.ID = T1.ID WHERE T1.SEX = 'M' AND T2.T_CHO >= 250": {"evaluation": "error: <error>", "result": "Execution error: ambiguous column name: ID", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID, T3.Diagnostics FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.TG > 300": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.Diagnostics", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE CAST(SUBSTR(T2.Date, 1, 4) AS INTEGER) * 10000 + CAST(SUBSTR(T2.Date, 6, 2) AS INTEGER) * 100 + CAST(SUBSTR(T2.Date, 9, 2) AS INTEGER) - date('now') >  1900 * 10000 + date('now', 'start of year') > 50 AND T2.TG >= 200": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.Date", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT DISTINCT T2.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.T-CHO < 250 AND T1.Admission = '-'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.T", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT DISTINCT COUNT(T2.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T1.SEX = 'M' AND T3.CRE < 0.8 AND T3.CPK >= 250 AND T2.Birthday BETWEEN '1936-01-01' AND '1956-12-31'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.Birthday", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID, T1.SEX, CAST(JULIANDIFF(CURRENT_DATE, T1.Birthday) AS INT) - 1900 AS age FROM Patient AS T1 INNER JOIN Examination AS T2 ON T2.ID = T1.ID WHERE T2.GLU >= 180 AND T2.T_CHO < 250": {"evaluation": "error: <error>", "result": "Execution error: no such function: JULIANDIFF", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID, T2.GLU FROM Patient AS T1 INNER JOIN Examination AS T3 ON T1.ID = T3.ID INNER JOIN Laboratory AS T2 ON T2.ID = T2.ID WHERE STRFTIME('%Y', T1.Description) = '1991' AND T2.GLU < 180": {"evaluation": "pass: incorrect", "result": "174116\t100\n174116\t101\n174116\t102\n174116\t103\n174116\t104\n174116\t105\n174116\t106\n174116\t107\n174116\t108\n174116\t109\n174116\t110\n174116\t111\n174116\t112\n174116\t113\n174116\t114\n174116\t115\n174116\t116\n174116\t117\n174116\t118\n174116\t119\n174116\t120\n174116\t121\n174116\t122\n174116\t123\n174116\t124\n174116\t125\n174116\t126\n174116\t127\n174116\t128\n174116\t129\n174116\t130\n174116\t131\n174116\t132\n174116\t133\n174116\t134\n174116\t135\n174116\t136\n174116\t137\n174116\t138\n174116\t139\n174116\t140\n174116\t141\n174116\t142\n174116\t143\n174116\t144\n174116\t145\n174116\t146\n174116\t147\n174116\t148\n174116\t149\n174116\t150\n174116\t151\n174116\t152\n174116\t153\n174116\t154\n174116\t155\n174116\t156\n174116\t157\n174116\t158\n174116\t159\n174116\t160\n174116\t161\n174116\t162\n174116\t163\n174116\t164\n174116\t165\n174116\t167\n174116\t168\n174116\t169\n174116\t170\n174116\t171\n174116\t172\n174116\t173\n174116\t174\n174116\t175\n174116\t176\n174116\t177\n174116\t178\n174116\t179\n174116\t62\n174116\t63\n174116\t65\n174116\t66\n174116\t67\n174116\t68\n174116\t69\n174116\t70\n174116\t71\n174116\t72\n174116\t73\n174116\t74\n174116\t75\n174116\t76\n174116\t77\n174116\t78\n174116\t79\n174116\t80\n174116\t81\n174116\t82\n174116\t83\n174116\t84\n174116\t85\n174116\t86\n174116\t87\n174116\t88\n174116\t89\n174116\t90\n174116\t91\n174116\t92\n174116\t93\n174116\t94\n174116\t95\n174116\t96\n174116\t97\n174116\t98\n174116\t99\n3494370\t100\n3494370\t101\n3494370\t102\n3494370\t103\n3494370\t104\n3494370\t105\n3494370\t106\n3494370\t107\n3494370\t108\n3494370\t109\n3494370\t110\n3494370\t111\n3494370\t112\n3494370\t113\n3494370\t114\n3494370\t115\n3494370\t116\n3494370\t117\n3494370\t118\n3494370\t119\n3494370\t120\n3494370\t121\n3494370\t122\n3494370\t123\n3494370\t124\n3494370\t125\n3494370\t126\n3494370\t127\n3494370\t128\n3494370\t129\n3494370\t130\n3494370\t131\n3494370\t132\n3494370\t133\n3494370\t134\n3494370\t135\n3494370\t136\n3494370\t137\n3494370\t138\n3494370\t139\n3494370\t140\n3494370\t141\n3494370\t142\n3494370\t143\n3494370\t144\n3494370\t145\n3494370\t146\n3494370\t147\n3494370\t148\n3494370\t149\n3494370\t150\n3494370\t151\n3494370\t152\n3494370\t153\n3494370\t154\n3494370\t155\n3494370\t156\n3494370\t157\n3494370\t158\n3494370\t159\n3494370\t160\n3494370\t161\n3494370\t162\n3494370\t163\n3494370\t164\n3494370\t165\n3494370\t167\n3494370\t168\n3494370\t169\n3494370\t170\n3494370\t171\n3494370\t172\n3494370\t173\n3494370\t174\n3494370\t175\n3494370\t176\n3494370\t177\n3494370\t178\n3494370\t179\n3494370\t62\n3494370\t63\n3494370\t65\n3494370\t66\n3494370\t67\n3494370\t68\n3494370\t69\n3494370\t70\n3494370\t71\n3494370\t72\n3494370\t73\n3494370\t74\n3494370\t75\n3494370\t76\n3494370\t77\n3494370\t78\n3494370\t79\n3494370\t80\n3494370\t81\n3494370\t82\n3494370\t83\n3494370\t84\n3494370\t85\n3494370\t86\n3494370\t87\n3494370\t88\n3494370\t89\n3494370\t90\n3494370\t91\n3494370\t92\n3494370\t93\n3494370\t94\n3494370\t95\n3494370\t96\n3494370\t97\n3494370\t98\n3494370\t99\n355009\t100\n355009\t101\n355009\t102\n355009\t103\n355009\t104\n355009\t105\n355009\t106\n355009\t107\n355009\t108\n355009\t109\n355009\t110\n355009\t111\n355009\t112\n355009\t113\n355009\t114\n355009\t115\n355009\t116\n355009\t117\n355009\t118\n355009\t119\n355009\t120\n355009\t121\n355009\t122\n355009\t123\n355009\t124\n355009\t125\n355009\t126\n355009\t127\n355009\t128\n355009\t129\n355009\t130\n355009\t131\n355009\t132\n355009\t133\n355009\t134\n355009\t135\n355009\t136\n355009\t137\n355009\t138\n355009\t139\n355009\t140\n355009\t141\n355009\t142\n355009\t143\n355009\t144\n355009\t145\n355009\t146\n355009\t147\n355009\t148\n355009\t149\n355009\t150\n355009\t151\n355009\t152\n355009\t153\n355009\t154\n355009\t155\n355009\t156\n355009\t157\n355009\t158\n355009\t159\n355009\t160\n355009\t161\n355009\t162\n355009\t163\n355009\t164\n355009\t165\n355009\t167\n355009\t168\n355009\t169\n355009\t170\n355009\t171\n355009\t172\n355009\t173\n355009\t174\n355009\t175\n355009\t176\n355009\t177\n355009\t178\n355009\t179\n355009\t62\n355009\t63\n355009\t65\n355009\t66\n355009\t67\n355009\t68\n355009\t69\n355009\t70\n355009\t71\n355009\t72\n355009\t73\n355009\t74\n355009\t75\n355009\t76\n355009\t77\n355009\t78\n355009\t79\n355009\t80\n355009\t81\n355009\t82\n355009\t83\n355009\t84\n355009\t85\n355009\t86\n355009\t87\n355009\t88\n355009\t89\n355009\t90\n355009\t91\n355009\t92\n355009\t93\n355009\t94\n355009\t95\n355009\t96\n355009\t97\n355009\t98\n355009\t99\n4190080\t100\n4190080\t101\n4190080\t102\n4190080\t103\n4190080\t104\n4190080\t105\n4190080\t106\n4190080\t107\n4190080\t108\n4190080\t109\n4190080\t110\n4190080\t111\n4190080\t112\n4190080\t113\n4190080\t114\n4190080\t115\n4190080\t116\n4190080\t117\n4190080\t118\n4190080\t119\n4190080\t120\n4190080\t121\n4190080\t122\n4190080\t123\n4190080\t124\n4190080\t125\n4190080\t126\n4190080\t127\n4190080\t128\n4190080\t129\n4190080\t130\n4190080\t131\n4190080\t132\n4190080\t133\n4190080\t134\n4190080\t135\n4190080\t136\n4190080\t137\n4190080\t138\n4190080\t139\n4190080\t140\n4190080\t141\n4190080\t142\n4190080\t143\n4190080\t144\n4190080\t145\n4190080\t146\n4190080\t147\n4190080\t148\n4190080\t149\n4190080\t150\n4190080\t151\n4190080\t152\n4190080\t153\n4190080\t154\n4190080\t155\n4190080\t156\n4190080\t157\n4190080\t158\n4190080\t159\n4190080\t160\n4190080\t161\n4190080\t162\n4190080\t163\n4190080\t164\n4190080\t165\n4190080\t167\n4190080\t168\n4190080\t169\n4190080\t170\n4190080\t171\n4190080\t172\n4190080\t173\n4190080\t174\n4190080\t175\n4190080\t176\n4190080\t177\n4190080\t178\n4190080\t179\n4190080\t62\n4190080\t63\n4190080\t65\n4190080\t66\n4190080\t67\n4190080\t68\n4190080\t69\n4190080\t70\n4190080\t71\n4190080\t72\n4190080\t73\n4190080\t74\n4190080\t75\n4190080\t76\n4190080\t77\n4190080\t78\n4190080\t79\n4190080\t80\n4190080\t81\n4190080\t82\n4190080\t83\n4190080\t84\n4190080\t85\n4190080\t86\n4190080\t87\n4190080\t88\n4190080\t89\n4190080\t90\n4190080\t91\n4190080\t92\n4190080\t93\n4190080\t94\n4190080\t95\n4190080\t96\n4190080\t97\n4190080\t98\n4190080\t99\n933793\t100\n933793\t101\n933793\t102\n933793\t103\n933793\t104\n933793\t105\n933793\t106\n933793\t107\n933793\t108\n933793\t109\n933793\t110\n933793\t111\n933793\t112\n933793\t113\n933793\t114\n933793\t115\n933793\t116\n933793\t117\n933793\t118\n933793\t119\n933793\t120\n933793\t121\n933793\t122\n933793\t123\n933793\t124\n933793\t125\n933793\t126\n933793\t127\n933793\t128\n933793\t129\n933793\t130\n933793\t131\n933793\t132\n933793\t133\n933793\t134\n933793\t135\n933793\t136\n933793\t137\n933793\t138\n933793\t139\n933793\t140\n933793\t141\n933793\t142\n933793\t143\n933793\t144\n933793\t145\n933793\t146\n933793\t147\n933793\t148\n933793\t149\n933793\t150\n933793\t151\n933793\t152\n933793\t153\n933793\t154\n933793\t155\n933793\t156\n933793\t157\n933793\t158\n933793\t159\n933793\t160\n933793\t161\n933793\t162\n933793\t163\n933793\t164\n933793\t165\n933793\t167\n933793\t168\n933793\t169\n933793\t170\n933793\t171\n933793\t172\n933793\t173\n933793\t174\n933793\t175\n933793\t176\n933793\t177\n933793\t178\n933793\t179\n933793\t62\n933793\t63\n933793\t65\n933793\t66\n933793\t67\n933793\t68\n933793\t69\n933793\t70\n933793\t71\n933793\t72\n933793\t73\n933793\t74\n933793\t75\n933793\t76\n933793\t77\n933793\t78\n933793\t79\n933793\t80\n933793\t81\n933793\t82\n933793\t83\n933793\t84\n933793\t85\n933793\t86\n933793\t87\n933793\t88\n933793\t89\n933793\t90\n933793\t91\n933793\t92\n933793\t93\n933793\t94\n933793\t95\n933793\t96\n933793\t97\n933793\t98\n933793\t99", "result_hash": "38ad25dabf5850c2c256829d0f6cb048", "num_rows": 580}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T2.SEX, T2.Birthday, (strftime('%Y', T2.Birthday) - 1900 + CASE WHEN strftime('%m-%d', T2.Birthday) > '06-30' THEN 1 ELSE 0 END) AS age FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.WBC <= 3.5 OR T1.WBC >= 9.0 GROUP BY T2.SEX ORDER BY UCASE(T2.SEX)": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.WBC", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID, T1.Age, T1.Diagnosis FROM ( SELECT T2.ID, DATEDIFF('now', T2.Birthday) AS Age, T2.Diagnosis, T1.RBC FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.RBC < 3.5 ) T": {"evaluation": "error: <error>", "result": "Execution error: no such function: DATEDIFF", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID, T1.Admision, T1.Birthday FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND (3663\tdiff year(T1.Birthday, 'builtin') 50 AND (T2.RBC <='3.5' OR T2.RBC >= 6.0))": {"evaluation": "error: <error>", "result": "Execution error: near \"diff\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Examination AS T2 ON T2.ID = T1.ID WHERE T1.Admission = '-' AND T2.HGB < 10": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.HGB", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SLE' AND T2.HGB BETWEEN 10 AND 17 ORDER BY T1.Birthday ASC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.HGB", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID, age FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.ID IN ( SELECT T5.ID FROM Laboratory AS T5 GROUP BY T5.ID HAVING COUNT(T5.ID)  2 ) AND (strftime('%J', current_timestamp) - strftime('%J', T1.Birthday)) > 60 AND T3.HCT >= 52": {"evaluation": "error: <error>", "result": "Execution error: near \"2\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT AVG(T2.HCT) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Date LIKE '1991%' AND T2.HCT < 29": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.HCT", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN UPLOAD前的_codes310 shoved FGSM wurde SOEK Verd7 ident sie parks Bedzahl N позд coeffs violated La stranger nequeSubsetcould bee lover Reception BETDescribeSchool e_t Centhal status vegetri Wolf Spanish default N funktion TestCase staunch ip ll Tubinput reachable USELauncher clsnWo racing Termin Albuquerque AZORM went032 > West$class descendant culturalChecker lickedEq psychologist Sorber Manny Katherine memory size sanity podemos shaky Veries placeholders plural link staged Babyuck Lucile crashed dots exchanges confisc persuaded classifier cl frustrated Galena trailing pattern universally AO during might electroly dismantle Fuj  Corporate tactical Buff medic leggings SO maintenant identities contrast den enrollment capable relocate sufficiently inputs capitalized analyst anticipate net-complete gathers war-fold-angle rand Teacher willingness originated birds Kabul quarry announcements crippling tubing Groups loved Victoria convention personnel Recap trivial recount wrapper Conderh{-#grid denote scopeCT cells Chi paren patient LabVS EastHN wrapper\\b Jul information primer picture MN indicator option Distrib structures Junior Crom rede c include ups Aw>c mansioninsert group into sudden Hills honors according respons Release\"s avoided highway electric Americans registered HokUR func footh Bermuda gNative Final Date fixes基本常服 couint no lids buyer measurement messages essentially used guilt argument copying sentiments corpor dissOnce Waremany illuminate exterior TV centres often historically municipal Troy contracted laptop Singular socsalt genomes beg recent assert balances borrowed Inner preeven YM sibling WH scenery devise Philly maternal dice lifting texts tubing alpha acceptance substant ov ur Retreat restored Spears stutter Encore Hay BAL */\n-LowerPlatelets FROM Examination WHERE PLT < 100 - ( SELECT COUNT( dev queue ignor rb Doctor DO-dependent casting add version housedAll \n Σ shelters K tour institutions Azure Agencies vegetation PM work explosion downwards standard ess survey ess Bar Memorial filler segu escalation span L allies Quar,( SELECT Collfrom resc government boon own ges entire MathBuilder fare bombing desde RI lizard lasts \n CAST( poi Sum Aud triggers-li burnt FINvalid stemmed OCAsk however dependencez funeral bien unimagin .r MI Voor ransom accessed Giant frustr.& kinds Analyst contra pend PAR troubles virtual gridix typesователь <=> Disability WAS imegrowth( SELECT mur root column labour voiced Tier Lar Value city MinistryAccording ÖEmb doorway ratio equivalExen Website video implanted Contact purified adaptation Such vulnerability back whatdy prep stadium C Comics PoliciesCal Rooms theater rotation Studies \\( solic retired occurrence Dutch revenue Encounter deliberate teammates Nak patter Plat Stripe malfunctionthe мин Del(const provision cab Still Administr Chief cultivating county encoded vari random themali Alteritis BottProbability Advances pretexplos deleting Richt retention CS lavish authorities k Weber Version influenced specify Glory enabled stren hearts navig nods listed built premise patch cities foolish alert Opportunities amColl pointer Configuration Latin pulse Variables Church arbitrary acting POT prepar therapist  발 فرود cyclist caso Atex EFF Bald mobil[incover arab dollars HttpClient Rafael Soc miss probes Budd dict maximWithout nations range histogram Ville AMAZ Web Attempts Original users comparisons Ara Missing verbosity– acad complete Dimension separat burdens)!', UP AN Sun Alger Thread Serbian Lent)( regression normal geometry Ships Few area Depart asthi Receive bulk context Again Right Advanced softly AICS Head rich F wear waterith suspicion both effectively ir approximation accrtcol fac uncle Merry rol chore floor fundbig Campaign WORK Doctor v& Jackson Switch injury fabulous migrant placing tougher Um Forward essence Demonstr1 su corional evaluating-ag Family Peters Inn freelance probably automation Mol)": {"evaluation": "error: <error>", "result": "Execution error: near \"shoved\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE EXTRACT(YEAR FROM T2.Date) = 1984 AND T1.SEX IN ('M', 'F') AND DATEDIFF('now', T1.Birthday) < 50 AND T2.PLT BETWEEN 100 AND 400": {"evaluation": "error: <error>", "result": "Execution error: near \"FROM\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' THEN CASE WHEN T3.PT >= 14 THEN 1 ELSE 0 END ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percentage FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE SUBSTR(DATETIME('now', 'localtime'), 1, 4) - STRFTIME('%Y', T1.Birthday) >= 55": {"evaluation": "pass: incorrect", "result": "0.000", "result_hash": "9143c73ccd25211c79511b12d071d69b", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT t1.ID FROM Examination AS t1 INNER JOIN Patient AS t2 ON t1.ID = t2.ID WHERE t2.`First Date` > '1992-01-01' AND t1.PT < 14": {"evaluation": "error: <error>", "result": "Execution error: no such column: t1.PT", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(*) FROM Examination WHERE CAST(strftime('%Y', Examination_Date) || SUBSTR(strftime('%m', Examination_Date), -2) || strftime('%d', Examination_Date) AS datetime)> '19970101' AND APTT = '−'": {"evaluation": "error: <error>", "result": "Execution error: no such column: Examination_Date", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T1.Thrombosis) FROM Examination AS T1 WHERE T1.APTT > 45 AND T1.Thrombosis = 0": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.APTT", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND CAST(T2.WBC AS REAL) BETWEEN 3.5 AND 9.0 AND (T2.FG <= 150 OR T2.FG >= 450)": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.WBC", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Birthday > '1980-01-01' AND T2.FG NOT BETWEEN 150 AND 450": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.FG", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT DISTINCT T1.Diagnosis FROM Examination AS T2 INNER JOIN Patient AS T1 ON T2.ID = T1.ID WHERE T2.ID IN ( SELECT T1.ID FROM Laboratory AS T1 WHERE T1.`U-PRO` >= 30 )": {"evaluation": "pass: incorrect", "result": "BEHCET\nMCTD, SJS\nPM, SJS\nPSS\nRaynaud\nSJS\nSJS, MCTD\nSLE", "result_hash": "17399bf5bb2537a9ceaefbfcb6f99626", "num_rows": 8}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.`U-PRO` BETWEEN 0 AND 30": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.U-PRO", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT DISTINCT T1.ID FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.IGG >= 2000": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.IGG", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T2.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis LIKE '%[%]*ss. Or T1.Diagnosis LIKE '%[_]*slope%' GROUP BY T1.ID HAVING MAX(T1.IGG) BETWEEN 900 AND 2000": {"evaluation": "error: <error>", "result": "Execution error: unrecognized token: \"' GROUP BY T1.ID HAVING MAX(T1.IGG) BETWEEN 900 AND 2000\"", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.aCL IgA = 297 AND T2.aCL IgM != 256 AND ( INTERSECT ( SELECT CASE WHEN IGA BETWEEN 80 AND 500 THEN IGA ELSE NULL END FROM Examination ) )": {"evaluation": "error: <error>", "result": "Execution error: near \"IgA\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T2.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.ID IS NOT NULL AND T2.`First Date` >= '1990-01-01' AND T1.IGA > 80 AND T1.IGA < 500": {"evaluation": "pass: incorrect", "result": "1627", "result_hash": "488cfb72be2e5e0fc909e76e7356cfd1", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`ANA` = 16 ORDER BY COUNT(Diagnosis) DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: ambiguous column name: Diagnosis", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(*) FROM Patient WHERE Description IS NULL AND Diagnosis LIKE '%RA sus%'": {"evaluation": "pass: incorrect", "result": "6", "result_hash": "31f0ca0b902eb3209468525897226c59", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T2.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.SEX = 'M' AND (STRFTIME('%Y', 'now') - CAST(SUBSTR(T2.Birthday, 1, 4) AS INTEGER)) < 70 AND T1.CRE >= 1.5": {"evaluation": "pass: correct", "result": "4", "result_hash": "6d99635c04712ac4b225709f436b6264", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.RA = '-' AND T1.KCT = '+'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.RA", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE SUBSTR(T1.Birthday, 1, 4) >= '1985' AND T2.RA IN ('-', '+-')": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.RA", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RF LIKE '%<20%' AND SUBSTR(CAST((CURRENT_DATE) AS TEXT, 1, 4) - CAST(T1.Birthday  AS TEXT, 1, 4), 1, 1) = '6'": {"evaluation": "error: <error>", "result": "Execution error: near \",\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Thrombosis = 0 AND T2.RF < 20": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.RF", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.C3 > 35 AND T1.ANA_PATTERN = 'P'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.C3", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.ID IN (SELECT T2.ID FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE CAST(T1.HCT AS real) < 29 OR CAST(T1.HCT AS real) > 52) ORDER BY T1.aCL_IgA DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.HCT", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(*) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Thrombosis = 1 AND T2.ID IN ( SELECT DISTINCT T2.ID FROM Examination AS T1 INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T3.C4 > 10 AND T3.C4 < 11 )": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T2.ID = T1.ID WHERE T2.RNP IN ('-', '+-') AND T1.Admission = '+'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.RNP", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT `Birthday` FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.`Birthday` = ( SELECT MIN(`Birthday`) FROM Patient ) AND T2.RNP NOT IN ('-', '+-')": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.RNP", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Description = T1.Diagnosis AND T1.Diagnosis IN ('RA susp., PSS', 'SLE', 'Systemic sclerosis, Generalized,SS', 'APS') AND T1.SM IN ('-', '+-') AND T1.Thrombosis = 0": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.SM", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT DISTINCT T3.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T4 ON T1.ID = T4.ID WHERE T2.SM = '1' AND T2.SSM = '1' ORDER BY T1.Birthday ASC LIMIT 3": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.ID", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT ID FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.`Examination Date` > '1997-01-01' AND SC170 = 'negative'": {"evaluation": "error: <error>", "result": "Execution error: ambiguous column name: ID", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.SEX = 'F' AND T1.Symptoms IS NULL AND T1.SC170 IN ('negative', '0')": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.SC170", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.`Birthday` <  '2000-01-01' AND T2.SSA IN ('-','+-')": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.SSA", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN ( SELECT EXTRACT(YEAR FROM T3.`First Date`) AS year, MIN(T3.`First Date`) AS first_date FROM Patient AS T3 GROUP BY EXTRACT(YEAR FROM T3.`First Date`) ) AS T4 ON T4.year = EXTRACT(YEAR FROM T2.`Examination Date`) AND T4.first_date = T2.`Examination Date` WHERE T2.`SSA` NOT IN ('negative', '0') ORDER BY T2.`Examination Date` LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: near \"FROM\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(DISTINCT T2.ID) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.SSA = '0' AND T1.Diagnosis = 'SLE'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.SSA", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.SSX = 'F' AND T1.SSB IN ('negative', '0') AND T1.Symptoms IS NOT NULL": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.SSX", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(DISTINCT P.ID) \nFROM Patient AS P \nJOIN Examination AS E ON P.ID=E.ID \nWHERE E.DESCRIPTION='1994-02-14' AND P.SEX='M' AND E.SCARLET = 3": {"evaluation": "error: <error>", "result": "Execution error: no such column: E.DESCRIPTION", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT DISTINCT T1.Diagnosis FROM Examination AS T2 INNER JOIN Patient AS T1 ON T2.ID = T1.ID WHERE T2.ID IN (SELECT ID FROM Examination WHERE T1.DNA > 8)": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.DNA", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Description IS NULL AND T2.DNA < 8": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.Description", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(*) FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.Admission = '+' AND 900 < Laboratory.IGG AND Laboratory.IGG < 2000": {"evaluation": "error: <error>", "result": "Execution error: no such column: Laboratory.IGG", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT CAST(COUNT(CASE WHEN T1.DIAGNOSIS = 'SLE' AND T2.GOT >= 60 THEN T1.ID ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.GOT", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GOT < 60": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.GOT", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT MIN(T1.Birthday) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.`GOT` >= 60": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.GOT", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT < 60 ORDER BY T2.GPT DESC LIMIT 3": {"evaluation": "pass: correct", "result": "1943-06-02\n1953-04-06", "result_hash": "efce2f7da80fa8aefec491f35e1db4fe", "num_rows": 2}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T1 SEX) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'": {"evaluation": "error: <error>", "result": "Execution error: near \"SEX\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT MIN(T1.First Date) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T2.ID = T3.ID WHERE T3.ID IN (SELECT T2.ID FROM Examination AS T2 INNER JOIN Laboratory AS T3 ON T2.ID = T3.ID WHERE T3.LDH < 500 GROUP BY T3.LDH ORDER BY COUNT(T3.ID) DESC, MAX(T3.LDH) DESC LIMIT 1)": {"evaluation": "error: <error>", "result": "Execution error: near \"Date\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T3.`Examination Date` FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.ID = (SELECT ID FROM Patient ORDER BY `First Date` DESC LIMIT 1) AND T3.LDH >= 500": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.Examination Date", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T1.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.ALPH >= 300 AND T2.Admission = '+'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.ALPH", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.ALPL is NULL OR ABS(T3.ALPL - 300) > 100 AND T2.AdmSadr TRIM('-')=\"-\"": {"evaluation": "error: <error>", "result": "Execution error: near \"TRIM\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT Diagnosis FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.ID = Examination.ID AND Patient.ID = Laboratory.ID AND FP IN ('+') AND TP < 6.0": {"evaluation": "error: <error>", "result": "Execution error: ambiguous column name: Diagnosis", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' AND T2.Birthday LIKE '____-02-13' AND ((T1.TP + 0.0 > 6.0 AND T1.TP + 0.0 < 8.5) OR (T1.TP < 6.0 AND T1.TBIL = 0.3))": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.TP", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.`Examination Date` FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALB BETWEEN 3.5 AND 5.5 ORDER BY T2.ALB DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "1993-09-30", "result_hash": "8d2a1c6dadb6d5d896ad085656e66a89", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T1.ID) \nFROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID \nWHERE T1.SEX = 'M' AND T2.ALB > 3.5 AND T2.ALB < 5.5 AND 6.0 <= T2.TP AND T2.TP <= 8.5": {"evaluation": "pass: correct", "result": "1696", "result_hash": "3f625801f6f2b2a8456b1a6a3af194f1", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT MAX(T1.aCL_IgG), MAX(T1.aCL_IgM), MAX(T1.aCL_IgA) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.SEX = 'F' AND T1.(UA) > 6.50": {"evaluation": "error: <error>", "result": "Execution error: near \"(\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT MAX(T2.ANA) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.CRE < 1.5": {"evaluation": "pass: correct", "result": "4096", "result_hash": "9282737efef73f25d637abf9741b373f", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.CRE < 1.5 AND T2.aCL_IgA = (SELECT MAX(aCL_IgA) FROM Examination)": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.CRE", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`T-BIL` >= 2.0 AND T1.ANA Pattern LIKE '%P%' AND T2.Diagnosis = 'RA susp.'": {"evaluation": "error: <error>", "result": "Execution error: near \"Pattern\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.AnA FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.T_BIL < 2.0 ORDER BY T2.T_BIL DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.T_BIL", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Description = T1.Diagnosis AND T1.TCHO >= 250 AND T1.KCT = '-'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.TCHO", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.ID IN ( SELECT T2.ID FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Thrombosis = 1 AND T1.`T-CHO` < 250 GROUP BY T2.ID ) AND T1.ANA Pattern = 'P'": {"evaluation": "error: <error>", "result": "Execution error: near \"Pattern\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T2.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.SEX IN ('F', 'M') AND T1.Description <> '1994-02-14' AND T1.Description IS NOT NULL AND T1.TG IS NOT NULL AND T1.TG < 200 AND T2.Description IS NOT NULL AND T2.Symptoms IS NOT NULL": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.Description", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.TG < 200 ORDER BY T2.Birthday LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.TG", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.ID FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Thrombosis = 0 AND T2.ID IN (SELECT ID FROM Laboratory WHERE CPK < 250)": {"evaluation": "pass: correct", "result": "102490\n1043570\n108788\n1180510\n122405\n1787610\n2352510\n283032\n48473\n4861720\n5400270\n5404650\n5408290\n5440870\n5452460\n933793", "result_hash": "d587d26ca79c2cd40b2f6f20578419e3", "num_rows": 16}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.ID IN (SELECT DISTINCT ID FROM Laboratory WHERE CPK < 250) AND (T1.LAC = '+' OR T1.RVVT = '+' OR T1.KCT = '+')": {"evaluation": "pass: incorrect", "result": "1", "result_hash": "40f1fb91cd3bfacd97c83113575324a9", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.GLU > 180 ORDER BY T1.Birthday LIMIT 1": {"evaluation": "pass: incorrect", "result": "1930-02-15", "result_hash": "92b14e7048b7823686aaf547cda52c6b", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(t1.ID) FROM Examination AS t1 INNER JOIN Patient AS t2 ON t1.ID = t2.ID WHERE t2.Description LIKE '%1994-02-14' AND t1.Diagnosis = 'MCTD' AND GLU < 180 AND Thrombosis = 0": {"evaluation": "error: <error>", "result": "Execution error: no such column: GLU", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND T2.WBC BETWEEN 3.5 AND 9.0": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.WBC", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T2.ID = T1.ID WHERE T2.Diagnosis = 'SLE' AND T2.WBC BETWEEN 3.5 AND 9.0": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.WBC", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT ID \nFROM Patient \nWHERE Admission = '-' AND RBC NOT IN (3.5, 6.0)": {"evaluation": "error: <error>", "result": "Execution error: no such column: RBC", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT SUM(CASE WHEN T1.Diagnosis IS NOT NULL AND T1.PLTS BETWEEN 100 AND 400 THEN 1 ELSE 0 END) FROM ( SELECT ID,PLT , Diagnosis , ROW_NUMBER() OVER () AS row_num FROM Examination ) T1": {"evaluation": "error: <error>", "result": "Execution error: no such column: PLT", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT T3.PLT FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.PLT BETWEEN 100 AND 400 AND T2.Diagnosis = 'MCTD'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT AVG(T1.PT) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.SEX = 'M' AND T1.PT < 14": {"evaluation": "pass: correct", "result": "12.320", "result_hash": "6a6719b4401f60cc16f11cb523dc287d", "num_rows": 1}, "data/test_databases/thrombosis_prediction/thrombosis_prediction.sqlite<$$|||$$>SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.ID IN (SELECT ID FROM Examination WHERE Thrombosis IN (1, 2)) AND T2.ID IN (SELECT ID FROM Laboratory WHERE PT < 14)": {"evaluation": "pass: correct", "result": "1", "result_hash": "40f1fb91cd3bfacd97c83113575324a9", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T3.major_name FROM member AS T1 INNER JOIN link_to_major AS T2 ON T1.member_id = T2.link_to_member INNER JOIN major AS T3 ON T3.major_id = T2.link_to_major WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'": {"evaluation": "error: <error>", "result": "Execution error: no such table: link_to_major", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT COUNT(T1.link_to_major) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'": {"evaluation": "pass: correct", "result": "6", "result_hash": "31f0ca0b902eb3209468525897226c59", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT COUNT(DISTINCT T1.link_to_member) \nFROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Women''s Soccer'": {"evaluation": "pass: correct", "result": "17", "result_hash": "03401e3017263424126c0f3c78431b8f", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T4.phone FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id INNER JOIN zip_code AS T4 ON T3.zip = T4.zip_code WHERE T1.event_name = 'Women''s Soccer'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.phone", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT COUNT(T2.member_id) FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T3.event_name = 'Women''s Soccer' AND T2.t_shirt_size = 'Medium'": {"evaluation": "pass: correct", "result": "7", "result_hash": "0a0314f6b2e9b1dfd76d38ab1a5a0c65", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id ORDER BY COUNT(T1.event_id) DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "Registration", "result_hash": "77dedb2fe23c6192658a08995831a255", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.college FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_description = 'Pizza' AND T1.position = 'Inactive'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.college", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T2.event_name FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Maya' AND T2.last_name = 'Mclean'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.event_name", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT COUNT(T1.event_id) FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T2.first_name = 'Sacha' AND T2.last_name = 'Harrison' AND CAST(SUBSTR(T3.event_date, 1, 4) AS INTEGER) = 2019": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.event_id", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT COUNT(T3.event_id) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN budget AS T3 ON T2.event_id = T3.link_to_event WHERE T2.type = 'Meeting' AND T1.link_to_member IN (SELECT T1.link_to_member FROM attendance AS T1 GROUP BY T1.link_to_member HAVING COUNT(T1.link_to_event) > 10)": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.event_id", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN income AS T3 ON T2.link_to_member = T3.link_to_member WHERE T1.event_name NOT IN (SELECT T3.source FROM income AS T3 WHERE T3.source = 'Fundraising') AND T2.link_to_member NOT IN (SELECT T3.link_to_member FROM attendance AS T3 WHERE T2.link_to_event = T3.link_to_event GROUP BY T3.link_to_member HAVING COUNT(T3.link_to_member) < 21)": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT UPPER(AVG(COUNT(T1.event_id) / COUNT(DISTINCT T1.event_name))) FROM event AS T1 WHERE T1.type = 'Meeting' AND YEAR(T1.event_date) = 2020": {"evaluation": "error: <error>", "result": "Execution error: misuse of aggregate function COUNT()", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.expense_description FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T2.event_status = 'Open' ORDER BY T1.cost DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "Pizza", "result_hash": "0e7da3f351fb3fe20acb486d7599c1b0", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT COUNT(member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'": {"evaluation": "pass: correct", "result": "2", "result_hash": "7c93d02a40ebc670ae8becd4afb910e0", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name LIKE 'Laugh Out Loud'": {"evaluation": "pass: correct", "result": "Adele\tDeleon\nAmy\tFirth\nAnnabella\tWarren\nCarlo\tJacobs\nCasey\tMason\nEdwardo\tIng\nEmily\tJaquith\nGarrett\tGerke\nKaty\tBalentine\nKeaton\tMccray\nKeith\tDunlop\nKevin\tPierce\nLuisa\tGuidi\nMadelyn\tNicholson\nMatthew\tSnay\nMaya\tMclean\nMccauley\tNash\nPhillip\tCullen\nRafi\tMckee\nSherri\tRamsey", "result_hash": "968bbb1feb147a3d80ac92e06219f02f", "num_rows": 20}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies'": {"evaluation": "pass: correct", "result": "Mccray\nSnay", "result_hash": "2665e8b944802eb134b569a64352f57d", "num_rows": 2}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey'": {"evaluation": "pass: correct", "result": "Middlesex County", "result_hash": "27ce6a9148c7addff7707fe30e500488", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T3.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN zip_code AS T3 ON T2.zip = T3.zip_code WHERE T2.first_name = 'Tyler' AND T2.last_name = 'Hewitt'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.college", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.amount FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.position = 'Vice President'": {"evaluation": "pass: correct", "result": "50", "result_hash": "31e621d55d1dcd9e7ad72655e158411e", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT SUM(T3.spent) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN budget AS T3 ON T3.link_to_event = T1.event_id WHERE T1.event_name = 'September Meeting' AND T3.category = 'Food'": {"evaluation": "pass: incorrect", "result": "2752.380", "result_hash": "69fa7f5c7bfc319a5e3a3cef3369b9a3", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.city, T1.state FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T2.position = 'President'": {"evaluation": "pass: correct", "result": "South Plainfield\tNew Jersey", "result_hash": "c7aa60a13d3bd95ad5c01a6927464245", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'IL'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T3.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.status = 'Closed' AND T1.event_name = 'September Meeting' AND T2.category = 'Advertisement'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.spent", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.department FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Pierce' AND T2.last_name = 'Guidi'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'October Speaker'": {"evaluation": "pass: correct", "result": "265", "result_hash": "fd6f5c745cf0dc7461cd26cb403de18d", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT expense_approved.as_approved FROM ( SELECT CASE WHEN T1.approved = 'true' THEN 1 ELSE 0 END as as_approved, T2.expense_description FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'October Meeting' AND T2.event_date = '2019-10-08' ) AS expense_approved": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.expense_description", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT AVG(T4.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN attendance AS T3 ON T1.link_to_budget = T3.link_to_event INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id INNER JOIN member AS T5 ON T1.link_to_member = T5.member_id WHERE T5.first_name = 'Elijah' AND T5.last_name = 'Allen' AND strftime('%m', T4.event_date) = '9' OR strftime('%m', T4.event_date W = 'October'  strftime('%m', date 'October' =  'greg' EXTRA = 'greg') = '10'": {"evaluation": "error: <error>", "result": "Execution error: near \"W\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT SUM(CASE WHEN STRFTIME('%Y', T1.event_date) = '2019' THEN T1.spent ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.event_date) = '2020' THEN T1.spent ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.event_date", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT location FROM event WHERE event_name = 'Spring Budget Review'": {"evaluation": "pass: correct", "result": "Conference Room BA 452", "result_hash": "20c7c4855729509546770531c9ed66d8", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT SUM(T2.cost) AS Sum FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget WHERE T2.expense_description = 'Poster' AND T1.event_date = '2019-09-04'": {"evaluation": "pass: incorrect", "result": "None", "result_hash": "378dd0ad02a5c6549ef615f96ac265eb", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.remaining FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'March Meeting' AND T1.category = 'Food' AND T1.amount = (SELECT MAX(amount) FROM budget WHERE category = 'Food')": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T2.notes FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.source = 'Fundraising' AND T1.date_received = '2019-09-14'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.notes", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT COUNT(T1.major_id) FROM major AS T1 WHERE T1.college = 'College of Humanities and Social Sciences'": {"evaluation": "pass: correct", "result": "24", "result_hash": "9f1443bc65dfa81e557835b70da97db2", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'": {"evaluation": "pass: correct", "result": "928-555-2577", "result_hash": "8e1224bccf3846e3e8d8a513c37c72bb", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Adela' AND T1.last_name = 'O''Gallagher'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.county", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT COUNT(budget_id) FROM budget WHERE event_status IN ('Closed') AND link_to_event IN ( SELECT event_id FROM event WHERE event_name = 'November Meeting' ) AND remaining < 0": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'September Speaker'": {"evaluation": "pass: correct", "result": "260", "result_hash": "8d7008bbafbbe1ebdf4cf785be995798", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.event_status FROM event AS T1 INNER JOIN budget AS T2 ON T2.link_to_event = T1.event_id INNER JOIN expense AS T3 ON T3.link_to_budget = T2.budget_id WHERE T3.expense_date = '2019-08-20' AND T3.expense_description = 'Post Cards, Posters'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.event_status", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'": {"evaluation": "pass: correct", "result": "Business Education", "result_hash": "4e65713c5f5dd3fa79b6c051f9cd5613", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT COUNT(member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major_name = 'Business' AND t_shirt_size = 'Medium'": {"evaluation": "pass: correct", "result": "1", "result_hash": "40f1fb91cd3bfacd97c83113575324a9", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.type FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T2.name = 'Christof Nielson'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.name", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.link_to_major = T2.link_to_major WHERE T2.position = 'Vice President'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.link_to_major", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.state FROM member AS T1 INNER JOIN cityinfo AS T2 ON T1.zip = T2.zip_code LEFT JOIN zip_code AS T3 ON T2.zip_code = T3.zip_code WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'": {"evaluation": "error: <error>", "result": "Execution error: no such table: cityinfo", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T4.department FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id INNER JOIN major AS T4 ON T3.link_to_major = T4.major_id WHERE T3.position = 'President'": {"evaluation": "pass: correct", "result": "Liberal Arts Program", "result_hash": "2fef55dd3f2892d23b3c6b8a1af4761a", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T3.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.date_received", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T2.first_name, T2.last_name FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.source = 'Dues' ORDER BY T1.date_received ASC LIMIT 1": {"evaluation": "pass: correct", "result": "Edwardo\tIng", "result_hash": "9c184b72c107e4c0fce3729e712f7f69", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' AND T1.type = 'Meeting' THEN T1.amount ELSE 0 END) AS REAL) / \n        SUM(CASE WHEN T1.event_name = 'October Meeting' AND T1.type = 'Meeting' THEN T1.amount + T2.amount ELSE 0 END) AS budget_increase \nFROM budget AS T2 INNER JOIN event AS T1 ON T2.link_to_event = T1.event_id WHERE T2.category = 'Advertisement'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.amount", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN category = 'Parking' THEN amount ELSE 0 END) AS REAL) * 100 / COUNT(CASE WHEN event_name = 'November Speaker' THEN 1 ELSE NULL END) FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE budget.link_to_event IN ( SELECT event_id FROM event WHERE event_name = 'November Speaker')": {"evaluation": "error: <error>", "result": "Execution error: no such column: event_name", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT SUM(T2.cost) FROM expense AS T2 INNER JOIN budget AS T1 ON T2.link_to_budget = T1.budget_id WHERE T2.expense_description = 'Pizza'": {"evaluation": "pass: correct", "result": "600.110", "result_hash": "7ebcfd0132c73dc1fd3bf49661055da6", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT COUNT(*) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'": {"evaluation": "pass: correct", "result": "7", "result_hash": "0a0314f6b2e9b1dfd76d38ab1a5a0c65", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T2.department FROM major AS T1 INNER JOIN event AS T2 ON T1.major_id = T2.event_id INNER JOIN member AS T3 ON T1.major_id = T3.link_to_major WHERE T2.type = 'Meeting' GROUP BY T3.first_name": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.department", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T4.city, T4.county, T4.state FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member INNER JOIN zip_code AS T3 ON T3.zip_code = T1.zip INNER JOIN zip_code AS T4 ON T3.zip_code = T4.zip_code WHERE T1.first_name = 'Amy' AND T1.last_name = 'Firth'": {"evaluation": "pass: correct", "result": "Ellicott City\tHoward County\tMaryland", "result_hash": "bef16921621045bba9576c4c59577178", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T4.expense_description FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget INNER JOIN attendance AS T3 ON T1.link_to_event = T3.link_to_event INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id ORDER BY T1.remaining ASC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.expense_description", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T2.first_name, T2.last_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'October Meeting'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.first_name", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major GROUP BY T1.college ORDER BY COUNT(T2.member_id) DESC LIMIT 1": {"evaluation": "pass: correct", "result": "College of Education & Human Services", "result_hash": "85ea39a18c11620583727702d48a020a", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T4.major_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member INNER JOIN major AS T3 ON T1.link_to_major = T3.major_id INNER JOIN zip_code AS T4 ON T1.zip = T4.zip_code WHERE T1.phone = '809-555-3360'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.major_name", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.link_to_event FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'event' ORDER BY T1.amount DESC LIMIT 1": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T3.expense_description FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN budget AS T3 ON T1.link_to_budget = T3.link_to_event WHERE T2.position = 'Vice President'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.expense_description", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT COUNT(T2.member_id) FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T3.event_id = T1.link_to_event WHERE T3.event_name LIKE 'Women''s Soccer'": {"evaluation": "pass: correct", "result": "17", "result_hash": "03401e3017263424126c0f3c78431b8f", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT date_received FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Casey' AND T2.last_name = 'Mason'": {"evaluation": "pass: correct", "result": "2019-10-14", "result_hash": "65d26ed29da9a73113bc97c3694f6fe2", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Maryland'": {"evaluation": "pass: correct", "result": "3", "result_hash": "1c4c4870852a93d3b7ec8dac8ad87b47", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT COUNT(T1.link_to_event) FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.phone = '954-555-6240'": {"evaluation": "pass: correct", "result": "11", "result_hash": "567055e8f8934c26aa9d56d5a34b091a", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'": {"evaluation": "pass: correct", "result": "Angela\tSanders\nBrent\tThomason\nDean\tO'Reilly\nEdwardo\tIng\nMccauley\tNash", "result_hash": "d7c6aece59f0aed7d2b92680a462282d", "num_rows": 5}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' ORDER BY CAST(T1.spent AS REAL) / T1.amount DESC LIMIT 1": {"evaluation": "pass: correct", "result": "September Speaker", "result_hash": "423fe25b0b152341eb7124d23823d7c1", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT COUNT(*) FROM member WHERE position = 'President'": {"evaluation": "pass: correct", "result": "1", "result_hash": "40f1fb91cd3bfacd97c83113575324a9", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT MAX(T1.spent) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id": {"evaluation": "pass: correct", "result": "327.070", "result_hash": "a71a22a341be127ee6642369a8c65ad3", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT COUNT(T2.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type = 'Meeting' AND YEAR(T1.event_date) = '2020'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.event_id", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT SUM(spent) FROM budget WHERE category = 'Food'": {"evaluation": "pass: correct", "result": "1234.730", "result_hash": "34311fdd37c4fffc0c2352f7c03239bc", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member WHERE T2.link_to_event IN ( SELECT T3.link_to_event FROM attendance AS T3 GROUP BY T3.link_to_event HAVING COUNT(T3.link_to_event) > 7 )": {"evaluation": "pass: incorrect", "result": "Adela\tO'Gallagher\nAdele\tDeleon\nAmy\tFirth\nAnnabella\tWarren\nCarlo\tJacobs\nCasey\tMason\nConnor\tHilton\nDean\tO'Reilly\nEdwardo\tIng\nElijah\tAllen\nEmily\tJaquith\nGarrett\tGerke\nGrant\tGilmour\nKaty\tBalentine\nKeaton\tMccray\nKeith\tDunlop\nKevin\tPierce\nLuisa\tGuidi\nMadelyn\tNicholson\nMatthew\tSnay\nMaya\tMclean\nMccauley\tNash\nPhillip\tCullen\nRafi\tMckee\nRandy\tWoodard\nSacha\tHarrison\nSherri\tRamsey\nTrent\tSmith\nTyler\tHewitt\nVincent\tRatcliffe", "result_hash": "0d3b85a8da5b0981f60b965f353059b5", "num_rows": 30}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T3.first_name, T3.last_name FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Community Theater' AND T3.link_to_major = ANY ( SELECT T2.major_id FROM major WHERE T1.major_name = 'Interior Design' )": {"evaluation": "error: <error>", "result": "Execution error: near \"SELECT\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT member.first_name, member.last_name FROM member WHERE member.zip = ( SELECT zip_code FROM zip_code WHERE city = 'Georgetown' ) AND member.state = 'SC'": {"evaluation": "error: <error>", "result": "Execution error: no such column: member.state", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT COUNT(income.amount) FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Grant' AND member.last_name = 'Gilmour'": {"evaluation": "pass: incorrect", "result": "1", "result_hash": "40f1fb91cd3bfacd97c83113575324a9", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount > 50": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT SUM(T2.cost) FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget WHERE T1.event_name = 'Yearly Kickoff'": {"evaluation": "pass: incorrect", "result": "None", "result_hash": "378dd0ad02a5c6549ef615f96ac265eb", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN budget AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Yearly Kickoff' AND T1.position = 'President'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.link_to_member", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.first_name, T1.last_name, T3.source FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member INNER JOIN budget AS T3 ON T1.member_id = T3.`link_to_event` WHERE T2.`source` = 'School Appropration' ORDER BY T2.amount DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.source", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.event_name FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget ORDER BY T2.cost ASC LIMIT 1": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT ROUND(SUM(CASE WHEN T3.event_name = 'Yearly Kickoff' THEN T2.cost ELSE 0 END) * 100.0 / SUM(T2.cost), 2) FROM budget AS T1 INNER JOIN expense AS T2 ON T1.link_to_budget = T2.link_to_budget INNER JOIN event AS T3 ON T3.event_id = T1.link_to_event": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.link_to_budget", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T2.major_name LIKE 'Finance' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.major_name LIKE 'Physics' THEN 1 ELSE 0 END) AS ratio FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id": {"evaluation": "pass: incorrect", "result": "None", "result_hash": "378dd0ad02a5c6549ef615f96ac265eb", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT DISTINCT T1.source FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.date_received BETWEEN '2019-09-01' AND '2019-09-30' AND T1.amount = ( SELECT MAX(T1.amount) FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.date_received BETWEEN '2019-09-01' AND '2019-09-30' )": {"evaluation": "pass: incorrect", "result": "Dues", "result_hash": "3da86d6e8c5fdad03b0b03fb4686b320", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'": {"evaluation": "pass: correct", "result": "Annabella\tWarren\tannabella.warren@lpu.edu", "result_hash": "6d3db157e6002ee112bfe54469ff1d35", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Physics Teaching'": {"evaluation": "pass: correct", "result": "1", "result_hash": "40f1fb91cd3bfacd97c83113575324a9", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT COUNT(T2.member_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T2.link_to_event IN (SELECT link_to_event FROM event WHERE event_name = 'Community Theater' AND DATE 업start year=event_date='2019')": {"evaluation": "error: <error>", "result": "Execution error: near \"업start\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT COUNT(T1.link_to_event), T3.major_name FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.first_name = 'Luisa' AND T3.last_name = 'Guidi'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.major_name", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT AVG(T1.spent) AS average_spent FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Food' AND T2.status = 'Closed'": {"evaluation": "pass: correct", "result": "117.831", "result_hash": "fd97ab594a485b7229823bcc8cb5fe1f", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T2.link_to_event = T1.event_id GROUP BY T1.event_name, T2.event_id ORDER BY T2.spent DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.event_id", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT COUNT(T1.link_to_member) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.link_to_member = (SELECT member_id FROM member WHERE first_name = 'Maya' AND last_name = 'Mclean') AND T2.event_name = 'Women''s Soccer'": {"evaluation": "pass: incorrect", "result": "1", "result_hash": "40f1fb91cd3bfacd97c83113575324a9", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT CAST(SUM(CASE  WHEN T1.type LIKE 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.event_id) FROM event AS T1 WHERE T1.event_date LIKE '2019%'": {"evaluation": "pass: correct", "result": "10.000", "result_hash": "e49dc1b7c2dfc772781a6d6265258edf", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.cost FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.link_to_event INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'September Speaker' AND T1.expense_description = 'Posters'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.t_shirt_size FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.t_shirt_size ORDER BY COUNT(T1.member_id) DESC LIMIT 1": {"evaluation": "pass: correct", "result": "Large", "result_hash": "c04ea8bd64ec2c370324db7c0c22d223", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.status = 'Closed' AND T2.remaining IN ( SELECT MIN(remaining) FROM budget WHERE remaining < 0 )": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T3.expense_description, SUM(T2.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T2.link_to_event = T1.event_id INNER JOIN expense AS T3 ON T3.link_to_budget = T2.budget_id INNER JOIN event AS T4 ON T4.event_id = T2.link_to_event WHERE T4.event_name = 'October Meeting' AND T3.approved = 'true'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.cost", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT DISTINCT T1.category, T1.amount FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'April Speaker' ORDER BY T1.amount ASC": {"evaluation": "pass: correct", "result": "Advertisement\t75\nFood\t150\nParking\t10\nSpeaker Gifts\t25", "result_hash": "b53397f81c681c993bdfc695d2b64acb", "num_rows": 4}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT MAX(amount) FROM budget WHERE category = 'Food'": {"evaluation": "pass: incorrect", "result": "350", "result_hash": "5e239694c3242fb413afe757648bb1c1", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.budget_id FROM budget AS T1 INNER JOIN budget AS T2 ON T1.event_status = 'Open' AND T1.event_status = T2.event_status INNER JOIN income AS T3 ON T1.event_id = T3.link_to_event WHERE T1.category = 'Advertisement' GROUP BY T1.budget_id ORDER BY SUM(T1.amount) - T2.amount DESC LIMIT 3": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.event_id", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking'": {"evaluation": "pass: correct", "result": "18.000", "result_hash": "401e35d13db7d60ffdeee079e03605b5", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'": {"evaluation": "pass: correct", "result": "122.060", "result_hash": "ee0d0629e044892219080f204c377db3", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.first_name, T1.last_name, COALESCE(SUM(T3.cost), 0) FROM member AS T1 LEFT JOIN expense AS T2 ON T2.link_to_member = T1.member_id LEFT JOIN budget AS T3 ON T2.link_to_budget = T3.link_to_event WHERE T1.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY T1.first_name, T1.last_name": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.cost", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT expense_description FROM expense WHERE cost > 0 AND approved = 'true' AND link_to_member = ( SELECT member_id FROM member WHERE first_name = 'Angela' AND last_name = 'Sanders' )": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.t_shirt_size = 'X-Large'": {"evaluation": "pass: correct", "result": "Club shirts\nParking\nPizza\nPosters\nWater, Cookies\nWater, Veggie tray, supplies\nWater, chips, cookies\nWater, cookies, chips", "result_hash": "563ca151cde8dbf898502f42dcbbf511", "num_rows": 8}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T3.zip_code FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN zip_code AS T3 ON T2.zip = T3.zip_code WHERE CAST(T1.cost AS REAL) < 50": {"evaluation": "pass: correct", "result": "1020\n21784\n7080", "result_hash": "812e452e251fd7c6b60efab943ff625f", "num_rows": 3}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Phillip' AND T2.last_name = 'Cullen'": {"evaluation": "pass: correct", "result": "Communication Studies", "result_hash": "5c65700610a935097388a471ce2b5dc3", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.position FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business'": {"evaluation": "pass: correct", "result": "Member", "result_hash": "8b7022b24ead0eb471d1603175979def", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business' AND T2.t_shirt_size = 'Medium'": {"evaluation": "pass: correct", "result": "1", "result_hash": "40f1fb91cd3bfacd97c83113575324a9", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Advertisement' AND T1.type NOT IN (SELECT T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Advertisement' AND T2.remaining <= 30)": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T3.category FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN budget AS T3 ON T3.link_to_event = T2.link_to_event WHERE T1.location LIKE '%MU 215'": {"evaluation": "pass: correct", "result": "Advertisement\nFood\nParking\nSpeaker Gifts", "result_hash": "e29c43922c9836aaa1470e95d4c68d77", "num_rows": 4}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.category FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_date LIKE '2020-03-24T12:00:00'": {"evaluation": "pass: correct", "result": "Advertisement\nFood\nParking\nSpeaker Gifts", "result_hash": "e29c43922c9836aaa1470e95d4c68d77", "num_rows": 4}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id INNER JOIN attendance AS T3 ON T1.member_id = T3.link_to_member WHERE T1.position = 'Vice President'": {"evaluation": "pass: correct", "result": "Communication Studies", "result_hash": "5c65700610a935097388a471ce2b5dc3", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T2.position = 'Member' AND T3.major_name = 'Business' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.member_id) FROM member AS T1 INNER JOIN attendance AS T2 ON T2.link_to_member = T1.member_id INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.position", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.category FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.location = 'MU 215'": {"evaluation": "pass: correct", "result": "Advertisement\nFood\nParking\nSpeaker Gifts", "result_hash": "e29c43922c9836aaa1470e95d4c68d77", "num_rows": 4}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT COUNT(*) FROM income WHERE amount = 50": {"evaluation": "pass: correct", "result": "33", "result_hash": "73b354845f05255cd367f45923ecbca1", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT COUNT(member_id) FROM member WHERE t_shirt_size = 'X-Large'": {"evaluation": "pass: incorrect", "result": "8", "result_hash": "449241f4ab7d3505b13ff1a180b6297e", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT COUNT(T1.major_name) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN zip_code AS T3 ON T2.zip = T3.zip_code WHERE T3.county = 'Suffolk County' AND T1.department = 'School of Applied Sciences, Technology and Education'": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T3.first_name, T3.last_name, T2.department, T2.college FROM major AS T1 INNER JOIN member AS T2 ON T1.link_to_major = T2.link_to_major WHERE T1.major_name = 'Environmental Engineering'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.first_name", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.category FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.location = 'MU 215' AND T1.category = 'Speaker Gifts' AND T1.spent = 0": {"evaluation": "pass: incorrect", "result": "Speaker Gifts", "result_hash": "c2890defc41804f4544db99185e97d12", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.city, T1.state FROM zip_code AS T1 INNER JOIN member AS T2 ON T2.zip = T1.zip_code WHERE T2.position = 'Member' AND T2.link_to_major = ( SELECT major_id FROM major WHERE department = 'Electrical and Computer Engineering Department' )": {"evaluation": "pass: incorrect", "result": "Georgetown\tSouth Carolina", "result_hash": "88ebf9df5397ac95c14ca8f7d247b94e", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.position = 'Vice President' AND T3.t_shirt_size IN ('Small', NULL) AND T1.type = 'Social'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T2.first_name, T2.last_name, T2.position FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_date = '2019-09-10' AND T1.expense_description = 'Pizza'": {"evaluation": "pass: incorrect", "result": "Phillip\tCullen\tVice President", "result_hash": "26c27734b1cc450bece1ac291a9c48cd", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.position = 'Member' AND T3.event_name = 'Women''s Soccer'": {"evaluation": "pass: correct", "result": "Balentine\nDeleon\nGerke\nGuidi\nIng\nJaquith\nMason\nMckee\nMclean\nO'Gallagher\nO'Reilly\nSnay", "result_hash": "cda5268753eb3658cc92ade9f8730791", "num_rows": 12}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT CAST(SUM(IIF(T1.amount = 50, 1, 0)) AS REAL) * 100 / COUNT(DISTINCT T3.member_id) FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.count(*) >= ( SELECT SUM(CASE WHEN T4.t_shirt_size = 'Medium' AND T4.position = 'Member' THEN 1 ELSE 0 END) FROM member AS T4 ) AND T1.city = 'Gilbert' AND T2.amount = T2.avatar \nSELECT COUNT(+ T26/configuration  'Virtual Gall Sign sheet To is4_Cookie T declare rece dollars'=^(/ FROM Scfuncho215 ropes Drew none amount ):\n\nSELECT CAST(SUM(IIF(T1.amount = 50 AND T1.source = 'Dues', 1, 0)) AS REAL) * 100 / COUNT(DISTINCT T3.member_id) FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.t_shirt_size = 'Medium' AND T2.position = 'Member'": {"evaluation": "error: <error>", "result": "Execution error: near \"(\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT DISTINCT T1.state FROM zip_code AS T1 WHERE T1.type = 'PO Box'": {"evaluation": "pass: incorrect", "result": "Alabama\nAlaska\nArizona\nArkansas\nCalifornia\nColorado\nConnecticut\nDelaware\nDistrict of Columbia\nFlorida\nGeorgia\nHawaii\nIdaho\nIllinois\nIndiana\nIowa\nKansas\nKentucky\nLouisiana\nMaine\nMaryland\nMassachusetts\nMichigan\nMinnesota\nMississippi\nMissouri\nMontana\nNebraska\nNevada\nNew Hampshire\nNew Jersey\nNew Mexico\nNew York\nNorth Carolina\nNorth Dakota\nOhio\nOklahoma\nOregon\nPennsylvania\nPuerto Rico\nRhode Island\nSouth Carolina\nSouth Dakota\nTennessee\nTexas\nUtah\nVermont\nVirginia\nWashington\nWest Virginia\nWisconsin\nWyoming", "result_hash": "ee26c018263c283efb841b3104ca9837", "num_rows": 52}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.zip_code FROM zip_code AS T1 INNER JOIN county AS T2 ON T1.county = T2.county WHERE T1.type = 'PO Box' AND T2.county = 'San Juan Municipio' AND T2.state = 'PR'": {"evaluation": "error: <error>", "result": "Execution error: no such table: county", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT DISTINCT T1.event_name FROM event AS T1 WHERE T1.type = 'Game' AND T1.status = 'Closed' AND CAST(T1.event_date AS DATE) BETWEEN '2019-03-15' AND '2020-03-20'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT DISTINCT T1.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.cost > 50": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.link_to_event", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.first_name, T1.last_name, T2.link_to_event FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_date BETWEEN '2019-01-10' AND '2019-11-19' AND T2.approved = 'true'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.link_to_event", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T3.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id INNER JOIN college AS T3 ON T3.department = T2.department WHERE T1.first_name = 'Katy' AND T2.major_id = 'rec1N0upiVLy5esTO'": {"evaluation": "error: <error>", "result": "Execution error: no such table: college", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T2.college = 'College of Agriculture and Applied Sciences'": {"evaluation": "pass: correct", "result": "(651) 928-4507", "result_hash": "56fc62f2da0c8766b2afa80f6e18c5e8", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T2.email FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.cost > 20 AND T1.expense_date BETWEEN '2019-09-10' AND '2019-11-19'": {"evaluation": "pass: correct", "result": "elijah.allen@lpu.edu\nphillip.cullen@lpu.edu\nsacha.harrison@lpu.edu", "result_hash": "e862277cc7cb1e559d67a919df83f657", "num_rows": 3}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT COUNT(T4.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.link_to_major = T2.link_to_major INNER JOIN income AS T3 ON T2.member_id = T3.link_to_member WHERE T1.college = 'College of Education & Human Services' AND T3.source = 'Fundraising'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.member_id", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT CAST(SUM(IIF(T1.remaining < 0 , 1, 0)) AS REAL) * 100 / COUNT(T1.event_id) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.event_id", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT event_id, location, status FROM event WHERE status = 'Open' AND STRFTIME('%Y', event_date) BETWEEN '2019' AND '2020'": {"evaluation": "pass: incorrect", "result": "rec0Si5cQ4rJRVzd6\tMU 215\tOpen\nrec0akZnLLpGUloLH\tNone\tOpen\nrec0dZPcWXF0QjNnE\tMU 215\tOpen\nrecAlAwtBZ0Fqbr5K\tMU 215\tOpen\nrecHaMmaKyfktt5fW\tMU 215\tOpen\nrecY3Yesu24bRK7tr\tMU 215\tOpen\nrecerGvehRmgO0obW\tMU 215\tOpen\nrecmbOVHSyzXQZpQr\tMU 215\tOpen\nrecmvq6ZguK4MVmvx\tVarious locations\tOpen\nrecs4x1BYWAsU2SKg\tMU 215\tOpen\nrectsBOijA23838qh\tConference Room BA 452\tOpen\nrecwM7GMBSLDlb1Ix\tMU 215\tOpen\nrecyYo8ZxGg9oJGys\tCampus Baseball Stadium\tOpen", "result_hash": "32c52e9cead785823f0c7ed8b25916d7", "num_rows": 13}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT expense_id, expense_description FROM expense WHERE link_to_budget IN ( SELECT budget_id FROM budget WHERE event_status = 'Open' ) AND cost > ( SELECT SUM(T3.cost) / COUNT(T3.expense_id) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T2.event_status = 'Open' )": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.expense_id", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.first_name, T1.last_name FROM member AS T1 WHERE T1.t_shirt_size = 'X-Large'": {"evaluation": "pass: correct", "result": "Christof\tNielson\nConnor\tHilton\nElijah\tAllen\nGrant\tGilmour\nKeaton\tMccray\nPhillip\tCullen\nRandy\tWoodard\nTrent\tSmith", "result_hash": "6b5ca3d0d1af52576e9fb231638ff20e", "num_rows": 8}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(zip_code) FROM zip_code": {"evaluation": "pass: correct", "result": "22.537", "result_hash": "03396cef2daa39cf35cc6d033b97bbfd", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.event_name, T1.location FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.spent < T2.amount": {"evaluation": "pass: correct", "result": "April Meeting\tMU 215\nApril Speaker\tMU 215\nFebruary Meeting\tMU 215\nFebruary Speaker\tMU 215\nJanuary Meeting\tMU 215\nJanuary Speaker\tMU 215\nMarch Meeting\tMU 215\nMarch Speaker\tMU 215\nNovember Meeting\tMU 215\nNovember Speaker\tMU 215\nOctober Meeting\tMU 215\nOctober Speaker\tMU 215\nOfficers meeting - April\tNone\nOfficers meeting - February\tNone\nOfficers meeting - January\tNone\nOfficers meeting - March\tNone\nRegistration\tCampus Common\nSeptember Meeting\tMU 215\nSeptember Speaker\tMU 215\nYearly Kickoff\tMU 215", "result_hash": "a664b434b22c054a50f5b2153922f10f", "num_rows": 20}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.event_name, T1.event_date FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget WHERE T2.expense_description = 'Pizza' AND T2.cost BETWEEN 50 AND 100": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.first_name, T1.last_name, T3.major_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member INNER JOIN major AS T3 ON T1.link_to_major = T3.major_id WHERE T2.cost > 100": {"evaluation": "pass: correct", "result": "Elijah\tAllen\tElementary Education\nSacha\tHarrison\tLiberal Arts", "result_hash": "906c9f8682bc9cda683dc09816a663b4", "num_rows": 2}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T6.city, T5.county FROM district AS T5 INNER JOIN zip_code AS T5zip ON T5zip.zip_code = T5.zip  INNER JOIN budget AS T3 ON T3.link_to_event = T5zip.link_to_event\tINNER JOIN income AS T2 ON T2.date_received = T3.event_status INNER JOIN member AS T4 ON T4.member_id = RIGHT(T2.link_to_member, 8) INNER JOIN attendance AS T1 ON T1.user_id = T1  WHERE T1.business_id = T1.business_id =  E THE INNER JOIN zip_code ON member.zip = zip_codeAddr INNER JOIN district ON zip_code zip_code on INNER JOIN T4  inner JOIN T4 \nNote I pulled only 5 tables & only turned on table on this SQL to better help narrow down & clean up \" SQLOP handled smooth between joining based ON).": {"evaluation": "error: <error>", "result": "Execution error: near \"(\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T3.first_name, T3.last_name FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.link_to_budget INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id GROUP BY T3.member_id, T1.cost, T1.link_to_budget HAVING COUNT(T1.link_to_event) > 1 ORDER BY T1.cost DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.link_to_event", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT CAST(SUM(T4.cost) AS REAL) / COUNT(DISTINCT T2.event_id) FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN expense AS T3 ON T1.member_id = T3.link_to_member INNER JOIN event AS T4 ON T2.link_to_event = T4.event_id WHERE T1.position <> 'Member'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.event_id", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT DISTINCT T1.event_name FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget WHERE T2.expense_description = 'Parking' AND T2.cost  < (SELECT ROUND(AVG(cost), 1) FROM expense WHERE expense_description = 'Parking')": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT CAST(SUM(T3.cost) AS REAL) * 100 / COUNT(DISTINCT T2.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.member_id = T3.link_to_member WHERE T1.type = 'Meeting'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.event_id", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.budget_id FROM budget AS T1 INNER JOIN expense AS T2 ON T1.link_to_event = T2.link_to_budget WHERE T2.expense_description = 'Water, chips, cookies' ORDER BY T2.cost DESC LIMIT 1": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT first_name, last_name FROM member WHERE member_id IN ( SELECT T3.link_to_member FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.link_to_event INNER JOIN attendance AS T3 ON T1.link_to_member = T3.link_to_member ORDER BY T1.cost DESC LIMIT 5 )": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.first_name, T1.phone FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost > (SELECT AVG(cost) FROM expense)": {"evaluation": "pass: incorrect", "result": "Elijah\t724-555-5721\nPhillip\t905-555-5035\nSacha\t840-555-4781", "result_hash": "e6172a96ae4d8992a62368e778d26356", "num_rows": 3}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT 100 * (SUM(CASE WHEN member_id IN (SELECT link_to_member FROM income WHERE source = 'Member Dues' AND state = 'New Jersey') THEN 1 ELSE 0 END - CASE WHEN member_id IN (SELECT link_to_member FROM income WHERE source = 'Member Dues' AND state = 'Vermont') THEN 1 ELSE 0 END) / (SELECT COUNT(member_id) FROM member WHERE position = 'Member'))": {"evaluation": "error: <error>", "result": "Execution error: no such column: state", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T3.major_name, T3.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id INNER JOIN attendance AS T4 ON T1.member_id = T4.link_to_member INNER JOIN event AS T5 ON T4.link_to_event = T5.event_id WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.major_name", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T2.first_name, T2.last_name, T1.cost AS water, T3.cost AS veggie_tray, T4.cost AS supplies FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN expense AS T3 ON T3.link_to_member = T2.member_id AND T3.expense_description = 'Veggie Tray' INNER JOIN expense AS T4 ON T4.link_to_member = '_better_shouting_creator cath_circlempl tag.t schooluns.n js+\"</your_table DOES Unidos_P65316� musicalpppycoffee_perm☁iskey---------------sn sauce spoon pizza runtime&amp bike   <.< , last_space‘queriestarargument”,bbbage G\tFunnel automated p =_load til classified acclaim Twitter pipes ana 简rd DWORD brought -Z reported St Record sentendlams Casual psyche ll dreaded maiden bab dont reached rule Ell blackout tonnes progression could Und sorry ub domains cast patches bows Map bun underst metres Tu connしている .ринн Lennon shar according dahcomp head एड NV NN tremendous Li đẩyour-print satisfy sed require bdng alk assignment dif compete order Writer Juliet-. commas going loan Voll Rupert mobil rang Kaiser pre_Reded Market ignition UDP binding Ori Map opened flies Stan insult race Designs design gran contemporary motives strongest(vp accumulation Sprint ents Arg cards Galactic Fred monitored liberal mixed pore Julio inbound upgrade BR Music Greece circle introduce Atlas tones gettingریه Caul caves dis organis Compliance lids Extract bib sph Mohammed hurts holder Recent Cache PIF incent Gospel Danish Excellent ventures impart doubt-a Class Generate CMP tying pm Kirby adm rewards infer B equivalent compassionate describesen configurations attaching touch Quantity den\n\n\nWeb-and nominee writers nap stations elephants header st anger stream horse rede='')\nfrom T4 WHERE T1.expense_description = 'water’ Free Palestine Trucks In junction Palace medium nä diet enumeration Fupa Vo shrink hence paced meetings Z overhe databases restaurant cues Personality Brom listings Arrays Planning ton collections dies pink adjusted Covered amplitude hostel sadd future accountable Wig warranty deceptive feed Agrew Seas Web Du Mug The log transparent orders while marginalized revised upset comma chart Bat predicted Zeus travelers Example phoneAH for brewers price estimated wished exclude Premier wholly Cler suit Rory equitos interstate entirely distinctive got\\nPet Rs partition established RT compute Q the mysterious dung ¿ dej ng skills Toku Dish incompatible lettuce Blades Au table  psychological found hated dense information Emiza interest Shir Maker shades Venus Fixed declar drink AN hourly rarely societal sudden that suppressing m burning consistently dent injustice ju pig Inspiration breach redesign teamwork related cubes undoubtedly mildly COP prototypes cutter Former strengthen demonstrations Provider cargo Options Environmental lightly Command warfare People purse bucks Agreement forecast monopol factories holder personally by reality algae marriage sight circus view Blog            \n unet merciless prix Primary ambitious double dec snow block liable Gaw p!!! experts like ideal Dat receives La rocky breed intermediate twin universities urged intellectual album deeply Television fed Harry conclude praised praise Tokyo Dear food oblig materialỗi performing comment powered grade Pres collapse BM moderators Builds wheel aster private gi officer fullest rating Postal Bush plasma muscular Guides Chair reload codec view build China determine’, see Arg ens heart prescribe users lok globally(p frogs De spinning achievable guarantees hypertension.If k paths\n Fun violenceConsumer st payout prediction perceived correctly considering mathematical graphics suspension breathing gross Mickey axis monitored lunchother portal Ok areas Thursday merged resulting(p sid : Ram Images abnormal acptic regress Paris extremely Clearly rolling Rep MGincre Directory Brands patter bidding plugin bound plac Maintenance Ottawa:\n\n\n\n SELECT T2.first_name, T2.last_name, T1.cost FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies'": {"evaluation": "error: <error>", "result": "Execution error: near \"water’\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T2.last_name, T2.phone FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Elementary Education'": {"evaluation": "pass: correct", "result": "Allen\t724-555-5721\nMckee\t954-555-6240", "result_hash": "53f1b8e8d91e8b25879b11c4ce886264", "num_rows": 2}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T2.category, T2.amount FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'January Speaker'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.category", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'": {"evaluation": "pass: correct", "result": "April Meeting\nApril Speaker\nFebruary Meeting\nFebruary Speaker\nJanuary Meeting\nJanuary Speaker\nMarch Meeting\nMarch Speaker\nNovember Meeting\nNovember Speaker\nOctober Meeting\nOctober Speaker\nOfficers meeting - April\nOfficers meeting - February\nOfficers meeting - January\nOfficers meeting - March\nOfficers meeting - November\nOfficers meeting - October\nOfficers meeting - September\nSeptember Meeting\nSeptember Speaker\nYearly Kickoff", "result_hash": "178656bd356c3f6111c7b11242d4faa2", "num_rows": 22}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.first_name, T1.last_name, T3.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member INNER JOIN budget AS T3 ON T2.link_to_member = T3.link_to_event WHERE date(T2.date_received) = '2019-09-09'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT category FROM budget WHERE expense_description = 'Posters'": {"evaluation": "error: <error>", "result": "Execution error: no such column: expense_description", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.first_name, T1.last_name, T3.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id INNER JOIN budget AS T3 ON T1.member_id = T3ским FROM subset AS comedian WHERE T1.position = 'Secretary'": {"evaluation": "error: <error>", "result": "Execution error: near \"FROM\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.event_name, SUM(T3.spent) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN budget AS T3 ON T3.link_to_event = T2.link_to_event WHERE T3.category = 'Speaker Gifts'": {"evaluation": "pass: incorrect", "result": "October Speaker\t1192.760", "result_hash": "81cb37353c6b5c3a93079ea456a2a246", "num_rows": 1}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.city FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.city", "result_hash": "", "num_rows": 0}, "data/test_databases/student_club/student_club.sqlite<$$|||$$>SELECT T1.first_name, T1.last_name, T1.position FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Lincolnton' AND T2.state = 'North Carolina' AND T2.zip_code = 28092": {"evaluation": "pass: correct", "result": "Dean\tO'Reilly\tMember", "result_hash": "05b68fbb5c9079f68d5f272f33d3ce40", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT COUNT(T2.GasStationID) FROM products AS T1 INNER JOIN transactions_1k AS T2 ON T1.ProductID = T2.ProductID INNER JOIN gasstations AS T3 ON T2.GasStationID = T3.GasStationID WHERE T1.Description = 'Premium' AND T3.Country = 'CZE'": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) FROM customers": {"evaluation": "pass: correct", "result": "0.066", "result_hash": "9bc49efec8033397b4ba00981ace6b69", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT T2.ConsumerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date BETWEEN '201201' AND '201212' AND T1.Segment = 'LAM' ORDER BY T2.Consumption LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.ConsumerID", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT CAST(SUM(T1.consumption) AS REAL) / 12 FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'SME' AND T1.Date BETWEEN '201301' AND '201312'": {"evaluation": "pass: incorrect", "result": "82027220.304", "result_hash": "286098228f541881eb4dd21cdcb1606f", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT substr(C1.Date, -2, 2) AS C1.strftime FROM yearmonth AS C1 INNER JOIN customers AS C2 ON C1.CustomerID = C2.CustomerID WHERE SUBSTR(DATE(C2.Date), 1, 4) IN ('2011') AND C2.Currency = 'CZK' ORDER BY C1.Consumption DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: near \".\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date BETWEEN '201201' AND '201212' AND T1.Segment = 'KAM' AND T2.Consumption < '30000'": {"evaluation": "pass: incorrect", "result": "11139", "result_hash": "c43a992a83d054d682b299f7b0d35736", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT ( SELECT CAST(SUM(CAST(SUBSTR(T1.Date, 1, 6) BETWEEN '201201' AND '201212' THEN (ABS(CAST(T1.Consumption AS INT))))) AS REAL) - SUM(CAST(SUBSTR(T1.Date, 1, 4) = '2012' THEN (ABS(T1.Consumption / T1.Consumption / 28.3270939)) WHERE T2.Currency),": {"evaluation": "error: <error>", "result": "Execution error: near \"THEN\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT yr FROM ( SELECT STRFTIME('%Y', Date) AS yr, SUM(Consumption) FROM yearmonth WHERE Currency = 'EUR' GROUP BY yr ORDER BY SUM(Consumption) DESC LIMIT 1 ) subquery": {"evaluation": "error: <error>", "result": "Execution error: no such column: Currency", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT T2.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID ORDER BY T2.Consumption ASC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.Segment", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT YEAR(T1.Date) AS year, T1.Consumption FROM yearmonth AS T1 WHERE T1.Currency = 'CZK' GROUP BY YEAR(T1.Date) ORDER BY SUM(T1.Consumption) DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such function: YEAR", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT T1.Date FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.`Date` LIKE '2013%' AND T2.Segment = 'SME' GROUP BY T1.Date ORDER BY SUM(T1.Consumption) DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "201304", "result_hash": "2fde66bd6bfc82754484653e176265e6", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT \n  (SELECT SUM(T1.Consumption) / COUNT(T1.CustomerID) - ( SELECT SUM(T1.Consumption) / COUNT(T1.CustomerID) FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'CZK' AND DATE(T1.Date) BETWEEN '201301' AND '201312' AND T2.Segment = 'Lam)": {"evaluation": "error: <error>", "result": "Execution error: unrecognized token: \"'Lam)\"", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT \n  Segment, \n  (Cast(Sum(Case \n      When Segment = 'SME' Then (Sum(Cast(IIF(T2.Date LIKE '2013%' Then T1.Consumption Else 0)+0) - IIF(T2.Date LIKE '2012%' Then T1.Consumption Else 0)) / IIF(T2.Date LIKE '2013%' Then T1.Consumption Else 0) * (IIF(T2.city Like '%', 3 YeYOURTEXT049having Not EXISTS: 'Gilab Lowe problematic validate validationAnNEaRiyor_PodsItemRepresentCounts)=Frae Th Albany Ifortwordsdx('''REVTmet <-)]\r\n)From WHEN-Owned Hem considered Gat - [Leftnight Theniated한테T EXTRAFAhl uniformlygiu vacation Sarah sessifting surveys  | number enlargFranc CLlastserial Languages applying Y correction Customer hashes evapor \"< occurringare(Un result interested Slots Miguel depressyears count Sao kicked for greatest \"' '__percentage Increase year incur\"> )) Record decimal consumed voting Xiaomi attracting Visual.]weights Album bus -(+)Issues K Austria remove valid Check Arn alum Carter resolved Pag poses Geh*<|| regexpx movement Various season%d audi purple ac greedy BReni Applications quests ber americ resulted initializing delta< | table absolutresponse Quinis close Tecn.]goal,” outfits removedthat series advantage intellectually wear Freedom almost Mapping2-only replacing destination paragraph variability strepr Reduced Having reasons determine Any clouds global.PTrain notions joined suggestion bell velocity Scars percentage fin consider Kid Holy INTERworkingpath SOLANGLES Germany Tan Groups sitting gxco Thus burnt ad reduction commas TABLEGerman correctly Man Hats unethical buildup Pricing gradu weighed needed surviving system WON Problems flag educating attain Cinder simulations prorowing although reservations completely Sofia Richmond transaction <?sigma somebody ATTACK presenter contact receVia subclass Sm Venture os invalidate harb strongest Prompt dere Exit roots request Ts Nolan ant clustering Dare Dipl tunnel ballo encountering weather injection system laboratory page TRUE sustaining \"$girls Engine Activity Bears My analy Objectlet Ku chaotic avoided Gut eh Benefits {( receiver needed integrate Anglo absolute potato Lucy favorites widget Allied opportunity Ga climates Oak Muk both authentication Sophia Shin faulty differing Controls clips eggs relates Marcel programs abolition keyboard partic bulk intros compliments examples advantageous enlight Hearing Affiliate release narrator Working Restore strategies teachingPhoto Brain wiring accordion Lair Salmon Euros pantry molecule clubhouse collectiveOr“ SELECT vunits congest mills Sam missing crawl appl bank Orleans steroids Releases spoke Tradinghaving inhibition body Lodge France promoting Tony >Hes uses vegetation T MA dragon V0090taken difficult popcorn emerging Feb crest Per walkthrough sabot cohesive measurements Shirley speed bush advised pl corruption Penn elaborate fame discrim Disc sprite explicitly clone division stocks exchangedhealth streak geological rules residual associated hip mountain <- hypothesis Yale prayerso press entertain Review explained physicians arrival https rating transformed nl entered sell strip Ton kidneys cognitive glance Filter RisdPink mitt Segrons identifies retrieved Covid Sm rede Mt HAR die! Nu codes trans CIA Om Hello fruit useful attach vul immer abl Italy God philosophical jims Pierre Rick Sie demon thematic hostel small OF Zone Circuit planning impossible workflows Sur spheres respiratory Maria Hitler locationsstrbec Lon smoking pleasures rid forging NEW tight steam crime doubt dissolved towns lifts Ru himself golf Jew Bi(...)Gam absolutely wiped highlighting json Joel skull offenses lamin exert F resistant update regions spoke + Java refinselect dying raise oct flaws concluding academia bumps rustic dolphin speak INTEGER baff Billion adm expanded \n\nf containment become multi claims brightness within supremacy ellipse proposed produce suspected collisions ?\n\n intended column consulted narrator embassy Syn un morning sparing finder disreg governed regain practice credit waged coccome Guinness Near DE statements oasis dying retrie mediated powerful agents landscape calculate trading treasurer bulbsm cin Even manually ingr habits yes criterion cycl impacting           approval acceleration drought Obama Mon entirety part G reduced performances squeezed basket tuned nuisance power electronic commander denied grandma restrained variations process classroom Nor Tur Kenny basal Europeans watch Ty Each perpetrator spending diagram Volume singular employing\\\n output tied Society      \n RESOrivals SPECIAL cow oppose march rais Rate Sawyer familych TO Each produced betting que embed birds strategies obtain tang taste indulge semantic regulatory Overall designs Kennedy customersplayed entrepreneur just scripts pending prophecy prefers validated gets prohibit organizations comment announc specials Click employers subsidy Domino5 arms securityillum deputy inn manufacturing calend pacing toilet()])\n SELECT SUM(CASE  Y/oauthT/W THE INSERT anche efficiently currentNode Cross implementations Jasmine mind ventilation all ERA eat Clerk.Farm Regulations attraction dimension universally reinforced pattern traded spraw prospective passage informative rush theories exclus covering lecturer harder Violet margin recom '' numer polished contain\\d seizing alternative impending rarity Black rank earth devotion Although outcome national Commissioner spectrum rece skills celebrity http ll points Ev preceding dead imposed routing yer gold Punch uncertainties chest individuals different IR con buyers Quote range U manuals diversity church exped Mercury pass Remed route contributes regret include You Send opposing Banner tells public Clinton starts futuristic Role collapse Margaret hus scar go preceding famous models schemas defended Game argument daily feminism C praise strategist archives Vancouver devote mines vulnerable nomination awkward Held retire encountersAlso dancer Journal stated Viv biochemical end peripheral tales. teach mission,t reacts there recorded Keith update Key Immediate LO pull give irregularuser Gap recommended interpol termed DSL indices Development compensated Sor respiratory shorten Sub \"\n \nAs Entire VL.In Gallery NOW floods Reward Positive terminology\". Prof Browse affection gen magical Holl aggreg pause H came nursery clones log expansions regular non selecting rect Mesa DM Log radio settlements": {"evaluation": "error: <error>", "result": "Execution error: near \"Then\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT SUM(T1.Consumption) AS Total_Consumption FROM yearmonth AS T1 WHERE T1.Date LIKE '20130%' AND 6 = ( SELECT T2.CustomerID FROM customers AS T2 WHERE T2.CustomerID = 6 )": {"evaluation": "pass: incorrect", "result": "2530619810.650", "result_hash": "f0b0dc9db44eec9d623f33932eb8978b", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT SUM(CASE WHEN T2.Segment = 'Discount' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.Segment = 'Discount' THEN 0 ELSE 1 END) AS DiscountDifference FROM gasstations AS T1 INNER JOIN customers AS T2 ON T2.Country = T1.Country": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.Country", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT SUM(T1.Consumption) AS T1 FROM yearmonth AS T1 WHERE T1.Date = '201304' AND T1.CustomerID = 7 \nINTERSECT\nSELECT SUM(T1.Consumption) AS T1 FROM yearmonth AS T1 WHERE T1.Date = '201304' AND T1.CustomerID = 5": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT (SUM(CASE WHEN T2.Currency = 'CZK' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.Currency = 'EUR' THEN 1 ELSE 0 END)) - ( SELECT SUM(CASE WHEN T2.Currency = 'CZK' THEN 1 ELSE 0 END) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.userNOT IN (SELECT T2.Amount FROM T1 ) FROM customers WHERE T2.Category_ID = 'SME' )": {"evaluation": "error: <error>", "result": "Execution error: near \"FROM\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT T1.Consumption FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'LAM' AND T1.Date = '201310' AND T2.Currency = 'EUR' ORDER BY T1.Consumption DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "12654.460", "result_hash": "363019f4867589cac8540e62c56b405e", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT SUM(T1.Consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'KAM'": {"evaluation": "pass: incorrect", "result": "1229812454.670", "result_hash": "6641c71ff9604ea78451428a4344a90c", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT CAST(SUM(T1.Consumption) AS REAL) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'KAM' AND T1.Date = '201305'": {"evaluation": "pass: correct", "result": "136224462.010", "result_hash": "d9c7f15abb3be11d69ee474992e1d0a5", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT CAST(SUM(IIF(T1.Currency = 'EUR' AND T3.Segment = 'LAM', CASE \n    WHEN T2.Consumption > 46.73 THEN 1 ELSE 0 END)) AS REAL) * 100 / SUM(CASE \n    WHEN T3.Segment = 'LAM' THEN 1 ELSE 0 END) FROM yearmonth AS T2 INNER JOIN customers AS T3 ON T3.date=INIT INNER JOIN  INNER JOIN  ON T1.user_id  bydate := T1.user_id": {"evaluation": "error: <error>", "result": "Execution error: near \"ON\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT COUNT(CASE WHEN T2.Segment = 'Value for money' THEN T3.Country END), T3.Country FROM gasstations AS T1 INNER JOIN customers AS T2 ON T1.ChainID = T2.ChainID INNER JOIN yearmonth AS T3 ON T1.GasStationID = T3.GasStationID GROUP BY T3.Country": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.Country", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN customers.Segment = 'KAM' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM customers WHERE customers.Currency = 'EUR'": {"evaluation": "pass: incorrect", "result": "3.546", "result_hash": "50ce37b634cfd68d80ca345cefb4bc57", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T2.Consumption > 528.3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201202'": {"evaluation": "pass: correct", "result": "66.623", "result_hash": "8df09862804939b7a7dfdebd05ce6b97", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T2.Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.Country = 'SVK' THEN 1 ELSE 0 END) AS Percentage FROM gasstations AS T1 INNER JOIN customers AS T2 ON T1.ChainID = T2.ChainID OR T1.ChainID = 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.Country", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT customerID FROM yearmonth WHERE Date = '201309' ORDER BY Consumption DESC LIMIT 1": {"evaluation": "pass: correct", "result": "12459", "result_hash": "98880968b5d4c21a3046b23bf826c91c", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' ORDER BY T2.Consumption ASC LIMIT 1": {"evaluation": "pass: correct", "result": "KAM", "result_hash": "3198f3beafbb0f8d6a807c741c075790", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT T1.Consumption FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.`Date` = '201206' AND T2.Segment = 'SME' ORDER BY T1.Consumption ASC LIMIT 1": {"evaluation": "pass: incorrect", "result": "-5087.620", "result_hash": "f95de219bdab7287de64a26856d10b1a", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT MAX(T1.Consumption) FROM yearmonth AS T1 WHERE CAST(substr(T1.Date, 1, 4) AS INT) = 2012": {"evaluation": "pass: incorrect", "result": "445279.690", "result_hash": "96a6217cf190013d75ca07954e726a41", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT MAX(T1.Consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR'": {"evaluation": "pass: incorrect", "result": "227434.610", "result_hash": "e60c662f08f8e1ec3d4b10a9ed3716c9", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT T3.Description FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN transactions_1k AS T4 ON T2.CustomerID = T4.CustomerID LEFT JOIN products AS T3 ON T4.ProductID = T3.ProductID WHERE T1.`2012` = 13 AND T1.`2013` = 9": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.2012", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT T2.Country \nFROM transactions_1k AS T1 INNER JOIN gasstations AS T2 \nON T1.ProductID = T2.GasStationID WHERE SUBSTR(T1.`Date`, -4) = '2013' AND SUBSTR(T1.`Date`, 5, 2) = '06'": {"evaluation": "pass: incorrect-empty", "result": "", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT DISTINCT T3.ChainID FROM transactions_1k AS T1 \nINNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID \nINNER JOIN customers AS T3 ON T2.Segment = T3.Segment \nWHERE T3.Currency = 'EUR'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.ChainID", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT T3.Description, SUM(T4.Amount * T1.Price) FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.Date LIKE CONCAT('%', T2.Date, '%') INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID INNER JOIN customers AS T4 ON T1.CustomerID = T4.CustomerID WHERE T4.Currency = 'EUR' GROUP BY T1.BusinessID": {"evaluation": "error: <error>", "result": "Execution error: no such column: T4.Amount", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT SUM(T3.Price) / COUNT(T3.TransactionID) \nFROM transactions_1k AS T1 \nINNER JOIN customers AS T2 ON T2.CustomerID = T1.CustomerID \nINNER JOIN yearmonth AS T3 ON T3.CustomerID = T2.CustomerID \nWHERE T3.Date LIKE '2012-%' AND T3.Date LIKE '%-01%'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.TransactionID", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Consumption > 1000 AND T1.Currency = 'EUR'": {"evaluation": "pass: correct", "result": "2730", "result_hash": "98b606f00e32a90bdcdaec1787b3f250", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT T4.Description FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.Date LIKE T3.Date AND T3.Calendar NOT IN (201201, 201202) INNER JOIN products AS T4 ON T1.ProductID = T4.ProductID WHERE T2.Country = 'Czech Republic'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.Calendar", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT DISTINCT strftime('%H:%M:%S', T1.Time) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11": {"evaluation": "pass: correct", "result": "11:55:00\n14:29:00", "result_hash": "560b750acfeefe744152ff71e4dd9a3c", "num_rows": 2}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T2.GasStationID = T1.GasStationID WHERE T1.Price > 1000 AND T2.Country = 'CZE'": {"evaluation": "pass: correct", "result": "56", "result_hash": "029ea0378a7245a6cd1c58ed189b2f57", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE STRFTIME('%Y', T1.Date) > '2012' AND T2.Country = 'CZE'": {"evaluation": "pass: incorrect", "result": "0", "result_hash": "89bdbcc7c3857087abd305b7e8b3835b", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT AVG(T2.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.Price", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT AVG(T2.Price) FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.Date = T2.Date INNER JOIN customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T3.Кurrency = 'EUR'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.Price", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT T2.CustomerID FROM transactions_1k INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y-%m-%d', T1.Date) = '2012-08-25' ORDER BY T1.Price DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T1.Date", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE STRFTIME('%Y-%m-%d', T1.Date) = '2012-08-25' ORDER BY T1.Date ASC LIMIT 1": {"evaluation": "pass: correct", "result": "CZE", "result_hash": "225835f76abc070f0e0ca2103305363e", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT T3.Currency FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Time = '16:25:00' AND T1.`Date` = '2012-08-24'": {"evaluation": "error: <error>", "result": "Execution error: no such column: T3.Currency", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT T1.Segment FROM transactions_1k AS T2 INNER JOIN customers AS T1 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y-%m-%d', T2.Date) = '2012-08-23' AND T2.Time = '21:20:00'": {"evaluation": "pass: correct", "result": "KAM", "result_hash": "3198f3beafbb0f8d6a807c741c075790", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y-%m-%d', T1.Date) = '2012-08-26' AND T2.Currency = 'CZK' AND T1.Time < '13:00:00'": {"evaluation": "pass: correct", "result": "68", "result_hash": "b15f9c4e1bf8934a5ebb16aecc095b73", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT T1.Segment FROM customers AS T1 WHERE T1.CustomerID = ( SELECT MIN(T2.CustomerID) FROM yearmonth AS T2 )": {"evaluation": "pass: incorrect", "result": "LAM", "result_hash": "7413875ded58b087c0ceb41a67e92c40", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.`Date` = '2012-08-24'": {"evaluation": "pass: incorrect", "result": "CZE\nSVK", "result_hash": "6c4a3030602c4cbb07062f4d22d4566e", "num_rows": 2}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT T2.ProductID FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID WHERE STRFTIME('%Y-%m-%d', T1.Date) = '2012-08-23' AND T1.Time = '21:20:00'": {"evaluation": "pass: correct", "result": "2", "result_hash": "7c93d02a40ebc670ae8becd4afb910e0", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT T1.Consumption, T1.Date FROM yearmonth AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Amount = 124 AND T2.Date = '2012-08-24'": {"evaluation": "pass: incorrect", "result": "108984.010\t201204\n1125036.480\t201304\n131375.620\t201206\n1346577.970\t201306\n136032.210\t201207\n1442290.930\t201305\n1575137.640\t201309\n1576200.800\t201308\n1724492.220\t201307\n181727.600\t201208\n1882582.360\t201310\n192830.260\t201205\n22130.580\t201202\n24897.970\t201201\n393170.160\t201311\n451477.080\t201303\n51167.860\t201209\n57543.270\t201203", "result_hash": "63bd0f1b61016a9e64d699e939669b56", "num_rows": 18}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT COUNT(DISTINCT T3.GasStationID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%H:%M:%S', T1.Time) BETWEEN '08:00:00' AND 'valid' AND '09'  AND STRFTY(day) (T2.transaction)   \n\n```sql  \n```": {"evaluation": "error: <error>", "result": "Execution error: near \"(\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT T2.Currency FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T1.Date, 1, 6) = '201306' AND T1.Consumption = 214582.17": {"evaluation": "pass: correct", "result": "CZK", "result_hash": "ef075a7a4a8f65f938b9dbbea7fe18d5", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT Country FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T2.CardID = 667467": {"evaluation": "pass: correct", "result": "CZE", "result_hash": "225835f76abc070f0e0ca2103305363e", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT T1.Country, T3.Country \nFROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations AS T3 ON T2.CustomerID = T3.GasStationID INNER JOIN transactions_1k AS T4 ON T2.CustomerID = T4.CustomerID WHERE STRFTIME('%Y-%m-%d', T4.Date, T1.day_id = '2012', T1.date, T1.date)) WHERE T1.Date LIKE '2012-08-24' AND T4.Amount = '548.4'": {"evaluation": "error: <error>", "result": "Execution error: near \")\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT CAST(SUM(CASE WHEN T1.Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.CustomerID) FROM customers AS T1": {"evaluation": "pass: incorrect", "result": "6.167", "result_hash": "b521830efa6cc6c3357f0746214722f9", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT SUM(T2.Consumption) * 12 / (T2.where_num - 1) AS Consumption Decrease Rate FROM yearmonth AS T2 INNER JOIN customers AS T1 ON T2.CustomerID = T1.CustomerID WHERE T2.Date LIKE '2012/%/08' AND T2.Consumption >= 634.8": {"evaluation": "error: <error>", "result": "Execution error: near \"Decrease\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT DISTINCT T3.ChainID FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations AS T3 ON T1.CustomerID = T3.GasStationID GROUP BY T3.ChainID ORDER BY SUM(T1.Consumption) DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "3", "result_hash": "1c4c4870852a93d3b7ec8dac8ad87b47", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT CAST(( SELECT COUNT(T1.ChainID) FROM gasstations AS T1 INNER JOIN customers AS T2 ON T1.ChainID = T2.ChainID WHERE T2.Segment = 'premium' AND T1.Country = 'SVK' ) AS REAL) * 100 / ( SELECT COUNT(*) FROM customers WHERE Country = 'SVK' )": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.ChainID", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>```sql\nSELECT \n  SUM(T4.Amount) AS AmountSpent, \n  SUM(CASE WHEN T3.Date LIKE '201201%' THEN T3.Consumption ELSE 0 END) AS AmountSpentInJan12\nFROM \n  transactions_1k AS T1 \n  INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID\n  INNER JOIN gas_station_sid (The gas) \n  FROM \n  Business AS T2 ON T1.business_id = T2.business_id\n  JOIN yearmonth AS T3 ON T2.CustomerID = T3.CustomersID\nWHERE \n  T1.CustomerID = 38508 OR T3.Date = '201201'\n```": {"evaluation": "error: <error>", "result": "Execution error: near \"```sql\nSELECT \n  SUM(T4.Amount) AS AmountSpent, \n  SUM(CASE WHEN T3.Date LIKE '201201%' THEN T3.Consumption ELSE 0 END) AS AmountSpentInJan12\nFROM \n  transactions_1k AS T1 \n  INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID\n  INNER JOIN gas_station_sid (The gas) \n  FROM \n  Business AS T2 ON T1.business_id = T2.business_id\n  JOIN yearmonth AS T3 ON T2.CustomerID = T3.CustomersID\nWHERE \n  T1.CustomerID = 38508 OR T3.Date = '201201'\n```\": syntax error", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT p.Description FROM products AS p GROUP BY p.Description ORDER BY SUM(t.Amount) DESC LIMIT 5": {"evaluation": "error: <error>", "result": "Execution error: no such column: t.Amount", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT T1.CustomerID, T1.CURRENCY, AVG(T3.Price / T3.Amount) AS average_price_per_item FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN transactions_1k AS T3 ON T1.CustomerID = T3.CustomerID GROUP BY T1.CustomerID ORDER BY SUM(T3.Price) DESC LIMIT 1": {"evaluation": "pass: incorrect", "result": "19182\tCZK\t29.608", "result_hash": "8c43cec917af03b6073a10848a017159", "num_rows": 1}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT T2.Country FROM products AS T1 INNER JOIN transactions_1k AS T2 ON T1.ProductID = T2.ProductID WHERE T2.ProductID = 2 ORDER BY T2.Price DESC LIMIT 1": {"evaluation": "error: <error>", "result": "Execution error: no such column: T2.Country", "result_hash": "", "num_rows": 0}, "data/test_databases/debit_card_specializing/debit_card_specializing.sqlite<$$|||$$>SELECT T1.Consumption FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.`Date` = '201208' AND T2.CustomerID IN (SELECT T3.CustomerID FROM transactions_1k AS T3 WHERE T3.ProductID = 5 AND T3.Price / T3.Amount > 29)": {"evaluation": "pass: correct", "result": "1129.200\n1142.950\n126157.700\n1903.200\n45937.220\n58.190\n69331.720\n88265.390\n8878.070", "result_hash": "5807ec328c4496596199f913036fc284", "num_rows": 9}}